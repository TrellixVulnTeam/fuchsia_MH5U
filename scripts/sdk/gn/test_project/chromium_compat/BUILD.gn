# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/fuchsia-sdk.gni")
import("//build/shellscript_test.gni")
import("//chromium_compat/build/config/generate_runner_scripts.gni")
import("//chromium_compat/build/config/package.gni")
import("//chromium_compat/build/config/symbol_archive.gni")

# Test file for representative Chromium build rules.

loadable_module("ignore") {
  sources = [ "ignore.cc" ]
}
executable("web_engine_exe") {
  sources = [ "hello.cc" ]
  data_deps = [ ":ignore" ]
}

cr_fuchsia_package("web_engine") {
  binary = ":web_engine_exe"
  manifest = "context_provider.cmx"
  component_name_override = "context_provider"
  package_name_override = "web_engine"
  archive_name_override = "web_engine"

  excluded_files = [ "lib/libignore.so" ]
}

fuchsia_package_runner("web_engine_runner") {
  package = ":web_engine"
}

symbol_archive("symbol_archive") {
  deps = [ ":web_engine" ]
  ids_txt = "$root_gen_dir/chromium_compat/web_engine/ids.txt"
  archive_name =
      "${root_gen_dir}/chromium_compat/web_engine/web_engine.symbols.tar.bz2"
}

shellscript_test("package_analysis_test_web_engine") {
  script_template_file =
      "//tests/package/run_package_analysis_test_template.txt"
  template_keys = [
    "script_path",
    "far_bin_path",
    "package_name",
  ]
  template_data = {
    script_path = rebase_path("${root_out_dir}/gen/tests/package/far.sh")
    far_bin_path = rebase_path("${tools_out_dir}/far")
    package_name = rebase_path("${target_gen_dir}/web_engine/web_engine")
  }
  data_deps = [
    ":web_engine",
    "//build:sdk_tools",
    "//tests/package:copy_test_scripts",
  ]
}

shellscript_test("manifest_check_test_web_engine") {
  script_template_file =
      "//tests/package/run_package_analysis_test_template.txt"
  template_keys = [
    "script_path",
    "far_bin_path",
    "package_name",
    "manifest_name",
  ]
  template_data = {
    script_path =
        rebase_path("${root_out_dir}/gen/tests/package/manifest_check.sh")
    far_bin_path = rebase_path("${tools_out_dir}/far")
    package_name = rebase_path("${target_gen_dir}/web_engine/web_engine")
    manifest_name = "context_provider.cmx"
  }
  data_deps = [
    ":web_engine",
    "//build:sdk_tools",
    "//tests/package:copy_test_scripts",
  ]
}

shellscript_test("verify_package_runner") {
  script_template_file = "run_verify_package_runner_template.txt"
  template_keys = [
    "archive_path",
    "package_name",
    "bin_dir",
  ]
  template_data = {
    archive_path =
        rebase_path("${target_gen_dir}/web_engine/web_engine.far", root_out_dir)
    package_name = "web_engine"
    bin_dir = rebase_path("${root_out_dir}/bin")
  }
  data_deps = [ ":web_engine" ]
}

shellscript_test("verify_symbol_archive") {
  script_template_file = "run_verify_symbol_archive_template.txt"
  template_keys = [ "archive_path" ]
  template_data = {
    archive_path = rebase_path(
            "${root_gen_dir}/chromium_compat/web_engine/web_engine.symbols.tar.bz2")
  }
  data_deps = [ ":symbol_archive" ]
}

group("all") {
  deps = [
    ":symbol_archive",
    ":web_engine",
    ":web_engine_runner",
  ]
}

group("tests") {
  testonly = true
  deps = [
    ":manifest_check_test_web_engine",
    ":package_analysis_test_web_engine",
    ":verify_package_runner",
    ":verify_symbol_archive",
  ]
}
