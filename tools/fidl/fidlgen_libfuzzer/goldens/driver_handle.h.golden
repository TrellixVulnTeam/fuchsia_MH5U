// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <test/driverhandle/cpp/fidl.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using ServerEndWrapper = ::test::driverhandle::ServerEndWrapper;
using ClientEndWrapper = ::test::driverhandle::ClientEndWrapper;

template <>
struct MinSize<ServerEndWrapper> {
  operator size_t() {
    return MinSize<
        ::fidl::InterfaceRequest<::test::driverhandle::DriverProtocol>>();
  }
};
template <>
struct Allocate<ServerEndWrapper> {
  ServerEndWrapper operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ServerEndWrapper>());
    ServerEndWrapper out;
    const size_t slack_per_member = (*size - MinSize<ServerEndWrapper>()) / 1;
    size_t out_size;
    out_size =
        MinSize<
            ::fidl::InterfaceRequest<::test::driverhandle::DriverProtocol>>() +
        slack_per_member;
    out.value = Allocate<
        ::fidl::InterfaceRequest<::test::driverhandle::DriverProtocol>>{}(
        src, &out_size);
    return out;
  }
};
template <>
struct MinSize<ClientEndWrapper> {
  operator size_t() {
    return MinSize<
        ::fidl::InterfaceHandle<::test::driverhandle::DriverProtocol>>();
  }
};
template <>
struct Allocate<ClientEndWrapper> {
  ClientEndWrapper operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<ClientEndWrapper>());
    ClientEndWrapper out;
    const size_t slack_per_member = (*size - MinSize<ClientEndWrapper>()) / 1;
    size_t out_size;
    out_size =
        MinSize<
            ::fidl::InterfaceHandle<::test::driverhandle::DriverProtocol>>() +
        slack_per_member;
    out.value = Allocate<
        ::fidl::InterfaceHandle<::test::driverhandle::DriverProtocol>>{}(
        src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
