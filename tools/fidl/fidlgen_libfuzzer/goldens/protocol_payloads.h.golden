// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <test/protocolpayloads/cpp/fidl.h>
#include <test/protocolpayloads/imported/cpp/libfuzzer.h>

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"
// For ::std::max_element().
#include <algorithm>
// For uint64_t.
#include <stdint.h>

namespace fuzzing {

using MainProtocol_TwoWayImportWithError_Result =
    ::test::protocolpayloads::MainProtocol_TwoWayImportWithError_Result;
using MainProtocol_TwoWayAnonWithError_Response =
    ::test::protocolpayloads::MainProtocol_TwoWayAnonWithError_Response;
using MainProtocol_TwoWayAnonWithError_Result =
    ::test::protocolpayloads::MainProtocol_TwoWayAnonWithError_Result;
using MainProtocol_OnImportWithError_Result =
    ::test::protocolpayloads::MainProtocol_OnImportWithError_Result;
using MainProtocol_OnAnonWithError_Response =
    ::test::protocolpayloads::MainProtocol_OnAnonWithError_Response;
using MainProtocol_OnAnonWithError_Result =
    ::test::protocolpayloads::MainProtocol_OnAnonWithError_Result;
using LocalStructPayload = ::test::protocolpayloads::LocalStructPayload;
using MainProtocol_TwoWayLocalWithError_Result =
    ::test::protocolpayloads::MainProtocol_TwoWayLocalWithError_Result;
using MainProtocol_OnLocalWithError_Result =
    ::test::protocolpayloads::MainProtocol_OnLocalWithError_Result;

template <>
struct MinSize<MainProtocol_TwoWayImportWithError_Result> {
  operator size_t() {
    size_t sizes[] = {
        0, MinSize<::test::protocolpayloads::imported::ImportStructPayload>(),
        MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_TwoWayImportWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_TwoWayImportWithError_Result operator()(FuzzInput* src,
                                                       size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_TwoWayImportWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_TwoWayImportWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(
            Allocate<::test::protocolpayloads::imported::ImportStructPayload>{}(
                src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocol_TwoWayAnonWithError_Response> {
  operator size_t() { return MinSize<uint32_t>() + MinSize<uint32_t>(); }
};
template <>
struct Allocate<MainProtocol_TwoWayAnonWithError_Response> {
  MainProtocol_TwoWayAnonWithError_Response operator()(FuzzInput* src,
                                                       size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_TwoWayAnonWithError_Response>());
    MainProtocol_TwoWayAnonWithError_Response out;
    const size_t slack_per_member =
        (*size - MinSize<MainProtocol_TwoWayAnonWithError_Response>()) / 2;
    size_t out_size;
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.a = Allocate<uint32_t>{}(src, &out_size);
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.b = Allocate<uint32_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<MainProtocol_TwoWayAnonWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0,
                      MinSize<::test::protocolpayloads::
                                  MainProtocol_TwoWayAnonWithError_Response>(),
                      MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_TwoWayAnonWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_TwoWayAnonWithError_Result operator()(FuzzInput* src,
                                                     size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_TwoWayAnonWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_TwoWayAnonWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(
            Allocate<::test::protocolpayloads::
                         MainProtocol_TwoWayAnonWithError_Response>{}(src,
                                                                      size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocol_OnImportWithError_Result> {
  operator size_t() {
    size_t sizes[] = {
        0, MinSize<::test::protocolpayloads::imported::ImportStructPayload>(),
        MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_OnImportWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_OnImportWithError_Result operator()(FuzzInput* src,
                                                   size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_OnImportWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_OnImportWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(
            Allocate<::test::protocolpayloads::imported::ImportStructPayload>{}(
                src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocol_OnAnonWithError_Response> {
  operator size_t() { return MinSize<uint32_t>() + MinSize<uint32_t>(); }
};
template <>
struct Allocate<MainProtocol_OnAnonWithError_Response> {
  MainProtocol_OnAnonWithError_Response operator()(FuzzInput* src,
                                                   size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_OnAnonWithError_Response>());
    MainProtocol_OnAnonWithError_Response out;
    const size_t slack_per_member =
        (*size - MinSize<MainProtocol_OnAnonWithError_Response>()) / 2;
    size_t out_size;
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.a = Allocate<uint32_t>{}(src, &out_size);
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.b = Allocate<uint32_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<MainProtocol_OnAnonWithError_Result> {
  operator size_t() {
    size_t sizes[] = {
        0,
        MinSize<
            ::test::protocolpayloads::MainProtocol_OnAnonWithError_Response>(),
        MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_OnAnonWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_OnAnonWithError_Result operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_OnAnonWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_OnAnonWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(
            Allocate<::test::protocolpayloads::
                         MainProtocol_OnAnonWithError_Response>{}(src, size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<LocalStructPayload> {
  operator size_t() { return MinSize<uint32_t>() + MinSize<uint32_t>(); }
};
template <>
struct Allocate<LocalStructPayload> {
  LocalStructPayload operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<LocalStructPayload>());
    LocalStructPayload out;
    const size_t slack_per_member = (*size - MinSize<LocalStructPayload>()) / 2;
    size_t out_size;
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.a = Allocate<uint32_t>{}(src, &out_size);
    out_size = MinSize<uint32_t>() + slack_per_member;
    out.b = Allocate<uint32_t>{}(src, &out_size);
    return out;
  }
};
template <>
struct MinSize<MainProtocol_TwoWayLocalWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0,
                      MinSize<::test::protocolpayloads::LocalStructPayload>(),
                      MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_TwoWayLocalWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_TwoWayLocalWithError_Result operator()(FuzzInput* src,
                                                      size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_TwoWayLocalWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_TwoWayLocalWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(
            Allocate<::test::protocolpayloads::LocalStructPayload>{}(src,
                                                                     size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};
template <>
struct MinSize<MainProtocol_OnLocalWithError_Result> {
  operator size_t() {
    size_t sizes[] = {0,
                      MinSize<::test::protocolpayloads::LocalStructPayload>(),
                      MinSize<uint32_t>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template <>
struct Allocate<MainProtocol_OnLocalWithError_Result> {
  static_assert(2 > 0, "xunion must have at least one member");

  MainProtocol_OnLocalWithError_Result operator()(FuzzInput* src,
                                                  size_t* size) {
    ZX_ASSERT(*size >= MinSize<MainProtocol_OnLocalWithError_Result>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    MainProtocol_OnLocalWithError_Result out;
    switch (selector % 2) {
      case 0: {
        out.set_response(
            Allocate<::test::protocolpayloads::LocalStructPayload>{}(src,
                                                                     size));
        break;
      }
      case 1: {
        out.set_err(Allocate<uint32_t>{}(src, size));
        break;
      }
    }

    return out;
  }
};

}  // namespace fuzzing
