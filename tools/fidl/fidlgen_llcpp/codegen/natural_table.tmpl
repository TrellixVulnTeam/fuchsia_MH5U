{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}

{{- define "Table:ForwardDeclaration:NaturalTypesHeader" }}
{{ EnsureNamespace . }}

class {{ .Name }};
{{- end }}

{{- define "Table:NaturalTypesHeader" }}
{{ EnsureNamespace . }}
{{ if .IsResourceType }}
{{- IfdefFuchsia -}}
{{- end }}
extern "C" const fidl_type_t {{ .CodingTableType.Name }};

{{ .Docs }}
class {{ .Name }} final {
 private:
  struct Storage_;
 public:
  {{ .Name }}(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  {{ .Name }}() noexcept = default;
  {{ .Name }}({{ .Name }}&&) noexcept = default;
  {{ .Name }}& operator=({{ .Name }}&&) noexcept = default;
  {{- if not .IsResourceType }}
    {{ .Name }}(const {{ .Name }}& other) noexcept : {{ .Name }}(other.CloneStorage_()){}
    {{ .Name }}& operator=(const {{ .Name }}& other) noexcept {
      storage_ = other.CloneStorage_();
      return *this;
    }
  bool operator==(const {{.Name }}& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<{{ . }}>::Equal(this, &other);
  }
  bool operator!=(const {{.Name }}& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<{{ . }}>::Equal(this, &other);
  }
  {{- end }}

  bool IsEmpty() const {
    {{- if len .Members }}
      return !(
        {{- range $i, $m := .Members }}
          {{- if $i }}||{{ end -}}
          storage_.{{ .Name }}.has_value()
        {{- end }}
      );
    {{- else }}
      return true;
    {{- end }}
  }

  {{- range .Members }}
    {{ .Docs }}
    const cpp17::optional<{{ .Type }}>& {{ .Name }}() const { return storage_.{{ .Name }}; }
    {{- .Docs }}
    ::cpp17::optional<{{ .Type }}>& {{ .Name }}() { return storage_.{{ .Name }}; }
  {{- end }}
 private:
  struct Storage_ final {
    {{- range .Members -}}
      {{ .Docs }}
      ::cpp17::optional<{{ .Type }}> {{ .Name }} {};
    {{- end }}
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  {{- if not .IsResourceType }}
    Storage_ CloneStorage_() const;
  {{- end }}
  friend struct ::fidl::internal::NaturalTableCodingTraits<{{ . }}>;
  friend struct ::fidl::internal::MemberVisitor<{{ . }}>;
  static constexpr auto kMembers = std::make_tuple(
    {{- range $i, $m := .Members }}
      {{- if $i }}, {{ end -}}
      ::fidl::internal::NaturalTableMember<Storage_, {{ $m.Type }}>{
        {{ $m.Ordinal }}, &Storage_::{{ $m.Name }}
        {{- if $m.HandleInformation -}}
          , std::make_optional<::fidl::internal::NaturalHandleInformation>({
            .object_type = {{ $m.HandleInformation.ObjectType }},
            .rights = {{ $m.HandleInformation.Rights }}
          })
        {{- end -}}
      }
    {{- end -}}
  );
};
{{ if .IsResourceType }}
{{- EndifFuchsia -}}
{{- end }}
{{- end }}


{{- define "Table:Traits:NaturalTypesHeader" }}
  {{ if .IsResourceType }}
  template <>
  struct IsResource<{{ . }}> : public std::true_type {};
  {{- end }}
  template <>
  struct IsFidlType<{{ . }}> : public std::true_type {};

  {{- /*
  TODO(fxbug.dev/82189): We are reusing the HLCPP coding machinery. For now this
  is the minimal to support encoding/decoding, without any optimizations. This may
  change as we gradually move to a complete natural domain object fork.
  */}}

  template <>
  struct internal::NaturalCodingTraits<{{ . }}> :
    public ::fidl::internal::NaturalTableCodingTraits<{{ . }}> {};
{{ end }}


{{- define "Table:NaturalTypesSource" }}
{{- EnsureNamespace "" }}

{{ if not .IsResourceType }}
{{ . }}::Storage_ {{ .NoLeading }}::CloneStorage_() const {
    return Storage_{
      {{- range $i, $m := .Members }}
        {{- if $i }}, {{ end }}
        ::fidl::internal::NaturalClone(storage_.{{ .Name }})
      {{- end }}
    };
  }
{{- end }}
{{- end }}
