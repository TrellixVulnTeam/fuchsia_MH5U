{{/*
// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
*/}}


{{- define "Method:ClientImplAsyncBuffer:WireMessagingHeader" }}
{{ .Docs }}
{{- if .DocComments }}
//
{{- end }}
// Caller provides the backing storage for FIDL message.
void {{ .Name }}({{ RenderParams .RequestArgs (printf "%s* _context" .WireResponseContext) }});
{{ end }}


{{- define "Method:ClientImplAsyncBuffer:WireMessagingSource" }}
void {{ .Protocol.WireWeakAsyncBufferClientImpl.NoLeading }}::{{ .Name }}(
    {{- RenderParams .RequestArgs (printf "%s* _context" .WireResponseContext) }}) {
  constexpr uint32_t _buffer_size = ::fidl::AsyncClientMethodBufferSizeInChannel<{{ .Marker }}>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    ::fidl::OutgoingMessage _failure{_allocation.error_value()};
    _client_base()->SendTwoWay(_failure, _context);
    return;
  }

  {{ .WireTransactionalRequest }} _request{ {{ RenderForwardParams .RequestArgs }} };
  ::fidl::unstable::UnownedEncodedMessage<{{ .WireTransactionalRequest }}> _request_message(
      _allocation->data, _buffer_size, &_request);
  _client_base()->SendTwoWay(_request_message.GetOutgoingMessage(), _context);
}
{{- end }}
