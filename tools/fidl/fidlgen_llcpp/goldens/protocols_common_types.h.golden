// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/traits.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>

namespace test_protocols {
// |rights| is strict, hence is guaranteed to only contain
// members defined in the FIDL schema when receiving it in a message.
// Sending unknown members will fail at runtime.
class rights final {
 public:
  constexpr rights() = default;

  // Constructs an instance of |rights| from an underlying primitive value,
  // preserving any bit member not defined in the FIDL schema.
  explicit constexpr rights(uint32_t value) : value_(value) {}
  const static rights kTransfer;
  const static rights kDuplicate;
  const static rights kMask;

  explicit constexpr inline operator uint32_t() const { return value_; }
  explicit constexpr inline operator bool() const {
    return static_cast<bool>(value_);
  }
  constexpr inline bool operator==(const rights& other) const {
    return value_ == other.value_;
  }
  constexpr inline bool operator!=(const rights& other) const {
    return value_ != other.value_;
  }
  constexpr inline rights operator~() const;
  constexpr inline rights operator|(const rights& other) const;
  constexpr inline rights operator&(const rights& other) const;
  constexpr inline rights operator^(const rights& other) const;
  constexpr inline void operator|=(const rights& other);
  constexpr inline void operator&=(const rights& other);
  constexpr inline void operator^=(const rights& other);

  // Constructs an instance of |rights| from an underlying primitive value
  // if the primitive does not contain any unknown members not defined in the
  // FIDL schema. Otherwise, returns |cpp17::nullopt|.
  constexpr inline static cpp17::optional<rights> TryFrom(uint32_t value) {
    if (value & ~kMask.value_) {
      return cpp17::nullopt;
    }
    return rights(value & rights::kMask.value_);
  }

  // Constructs an instance of |rights| from an underlying primitive value,
  // clearing any bit member not defined in the FIDL schema.
  constexpr inline static rights TruncatingUnknown(uint32_t value) {
    return rights(value & rights::kMask.value_);
  }

 private:
  uint32_t value_ = 0;
};
constexpr const ::test_protocols::rights rights::kTransfer =
    ::test_protocols::rights(1u);
constexpr const ::test_protocols::rights rights::kDuplicate =
    ::test_protocols::rights(2u);
constexpr const ::test_protocols::rights rights::kMask =
    ::test_protocols::rights(3u);

constexpr inline ::test_protocols::rights rights::operator~() const {
  return ::test_protocols::rights(
      static_cast<uint32_t>(~this->value_ & kMask.value_));
}

constexpr inline ::test_protocols::rights rights::operator|(
    const ::test_protocols::rights& other) const {
  return ::test_protocols::rights(
      static_cast<uint32_t>(this->value_ | other.value_));
}

constexpr inline ::test_protocols::rights rights::operator&(
    const ::test_protocols::rights& other) const {
  return ::test_protocols::rights(
      static_cast<uint32_t>(this->value_ & other.value_));
}

constexpr inline ::test_protocols::rights rights::operator^(
    const ::test_protocols::rights& other) const {
  return ::test_protocols::rights(
      static_cast<uint32_t>(this->value_ ^ other.value_));
}

constexpr inline void rights::operator|=(
    const ::test_protocols::rights& other) {
  this->value_ |= other.value_;
}

constexpr inline void rights::operator&=(
    const ::test_protocols::rights& other) {
  this->value_ &= other.value_;
}

constexpr inline void rights::operator^=(
    const ::test_protocols::rights& other) {
  this->value_ ^= other.value_;
}

enum class obj_type : uint32_t {

  kNone = 0u,

  kSocket = 14u,
};

enum class ErrorEnum : uint32_t {

  kErrFoo = 1u,

  kErrBar = 2u,
};

}  // namespace test_protocols
namespace fidl {

template <>
struct IsFidlType<::test_protocols::rights> : public std::true_type {};
template <>
struct ContainsHandle<::test_protocols::rights> : public std::false_type {};
static_assert(std::is_standard_layout_v<::test_protocols::rights>);
static_assert(sizeof(::test_protocols::rights) == sizeof(uint32_t));

template <>
struct IsFidlType<::test_protocols::obj_type> : public std::true_type {};
template <>
struct ContainsHandle<::test_protocols::obj_type> : public std::false_type {};

template <>
struct IsFidlType<::test_protocols::ErrorEnum> : public std::true_type {};
template <>
struct ContainsHandle<::test_protocols::ErrorEnum> : public std::false_type {};

}  // namespace fidl
