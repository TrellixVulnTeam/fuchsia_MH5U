// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.anonymous/cpp/natural_messaging.h>

namespace test_anonymous {
[[maybe_unused]] constexpr inline uint64_t kSomeProtocol_SomeMethod_Ordinal =
    2515914517457749720lu;

#ifdef __Fuchsia__
}  // namespace test_anonymous
void fidl::internal::NaturalClientImpl<::test_anonymous::SomeProtocol>::
    SomeMethod(
        ::test_anonymous::SomeProtocolSomeMethodRequest&& payload,
        ::fidl::ClientCallback<::test_anonymous::SomeProtocol::SomeMethod>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_anonymous::kSomeProtocol_SomeMethod_Ordinal};
  return messenger().TwoWay(
      &::test_anonymous::test_anonymous_SomeProtocolSomeMethodRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_anonymous::SomeProtocol::SomeMethod>,
          ::fidl::ClientCallback<::test_anonymous::SomeProtocol::SomeMethod>>(
          ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_anonymous::SomeProtocol>::
    SomeMethod(
        ::test_anonymous::SomeProtocolSomeMethodRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_anonymous::SomeProtocol::SomeMethod>&& _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_anonymous::kSomeProtocol_SomeMethod_Ordinal};
  return messenger().TwoWay(
      &::test_anonymous::test_anonymous_SomeProtocolSomeMethodRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_anonymous::SomeProtocol::SomeMethod>,
          ::fidl::ClientResponseCallback<
              ::test_anonymous::SomeProtocol::SomeMethod>>(
          ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal,
          std::move(_callback)));
}
namespace test_anonymous {
#endif  // __Fuchsia__

}  // namespace test_anonymous
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_anonymous::SomeProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::
    NaturalCompleterBase<::test_anonymous::SomeProtocol::SomeMethod>::Reply(
        ::test_anonymous::SomeProtocolSomeMethodTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_anonymous::kSomeProtocol_SomeMethod_Ordinal};
  _messenger.SendReply(
      &::test_anonymous::test_anonymous_SomeProtocolSomeMethodTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_anonymous::SomeProtocol>::entries_[] = {
    {
        ::test_anonymous::kSomeProtocol_SomeMethod_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_anonymous::SomeProtocol::SomeMethod>>
              decoded =
                  ::fidl::Request<::test_anonymous::SomeProtocol::SomeMethod>::
                      DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_anonymous::SomeProtocol::SomeMethod>::Sync completer(txn);
          static_cast<::fidl::Server<::test_anonymous::SomeProtocol>*>(
              interface)
              ->SomeMethod(decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_anonymous::SomeProtocol>::entries_end_ = &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_anonymous::SomeProtocol>::
    Dispatch(::fidl::Server<::test_anonymous::SomeProtocol>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_anonymous::SomeProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_anonymous::SomeProtocol>::Dispatch(this, std::move(msg),
                                                std::move(transport_context),
                                                txn);
}
#endif  // __Fuchsia__
