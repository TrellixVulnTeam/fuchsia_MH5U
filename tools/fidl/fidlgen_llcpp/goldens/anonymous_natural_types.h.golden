// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.anonymous/cpp/common_types.h>
#include <fidl/test.anonymous/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_anonymous {
class TableData;

class SomeProtocolSomeMethodRequest;

class OverrideTest;

class SomeProtocol_SomeMethod_Response;

class SomeProtocolSomeMethodTopResponse;

class TableMember;

class FunctionApplication;

class UnionMember;

class Expression;

class SomeProtocol_SomeMethod_Result;

extern "C" const fidl_type_t test_anonymous_UnionMemberTable;

class UnionMember final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, uint8_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kUnionData = 2,  // 0x2
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  UnionMember() : storage_(std::make_shared<Storage_>()) {}

  UnionMember(UnionMember&&) noexcept = default;
  UnionMember& operator=(UnionMember&&) noexcept = default;
  UnionMember(const UnionMember& other) noexcept
      : UnionMember(other.CloneStorage_()) {}
  UnionMember& operator=(const UnionMember& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const UnionMember& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const UnionMember& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_anonymous::UnionMember::Tag Which() const {
    return UnionMember::IndexToTag(storage_->index());
  }
  static UnionMember WithUnionData(uint8_t val) {
    return UnionMember(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> union_data() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> union_data() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_anonymous::UnionMember>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit UnionMember(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::test_anonymous::UnionMember::Tag tag) {
    switch (tag) {
      case ::test_anonymous::UnionMember::Tag::kUnionData:
        return 1;
      case ::test_anonymous::UnionMember::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_anonymous::UnionMember::Tag IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_anonymous::UnionMember::Tag::kUnionData;
      default:
        return ::test_anonymous::UnionMember::Tag::kUnknown;
    }
  }
};

extern "C" const fidl_type_t test_anonymous_TableDataTable;

class TableData final {
 private:
  struct Storage_;

 public:
  TableData(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  TableData(uint8_t data) noexcept : storage_({.data = std::move(data)}) {}
  TableData() : TableData(Storage_{}) {}

  TableData(TableData&&) noexcept = default;
  TableData& operator=(TableData&&) noexcept = default;
  TableData(const TableData& other) noexcept
      : TableData(other.CloneStorage_()) {}
  TableData& operator=(const TableData& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const TableData& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::TableData, 1, 1>::Equal(this, &other);
  }
  bool operator!=(const TableData& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::TableData, 1, 1>::Equal(this, &other);
  }

  uint8_t data() const { return storage_.data; }

  uint8_t& data() { return storage_.data; }

 private:
  struct Storage_ final {
    uint8_t data{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_anonymous::TableData, 1, 1>;
  friend struct ::fidl::internal::MemberVisitor<::test_anonymous::TableData>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint8_t>{
          &Storage_::data, 0, 0});
};

extern "C" const fidl_type_t test_anonymous_TableMemberTable;

class TableMember final {
 private:
  struct Storage_;

 public:
  TableMember(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  TableMember() noexcept = default;
  TableMember(TableMember&&) noexcept = default;
  TableMember& operator=(TableMember&&) noexcept = default;
  TableMember(const TableMember& other) noexcept
      : TableMember(other.CloneStorage_()) {}
  TableMember& operator=(const TableMember& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const TableMember& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_anonymous::TableMember>::Equal(this, &other);
  }
  bool operator!=(const TableMember& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_anonymous::TableMember>::Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.table_data.has_value()); }

  const cpp17::optional<::std::vector<::test_anonymous::TableData>>&
  table_data() const {
    return storage_.table_data;
  }
  ::cpp17::optional<::std::vector<::test_anonymous::TableData>>& table_data() {
    return storage_.table_data;
  }

 private:
  struct Storage_ final {
    ::cpp17::optional<::std::vector<::test_anonymous::TableData>> table_data{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_anonymous::TableMember>;
  friend struct ::fidl::internal::MemberVisitor<::test_anonymous::TableMember>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalTableMember<
                      Storage_, ::std::vector<::test_anonymous::TableData>>{
          2, &Storage_::table_data});
};

extern "C" const fidl_type_t test_anonymous_SomeProtocolSomeMethodRequestTable;

class SomeProtocolSomeMethodRequest final {
 private:
  struct Storage_;

 public:
  SomeProtocolSomeMethodRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SomeProtocolSomeMethodRequest(
      ::test_anonymous::UnionMember union_member,
      ::test_anonymous::TableMember table_member) noexcept
      : storage_({.union_member = std::move(union_member),
                  .table_member = std::move(table_member)}) {}
  SomeProtocolSomeMethodRequest() : SomeProtocolSomeMethodRequest(Storage_{}) {}

  SomeProtocolSomeMethodRequest(SomeProtocolSomeMethodRequest&&) noexcept =
      default;
  SomeProtocolSomeMethodRequest& operator=(
      SomeProtocolSomeMethodRequest&&) noexcept = default;
  SomeProtocolSomeMethodRequest(
      const SomeProtocolSomeMethodRequest& other) noexcept
      : SomeProtocolSomeMethodRequest(other.CloneStorage_()) {}
  SomeProtocolSomeMethodRequest& operator=(
      const SomeProtocolSomeMethodRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SomeProtocolSomeMethodRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::SomeProtocolSomeMethodRequest, 40, 32>::Equal(this,
                                                                        &other);
  }
  bool operator!=(const SomeProtocolSomeMethodRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::SomeProtocolSomeMethodRequest, 40, 32>::Equal(this,
                                                                        &other);
  }

  const ::test_anonymous::UnionMember& union_member() const {
    return storage_.union_member;
  }

  ::test_anonymous::UnionMember& union_member() {
    return storage_.union_member;
  }

  const ::test_anonymous::TableMember& table_member() const {
    return storage_.table_member;
  }

  ::test_anonymous::TableMember& table_member() {
    return storage_.table_member;
  }

 private:
  struct Storage_ final {
    ::test_anonymous::UnionMember union_member{};
    ::test_anonymous::TableMember table_member{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_anonymous::SomeProtocolSomeMethodRequest, 40, 32>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_anonymous::SomeProtocolSomeMethodRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::test_anonymous::UnionMember>{
          &Storage_::union_member, 0, 0},
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::test_anonymous::TableMember>{
          &Storage_::table_member, 24, 16});
};

extern "C" const fidl_type_t test_anonymous_OverrideTestTable;

class OverrideTest final {
 private:
  struct Storage_;

 public:
  OverrideTest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  OverrideTest(::test_anonymous::Op op,
               ::std::unique_ptr<::test_anonymous::Expression> left,
               ::std::unique_ptr<::test_anonymous::Expression> right) noexcept
      : storage_({.op = std::move(op),
                  .left = std::move(left),
                  .right = std::move(right)}) {}
  OverrideTest() : OverrideTest(Storage_{}) {}

  OverrideTest(OverrideTest&&) noexcept = default;
  OverrideTest& operator=(OverrideTest&&) noexcept = default;
  OverrideTest(const OverrideTest& other) noexcept
      : OverrideTest(other.CloneStorage_()) {}
  OverrideTest& operator=(const OverrideTest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const OverrideTest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::OverrideTest, 56, 40>::Equal(this, &other);
  }
  bool operator!=(const OverrideTest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::OverrideTest, 56, 40>::Equal(this, &other);
  }

  ::test_anonymous::Op op() const { return storage_.op; }

  ::test_anonymous::Op& op() { return storage_.op; }

  const ::std::unique_ptr<::test_anonymous::Expression>& left() const {
    return storage_.left;
  }

  ::std::unique_ptr<::test_anonymous::Expression>& left() {
    return storage_.left;
  }

  const ::std::unique_ptr<::test_anonymous::Expression>& right() const {
    return storage_.right;
  }

  ::std::unique_ptr<::test_anonymous::Expression>& right() {
    return storage_.right;
  }

 private:
  struct Storage_ final {
    ::test_anonymous::Op op{};
    ::std::unique_ptr<::test_anonymous::Expression> left{};
    ::std::unique_ptr<::test_anonymous::Expression> right{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_anonymous::OverrideTest, 56, 40>;
  friend struct ::fidl::internal::MemberVisitor<::test_anonymous::OverrideTest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, ::test_anonymous::Op>{
          &Storage_::op, 0, 0},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::std::unique_ptr<::test_anonymous::Expression>>{
          &Storage_::left, 8, 8},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::std::unique_ptr<::test_anonymous::Expression>>{
          &Storage_::right, 32, 24});
};

extern "C" const fidl_type_t test_anonymous_FunctionApplicationTable;

class FunctionApplication final {
 private:
  struct Storage_;

 public:
  FunctionApplication(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  FunctionApplication() noexcept = default;
  FunctionApplication(FunctionApplication&&) noexcept = default;
  FunctionApplication& operator=(FunctionApplication&&) noexcept = default;
  FunctionApplication(const FunctionApplication& other) noexcept
      : FunctionApplication(other.CloneStorage_()) {}
  FunctionApplication& operator=(const FunctionApplication& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const FunctionApplication& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_anonymous::FunctionApplication>::Equal(this, &other);
  }
  bool operator!=(const FunctionApplication& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_anonymous::FunctionApplication>::Equal(this, &other);
  }

  bool IsEmpty() const {
    return !(storage_.func.has_value() || storage_.args.has_value() ||
             storage_.flags.has_value());
  }

  const cpp17::optional<::std::string>& func() const { return storage_.func; }
  ::cpp17::optional<::std::string>& func() { return storage_.func; }

  const cpp17::optional<
      ::std::vector<::std::unique_ptr<::test_anonymous::Expression>>>&
  args() const {
    return storage_.args;
  }
  ::cpp17::optional<
      ::std::vector<::std::unique_ptr<::test_anonymous::Expression>>>&
  args() {
    return storage_.args;
  }

  const cpp17::optional<::test_anonymous::Flags>& flags() const {
    return storage_.flags;
  }
  ::cpp17::optional<::test_anonymous::Flags>& flags() { return storage_.flags; }

 private:
  struct Storage_ final {
    ::cpp17::optional<::std::string> func{};
    ::cpp17::optional<
        ::std::vector<::std::unique_ptr<::test_anonymous::Expression>>>
        args{};
    ::cpp17::optional<::test_anonymous::Flags> flags{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_anonymous::FunctionApplication>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_anonymous::FunctionApplication>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<Storage_, ::std::string>{
          1, &Storage_::func},
      ::fidl::internal::NaturalTableMember<
          Storage_,
          ::std::vector<::std::unique_ptr<::test_anonymous::Expression>>>{
          3, &Storage_::args},
      ::fidl::internal::NaturalTableMember<Storage_, ::test_anonymous::Flags>{
          4, &Storage_::flags});
};

extern "C" const fidl_type_t test_anonymous_ExpressionTable;

class Expression final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate, uint64_t, ::test_anonymous::OverrideTest,
                     ::test_anonymous::FunctionApplication>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kValue = 1,                // 0x1
    kBinOp = 2,                // 0x2
    kFunctionApplication = 3,  // 0x3
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  Expression() : storage_(std::make_shared<Storage_>()) {}

  Expression(Expression&&) noexcept = default;
  Expression& operator=(Expression&&) noexcept = default;
  Expression(const Expression& other) noexcept
      : Expression(other.CloneStorage_()) {}
  Expression& operator=(const Expression& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const Expression& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const Expression& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_anonymous::Expression::Tag Which() const {
    return Expression::IndexToTag(storage_->index());
  }
  static Expression WithValue(uint64_t val) {
    return Expression(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> value() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> value() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static Expression WithBinOp(::test_anonymous::OverrideTest val) {
    return Expression(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> bin_op() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> bin_op() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  static Expression WithFunctionApplication(
      ::test_anonymous::FunctionApplication val) {
    return Expression(
        std::make_shared<Storage_>(std::in_place_index_t<3>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<3, Storage_> function_application()
      const {
    return ::fidl::internal::UnionMemberView<3, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<3, Storage_> function_application() {
    return ::fidl::internal::UnionMemberView<3, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_anonymous::Expression>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 4>
      kMembers = {std::nullopt, std::nullopt, std::nullopt, std::nullopt};

  explicit Expression(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::test_anonymous::Expression::Tag tag) {
    switch (tag) {
      case ::test_anonymous::Expression::Tag::kValue:
        return 1;
      case ::test_anonymous::Expression::Tag::kBinOp:
        return 2;
      case ::test_anonymous::Expression::Tag::kFunctionApplication:
        return 3;
      case ::test_anonymous::Expression::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_anonymous::Expression::Tag IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_anonymous::Expression::Tag::kValue;
      case 2:
        return ::test_anonymous::Expression::Tag::kBinOp;
      case 3:
        return ::test_anonymous::Expression::Tag::kFunctionApplication;
      default:
        return ::test_anonymous::Expression::Tag::kUnknown;
    }
  }
};

extern "C" const fidl_type_t
    test_anonymous_SomeProtocol_SomeMethod_ResponseTable;

class SomeProtocol_SomeMethod_Response final {
 private:
  struct Storage_;

 public:
  SomeProtocol_SomeMethod_Response(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SomeProtocol_SomeMethod_Response(
      ::test_anonymous::BitsMember bits_member) noexcept
      : storage_({.bits_member = std::move(bits_member)}) {}
  SomeProtocol_SomeMethod_Response()
      : SomeProtocol_SomeMethod_Response(Storage_{}) {}

  SomeProtocol_SomeMethod_Response(
      SomeProtocol_SomeMethod_Response&&) noexcept = default;
  SomeProtocol_SomeMethod_Response& operator=(
      SomeProtocol_SomeMethod_Response&&) noexcept = default;
  SomeProtocol_SomeMethod_Response(
      const SomeProtocol_SomeMethod_Response& other) noexcept
      : SomeProtocol_SomeMethod_Response(other.CloneStorage_()) {}
  SomeProtocol_SomeMethod_Response& operator=(
      const SomeProtocol_SomeMethod_Response& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const SomeProtocol_SomeMethod_Response& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::SomeProtocol_SomeMethod_Response, 4,
        4>::Equal(this, &other);
  }
  bool operator!=(
      const SomeProtocol_SomeMethod_Response& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::SomeProtocol_SomeMethod_Response, 4,
        4>::Equal(this, &other);
  }

  ::test_anonymous::BitsMember bits_member() const {
    return storage_.bits_member;
  }

  ::test_anonymous::BitsMember& bits_member() { return storage_.bits_member; }

 private:
  struct Storage_ final {
    ::test_anonymous::BitsMember bits_member{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_anonymous::SomeProtocol_SomeMethod_Response, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_anonymous::SomeProtocol_SomeMethod_Response>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::test_anonymous::BitsMember>{
          &Storage_::bits_member, 0, 0});
};

extern "C" const fidl_type_t test_anonymous_SomeProtocol_SomeMethod_ResultTable;

class SomeProtocol_SomeMethod_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_anonymous::SomeProtocol_SomeMethod_Response,
                     ::test_anonymous::SomeProtocol_SomeMethod_Error>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  SomeProtocol_SomeMethod_Result() : storage_(std::make_shared<Storage_>()) {}

  SomeProtocol_SomeMethod_Result(SomeProtocol_SomeMethod_Result&&) noexcept =
      default;
  SomeProtocol_SomeMethod_Result& operator=(
      SomeProtocol_SomeMethod_Result&&) noexcept = default;
  SomeProtocol_SomeMethod_Result(
      const SomeProtocol_SomeMethod_Result& other) noexcept
      : SomeProtocol_SomeMethod_Result(other.CloneStorage_()) {}
  SomeProtocol_SomeMethod_Result& operator=(
      const SomeProtocol_SomeMethod_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SomeProtocol_SomeMethod_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const SomeProtocol_SomeMethod_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_anonymous::SomeProtocol_SomeMethod_Result::Tag Which()
      const {
    return SomeProtocol_SomeMethod_Result::IndexToTag(storage_->index());
  }
  static SomeProtocol_SomeMethod_Result WithResponse(
      ::test_anonymous::SomeProtocol_SomeMethod_Response val) {
    return SomeProtocol_SomeMethod_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static SomeProtocol_SomeMethod_Result WithErr(
      ::test_anonymous::SomeProtocol_SomeMethod_Error val) {
    return SomeProtocol_SomeMethod_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_anonymous::SomeProtocol_SomeMethod_Result>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 3>
      kMembers = {std::nullopt, std::nullopt, std::nullopt};

  explicit SomeProtocol_SomeMethod_Result(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_anonymous::SomeProtocol_SomeMethod_Result::Tag tag) {
    switch (tag) {
      case ::test_anonymous::SomeProtocol_SomeMethod_Result::Tag::kResponse:
        return 1;
      case ::test_anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_anonymous::SomeProtocol_SomeMethod_Result::Tag
  IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_anonymous::SomeProtocol_SomeMethod_Result::Tag::kResponse;
      case 2:
        return ::test_anonymous::SomeProtocol_SomeMethod_Result::Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_anonymous::SomeProtocol_SomeMethod_Result::Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_anonymous_SomeProtocolSomeMethodTopResponseTable;

class SomeProtocolSomeMethodTopResponse final {
 private:
  struct Storage_;

 public:
  SomeProtocolSomeMethodTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SomeProtocolSomeMethodTopResponse(
      ::test_anonymous::SomeProtocol_SomeMethod_Result result) noexcept
      : storage_({.result = std::move(result)}) {}
  SomeProtocolSomeMethodTopResponse()
      : SomeProtocolSomeMethodTopResponse(Storage_{}) {}

  SomeProtocolSomeMethodTopResponse(
      SomeProtocolSomeMethodTopResponse&&) noexcept = default;
  SomeProtocolSomeMethodTopResponse& operator=(
      SomeProtocolSomeMethodTopResponse&&) noexcept = default;
  SomeProtocolSomeMethodTopResponse(
      const SomeProtocolSomeMethodTopResponse& other) noexcept
      : SomeProtocolSomeMethodTopResponse(other.CloneStorage_()) {}
  SomeProtocolSomeMethodTopResponse& operator=(
      const SomeProtocolSomeMethodTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const SomeProtocolSomeMethodTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::SomeProtocolSomeMethodTopResponse, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const SomeProtocolSomeMethodTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_anonymous::SomeProtocolSomeMethodTopResponse, 24,
        16>::Equal(this, &other);
  }

  const ::test_anonymous::SomeProtocol_SomeMethod_Result& result() const {
    return storage_.result;
  }

  ::test_anonymous::SomeProtocol_SomeMethod_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_anonymous::SomeProtocol_SomeMethod_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_anonymous::SomeProtocolSomeMethodTopResponse, 24, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_anonymous::SomeProtocolSomeMethodTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_anonymous::SomeProtocol_SomeMethod_Result>{
          &Storage_::result, 0, 0});
};

}  // namespace test_anonymous
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_anonymous_TableDataTable;

template <>
struct IsFidlType<::test_anonymous::TableData> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_anonymous::TableData> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_anonymous_TableDataTable;
};

template <>
struct internal::NaturalCodingTraits<::test_anonymous::TableData> final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_anonymous::TableData, 1, 1> {};

template <>
struct internal::NaturalIsMemcpyCompatible<::test_anonymous::TableData>
    : public internal::BoolConstant<
          !HasPadding<::test_anonymous::TableData>::value &&
          internal::NaturalIsMemcpyCompatible<uint8_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_anonymous_SomeProtocolSomeMethodRequestTable;

template <>
struct IsFidlType<::test_anonymous::SomeProtocolSomeMethodRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_anonymous::SomeProtocolSomeMethodRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_anonymous_SomeProtocolSomeMethodRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_anonymous::SomeProtocolSomeMethodRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_anonymous::SomeProtocolSomeMethodRequest, 40, 32> {};

template <>
struct HasPadding<::test_anonymous::SomeProtocolSomeMethodRequest>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_anonymous::SomeProtocolSomeMethodRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_anonymous::SomeProtocolSomeMethodRequest>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_anonymous::UnionMember>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_anonymous::TableMember>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_anonymous_OverrideTestTable;

template <>
struct IsFidlType<::test_anonymous::OverrideTest> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_anonymous::OverrideTest> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_anonymous_OverrideTestTable;
};

template <>
struct internal::NaturalCodingTraits<::test_anonymous::OverrideTest> final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_anonymous::OverrideTest, 56, 40> {};

template <>
struct HasPadding<::test_anonymous::OverrideTest> : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<::test_anonymous::OverrideTest>
    : public internal::BoolConstant<
          !HasPadding<::test_anonymous::OverrideTest>::value &&
          internal::NaturalIsMemcpyCompatible<::test_anonymous::Op>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::unique_ptr<::test_anonymous::Expression>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_anonymous_SomeProtocol_SomeMethod_ResponseTable;

template <>
struct IsFidlType<::test_anonymous::SomeProtocol_SomeMethod_Response>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_anonymous::SomeProtocol_SomeMethod_Response>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_anonymous_SomeProtocol_SomeMethod_ResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_anonymous::SomeProtocol_SomeMethod_Response>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_anonymous::SomeProtocol_SomeMethod_Response, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_anonymous::SomeProtocol_SomeMethod_Response>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_anonymous::SomeProtocol_SomeMethod_Response>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_anonymous::BitsMember>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_anonymous_SomeProtocolSomeMethodTopResponseTable;

template <>
struct IsFidlType<::test_anonymous::SomeProtocolSomeMethodTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_anonymous::SomeProtocolSomeMethodTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_anonymous_SomeProtocolSomeMethodTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_anonymous::SomeProtocolSomeMethodTopResponse>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_anonymous::SomeProtocolSomeMethodTopResponse, 24, 16> {};

template <>
struct HasPadding<::test_anonymous::SomeProtocolSomeMethodTopResponse>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_anonymous::SomeProtocolSomeMethodTopResponse>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_anonymous::SomeProtocolSomeMethodTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_anonymous::SomeProtocol_SomeMethod_Result>::value> {};

#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_anonymous::TableMember> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_anonymous::TableMember>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_anonymous::TableMember> {};

template <>
struct IsFidlType<::test_anonymous::FunctionApplication>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_anonymous::FunctionApplication>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_anonymous::FunctionApplication> {};

template <>
struct IsFidlType<::test_anonymous::UnionMember> : public std::true_type {};
template <>
struct IsUnion<::test_anonymous::UnionMember> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_anonymous::UnionMember> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_anonymous::UnionMember> {};

template <>
struct IsFidlType<::test_anonymous::Expression> : public std::true_type {};
template <>
struct IsUnion<::test_anonymous::Expression> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_anonymous::Expression> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_anonymous::Expression> {};

template <>
struct IsFidlType<::test_anonymous::SomeProtocol_SomeMethod_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_anonymous::SomeProtocol_SomeMethod_Result>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_anonymous::SomeProtocol_SomeMethod_Result>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_anonymous::SomeProtocol_SomeMethod_Result> {};

template <>
struct internal::NaturalCodingTraits<::test_anonymous::Flags> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint16_t);
  static constexpr size_t inline_size_v2 = sizeof(uint16_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_anonymous::Flags* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_anonymous::Flags>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_anonymous::Flags* value, size_t offset) {
    *value = *decoder->template GetPtr<::test_anonymous::Flags>(offset);
  }
};
template <>
struct internal::NaturalCodingTraits<::test_anonymous::BitsMember> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_anonymous::BitsMember* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_anonymous::BitsMember>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_anonymous::BitsMember* value, size_t offset) {
    *value = *decoder->template GetPtr<::test_anonymous::BitsMember>(offset);
  }
};

template <>
struct internal::NaturalCodingTraits<
    ::test_anonymous::SomeProtocol_SomeMethod_Error> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_anonymous::SomeProtocol_SomeMethod_Error* value,
                     size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_anonymous::SomeProtocol_SomeMethod_Error>(
        offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_anonymous::SomeProtocol_SomeMethod_Error* value,
                     size_t offset) {
    *value =
        *decoder
             ->template GetPtr<::test_anonymous::SomeProtocol_SomeMethod_Error>(
                 offset);
  }
};
template <>
struct internal::NaturalCodingTraits<::test_anonymous::Op> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_anonymous::Op* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_anonymous::Op>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_anonymous::Op* value, size_t offset) {
    *value = *decoder->template GetPtr<::test_anonymous::Op>(offset);
  }
};

}  // namespace fidl
