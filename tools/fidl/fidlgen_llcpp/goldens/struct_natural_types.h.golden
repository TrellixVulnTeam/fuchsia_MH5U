// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.struct/cpp/common_types.h>
#include <fidl/test.struct/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_struct {
class Simple;

class BasicStruct;

extern "C" const fidl_type_t test_struct_SimpleTable;

class Simple final {
 private:
  struct Storage_;

 public:
  Simple(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Simple(uint8_t f1, bool f2) noexcept
      : storage_({.f1 = std::move(f1), .f2 = std::move(f2)}) {}
  Simple() : Simple(Storage_{}) {}

  Simple(Simple&&) noexcept = default;
  Simple& operator=(Simple&&) noexcept = default;
  Simple(const Simple& other) noexcept : Simple(other.CloneStorage_()) {}
  Simple& operator=(const Simple& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const Simple& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<::test_struct::Simple, 2,
                                                       2>::Equal(this, &other);
  }
  bool operator!=(const Simple& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<::test_struct::Simple,
                                                        2, 2>::Equal(this,
                                                                     &other);
  }

  uint8_t f1() const { return storage_.f1; }

  uint8_t& f1() { return storage_.f1; }

  bool f2() const { return storage_.f2; }

  bool& f2() { return storage_.f2; }

 private:
  struct Storage_ final {
    uint8_t f1{};
    bool f2{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_struct::Simple, 2, 2>;
  friend struct ::fidl::internal::MemberVisitor<::test_struct::Simple>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint8_t>{&Storage_::f1, 0,
                                                               0},
      ::fidl::internal::NaturalStructMember<Storage_, bool>{&Storage_::f2, 1,
                                                            1});
};

extern "C" const fidl_type_t test_struct_BasicStructTable;

class BasicStruct final {
 private:
  struct Storage_;

 public:
  BasicStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  BasicStruct(uint32_t x, ::std::string y) noexcept
      : storage_({.x = std::move(x), .y = std::move(y)}) {}
  BasicStruct() : BasicStruct(Storage_{}) {}

  BasicStruct(BasicStruct&&) noexcept = default;
  BasicStruct& operator=(BasicStruct&&) noexcept = default;
  BasicStruct(const BasicStruct& other) noexcept
      : BasicStruct(other.CloneStorage_()) {}
  BasicStruct& operator=(const BasicStruct& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const BasicStruct& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_struct::BasicStruct, 24, 24>::Equal(this, &other);
  }
  bool operator!=(const BasicStruct& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_struct::BasicStruct, 24, 24>::Equal(this, &other);
  }

  uint32_t x() const { return storage_.x; }

  uint32_t& x() { return storage_.x; }

  const ::std::string& y() const { return storage_.y; }

  ::std::string& y() { return storage_.y; }

 private:
  struct Storage_ final {
    uint32_t x{};
    ::std::string y{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_struct::BasicStruct, 24, 24>;
  friend struct ::fidl::internal::MemberVisitor<::test_struct::BasicStruct>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::x, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, ::std::string>{
          &Storage_::y, 8, 8});
};

}  // namespace test_struct
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_struct_SimpleTable;

template <>
struct IsFidlType<::test_struct::Simple> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_struct::Simple> final {
 public:
  static constexpr const fidl_type_t* kCodingTable = &test_struct_SimpleTable;
};

template <>
struct internal::NaturalCodingTraits<::test_struct::Simple> final
    : public ::fidl::internal::NaturalStructCodingTraits<::test_struct::Simple,
                                                         2, 2> {};

template <>
struct internal::NaturalIsMemcpyCompatible<::test_struct::Simple>
    : public internal::BoolConstant<
          !HasPadding<::test_struct::Simple>::value &&
          internal::NaturalIsMemcpyCompatible<uint8_t>::value &&
          internal::NaturalIsMemcpyCompatible<bool>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_struct_BasicStructTable;

template <>
struct IsFidlType<::test_struct::BasicStruct> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_struct::BasicStruct> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_struct_BasicStructTable;
};

template <>
struct internal::NaturalCodingTraits<::test_struct::BasicStruct> final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_struct::BasicStruct, 24, 24> {};

template <>
struct HasPadding<::test_struct::BasicStruct> : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<::test_struct::BasicStruct>
    : public internal::BoolConstant<
          !HasPadding<::test_struct::BasicStruct>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value &&
          internal::NaturalIsMemcpyCompatible<::std::string>::value> {};

#endif  // __Fuchsia__

}  // namespace fidl
