// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.placementofattributes/cpp/natural_messaging.h>

namespace test_placementofattributes {
[[maybe_unused]] constexpr inline uint64_t kExampleProtocol_Method_Ordinal =
    6023439637367187273lu;

#ifdef __Fuchsia__
}  // namespace test_placementofattributes
::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_placementofattributes::ExampleProtocol>::Method(
        ::test_placementofattributes::ExampleProtocolMethodRequest&& payload)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_placementofattributes::kExampleProtocol_Method_Ordinal};
  ::fidl::Result result = messenger().OneWay(
      &::test_placementofattributes::
          test_placementofattributes_ExampleProtocolMethodRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}
namespace test_placementofattributes {
#endif  // __Fuchsia__

}  // namespace test_placementofattributes
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::NaturalEventDispatcher<
    ::test_placementofattributes::ExampleProtocol>::
    DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_placementofattributes::ExampleProtocol>::entries_[] = {
    {
        ::test_placementofattributes::kExampleProtocol_Method_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_placementofattributes::ExampleProtocol::Method>>
              decoded = ::fidl::Request<
                  ::test_placementofattributes::ExampleProtocol::Method>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_placementofattributes::ExampleProtocol::Method>::Sync
              completer(txn);
          static_cast<
              ::fidl::Server<::test_placementofattributes::ExampleProtocol>*>(
              interface)
              ->Method(decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_placementofattributes::ExampleProtocol>::entries_end_ = &entries_[1];

void fidl::internal::NaturalServerDispatcher<
    ::test_placementofattributes::ExampleProtocol>::
    Dispatch(
        ::fidl::Server<::test_placementofattributes::ExampleProtocol>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_placementofattributes::ExampleProtocol>::
    dispatch_message(
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
        ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_placementofattributes::ExampleProtocol>::
      Dispatch(this, std::move(msg), std::move(transport_context), txn);
}
#endif  // __Fuchsia__
