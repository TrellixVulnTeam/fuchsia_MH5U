// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.errorsyntax/cpp/natural_messaging.h>

namespace test_errorsyntax {
[[maybe_unused]] constexpr inline uint64_t
    kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal =
        3565108794310607393lu;
[[maybe_unused]] constexpr inline uint64_t
    kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal = 3757408930698888354lu;

#ifdef __Fuchsia__
}  // namespace test_errorsyntax
void fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::test_errorsyntax_parent::
            ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
        ::fidl::ClientCallback<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                   ComposedCallWhichMayFail>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_errorsyntax::
                   kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::test_errorsyntax::
          test_errorsyntax_parent_ParentUsesErrorSyntaxComposedCallWhichMayFailRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>,
          ::fidl::ClientCallback<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                     ComposedCallWhichMayFail>>(
          ::test_errorsyntax::
              kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    ComposedCallWhichMayFail(
        ::test_errorsyntax_parent::
            ParentUsesErrorSyntaxComposedCallWhichMayFailRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_errorsyntax::ExampleUseOfErrorSyntax::
                ComposedCallWhichMayFail>&& _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_errorsyntax::
                   kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::test_errorsyntax::
          test_errorsyntax_parent_ParentUsesErrorSyntaxComposedCallWhichMayFailRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_errorsyntax::ExampleUseOfErrorSyntax::
                               ComposedCallWhichMayFail>,
          ::fidl::ClientResponseCallback<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::
                  ComposedCallWhichMayFail>>(
          ::test_errorsyntax::
              kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&
            payload,
        ::fidl::ClientCallback<
            ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_errorsyntax::
                   kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::test_errorsyntax::
          test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>,
          ::fidl::ClientCallback<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>(
          ::test_errorsyntax::kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    CallWhichMayFail(
        ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailRequest&&
            payload,
        ::fidl::ClientResponseCallback<
            ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>&&
            _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_errorsyntax::
                   kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal};
  return messenger().TwoWay(
      &::test_errorsyntax::
          test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>,
          ::fidl::ClientResponseCallback<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>>(
          ::test_errorsyntax::kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal,
          std::move(_callback)));
}
namespace test_errorsyntax {
#endif  // __Fuchsia__

}  // namespace test_errorsyntax
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::NaturalEventDispatcher<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::ComposedCallWhichMayFail>::
    Reply(::test_errorsyntax_parent::
              ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponse&&
                  payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_errorsyntax::
                   kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal};
  _messenger.SendReply(
      &::test_errorsyntax::
          test_errorsyntax_parent_ParentUsesErrorSyntaxComposedCallWhichMayFailTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
    Reply(
        ::test_errorsyntax::ExampleUseOfErrorSyntaxCallWhichMayFailTopResponse&&
            payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_errorsyntax::
                   kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal};
  _messenger.SendReply(
      &::test_errorsyntax::
          test_errorsyntax_ExampleUseOfErrorSyntaxCallWhichMayFailTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::entries_[] = {
    {
        ::test_errorsyntax::
            kExampleUseOfErrorSyntax_ComposedCallWhichMayFail_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                  ComposedCallWhichMayFail>>
              decoded =
                  ::fidl::Request<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                      ComposedCallWhichMayFail>::
                      DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::
                  ComposedCallWhichMayFail>::Sync completer(txn);
          static_cast<
              ::fidl::Server<::test_errorsyntax::ExampleUseOfErrorSyntax>*>(
              interface)
              ->ComposedCallWhichMayFail(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_errorsyntax::kExampleUseOfErrorSyntax_CallWhichMayFail_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_errorsyntax::ExampleUseOfErrorSyntax::
                                  CallWhichMayFail>>
              decoded = ::fidl::Request<
                  ::test_errorsyntax::ExampleUseOfErrorSyntax::
                      CallWhichMayFail>::DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_errorsyntax::ExampleUseOfErrorSyntax::CallWhichMayFail>::
              Sync completer(txn);
          static_cast<
              ::fidl::Server<::test_errorsyntax::ExampleUseOfErrorSyntax>*>(
              interface)
              ->CallWhichMayFail(decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::entries_end_ = &entries_[2];

void fidl::internal::NaturalServerDispatcher<
    ::test_errorsyntax::ExampleUseOfErrorSyntax>::
    Dispatch(::fidl::Server<::test_errorsyntax::ExampleUseOfErrorSyntax>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_errorsyntax::ExampleUseOfErrorSyntax>::
    dispatch_message(
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
        ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_errorsyntax::ExampleUseOfErrorSyntax>::
      Dispatch(this, std::move(msg), std::move(transport_context), txn);
}
#endif  // __Fuchsia__
