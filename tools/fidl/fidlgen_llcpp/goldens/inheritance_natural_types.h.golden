// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.inheritance/cpp/common_types.h>
#include <fidl/test.inheritance/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_inheritance {
class SuperFooTopResponse;

class SuperFooRequest;

extern "C" const fidl_type_t test_inheritance_SuperFooTopResponseTable;

class SuperFooTopResponse final {
 private:
  struct Storage_;

 public:
  SuperFooTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SuperFooTopResponse(int64_t y) noexcept : storage_({.y = std::move(y)}) {}
  SuperFooTopResponse() : SuperFooTopResponse(Storage_{}) {}

  SuperFooTopResponse(SuperFooTopResponse&&) noexcept = default;
  SuperFooTopResponse& operator=(SuperFooTopResponse&&) noexcept = default;
  SuperFooTopResponse(const SuperFooTopResponse& other) noexcept
      : SuperFooTopResponse(other.CloneStorage_()) {}
  SuperFooTopResponse& operator=(const SuperFooTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SuperFooTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_inheritance::SuperFooTopResponse, 8, 8>::Equal(this, &other);
  }
  bool operator!=(const SuperFooTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_inheritance::SuperFooTopResponse, 8, 8>::Equal(this, &other);
  }

  int64_t y() const { return storage_.y; }

  int64_t& y() { return storage_.y; }

 private:
  struct Storage_ final {
    int64_t y{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_inheritance::SuperFooTopResponse, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_inheritance::SuperFooTopResponse>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, int64_t>{
          &Storage_::y, 0, 0});
};

extern "C" const fidl_type_t test_inheritance_SuperFooRequestTable;

class SuperFooRequest final {
 private:
  struct Storage_;

 public:
  SuperFooRequest(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  SuperFooRequest(::std::string s) noexcept : storage_({.s = std::move(s)}) {}
  SuperFooRequest() : SuperFooRequest(Storage_{}) {}

  SuperFooRequest(SuperFooRequest&&) noexcept = default;
  SuperFooRequest& operator=(SuperFooRequest&&) noexcept = default;
  SuperFooRequest(const SuperFooRequest& other) noexcept
      : SuperFooRequest(other.CloneStorage_()) {}
  SuperFooRequest& operator=(const SuperFooRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SuperFooRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_inheritance::SuperFooRequest, 16, 16>::Equal(this, &other);
  }
  bool operator!=(const SuperFooRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_inheritance::SuperFooRequest, 16, 16>::Equal(this, &other);
  }

  const ::std::string& s() const { return storage_.s; }

  ::std::string& s() { return storage_.s; }

 private:
  struct Storage_ final {
    ::std::string s{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_inheritance::SuperFooRequest, 16, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_inheritance::SuperFooRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, ::std::string>{
          &Storage_::s, 0, 0});
};

}  // namespace test_inheritance
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_inheritance_SuperFooTopResponseTable;

template <>
struct IsFidlType<::test_inheritance::SuperFooTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_inheritance::SuperFooTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_inheritance_SuperFooTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<::test_inheritance::SuperFooTopResponse>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_inheritance::SuperFooTopResponse, 8, 8> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_inheritance::SuperFooTopResponse>
    : public internal::BoolConstant<
          !HasPadding<::test_inheritance::SuperFooTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<int64_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_inheritance_SuperFooRequestTable;

template <>
struct IsFidlType<::test_inheritance::SuperFooRequest> : public std::true_type {
};

template <>
struct ::fidl::internal::TypeTraits<::test_inheritance::SuperFooRequest> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_inheritance_SuperFooRequestTable;
};

template <>
struct internal::NaturalCodingTraits<::test_inheritance::SuperFooRequest> final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_inheritance::SuperFooRequest, 16, 16> {};

template <>
struct HasPadding<::test_inheritance::SuperFooRequest> : public std::true_type {
};

template <>
struct internal::NaturalIsMemcpyCompatible<::test_inheritance::SuperFooRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_inheritance::SuperFooRequest>::value &&
          internal::NaturalIsMemcpyCompatible<::std::string>::value> {};

#endif  // __Fuchsia__

}  // namespace fidl
