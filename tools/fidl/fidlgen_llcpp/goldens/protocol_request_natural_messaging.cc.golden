// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.protocolrequest/cpp/natural_messaging.h>

namespace test_protocolrequest {
[[maybe_unused]] constexpr inline uint64_t kParent_GetChild_Ordinal =
    881818649151440699lu;
[[maybe_unused]] constexpr inline uint64_t kParent_GetChildRequest_Ordinal =
    1096855814967598201lu;
[[maybe_unused]] constexpr inline uint64_t kParent_TakeChild_Ordinal =
    4470101341872267920lu;
[[maybe_unused]] constexpr inline uint64_t kParent_TakeChildRequest_Ordinal =
    2333981071306416007lu;

#ifdef __Fuchsia__
}  // namespace test_protocolrequest
void fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent>::
    GetChild(::fidl::ClientCallback<::test_protocolrequest::Parent::GetChild>&&
                 _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocolrequest::kParent_GetChild_Ordinal};
  return messenger().TwoWay(
      nullptr,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocolrequest::Parent::GetChild>,
          ::fidl::ClientCallback<::test_protocolrequest::Parent::GetChild>>(
          ::test_protocolrequest::kParent_GetChild_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent>::
    GetChild(::fidl::ClientResponseCallback<
             ::test_protocolrequest::Parent::GetChild>&& _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocolrequest::kParent_GetChild_Ordinal};
  return messenger().TwoWay(
      nullptr,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocolrequest::Parent::GetChild>,
          ::fidl::ClientResponseCallback<
              ::test_protocolrequest::Parent::GetChild>>(
          ::test_protocolrequest::kParent_GetChild_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent>::
    GetChildRequest(::fidl::ClientCallback<
                    ::test_protocolrequest::Parent::GetChildRequest>&&
                        _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocolrequest::kParent_GetChildRequest_Ordinal};
  return messenger().TwoWay(
      nullptr,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>,
          ::fidl::ClientCallback<
              ::test_protocolrequest::Parent::GetChildRequest>>(
          ::test_protocolrequest::kParent_GetChildRequest_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent>::
    GetChildRequest(::fidl::ClientResponseCallback<
                    ::test_protocolrequest::Parent::GetChildRequest>&&
                        _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocolrequest::kParent_GetChildRequest_Ordinal};
  return messenger().TwoWay(
      nullptr,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>,
          ::fidl::ClientResponseCallback<
              ::test_protocolrequest::Parent::GetChildRequest>>(
          ::test_protocolrequest::kParent_GetChildRequest_Ordinal,
          std::move(_callback)));
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent>::TakeChild(
    ::test_protocolrequest::ParentTakeChildRequest&& payload) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocolrequest::kParent_TakeChild_Ordinal};
  ::fidl::Result result = messenger().OneWay(
      &::test_protocolrequest::test_protocolrequest_ParentTakeChildRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error> fidl::internal::
    NaturalClientImpl<::test_protocolrequest::Parent>::TakeChildRequest(
        ::test_protocolrequest::ParentTakeChildRequestRequest&& payload) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocolrequest::kParent_TakeChildRequest_Ordinal};
  ::fidl::Result result = messenger().OneWay(
      &::test_protocolrequest::
          test_protocolrequest_ParentTakeChildRequestRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}
namespace test_protocolrequest {
#endif  // __Fuchsia__

}  // namespace test_protocolrequest
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_protocolrequest::Parent>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::
    NaturalCompleterBase<::test_protocolrequest::Parent::GetChild>::Reply(
        ::test_protocolrequest::ParentGetChildTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocolrequest::kParent_GetChild_Ordinal};
  _messenger.SendReply(
      &::test_protocolrequest::
          test_protocolrequest_ParentGetChildTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_protocolrequest::Parent::GetChildRequest>::
    Reply(::test_protocolrequest::ParentGetChildRequestTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_protocolrequest::kParent_GetChildRequest_Ordinal};
  _messenger.SendReply(
      &::test_protocolrequest::
          test_protocolrequest_ParentGetChildRequestTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_protocolrequest::Parent>::entries_[] = {
    {
        ::test_protocolrequest::kParent_GetChild_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_protocolrequest::Parent::GetChild>>
              decoded =
                  ::fidl::Request<::test_protocolrequest::Parent::GetChild>::
                      DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocolrequest::Parent::GetChild>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocolrequest::Parent>*>(
              interface)
              ->GetChild(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_GetChildRequest_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_protocolrequest::Parent::GetChildRequest>>
              decoded = ::fidl::Request<
                  ::test_protocolrequest::Parent::GetChildRequest>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocolrequest::Parent::GetChildRequest>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolrequest::Parent>*>(
              interface)
              ->GetChildRequest(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_TakeChild_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_protocolrequest::Parent::TakeChild>>
              decoded =
                  ::fidl::Request<::test_protocolrequest::Parent::TakeChild>::
                      DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocolrequest::Parent::TakeChild>::Sync completer(txn);
          static_cast<::fidl::Server<::test_protocolrequest::Parent>*>(
              interface)
              ->TakeChild(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_protocolrequest::kParent_TakeChildRequest_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_protocolrequest::Parent::TakeChildRequest>>
              decoded = ::fidl::Request<
                  ::test_protocolrequest::Parent::TakeChildRequest>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_protocolrequest::Parent::TakeChildRequest>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_protocolrequest::Parent>*>(
              interface)
              ->TakeChildRequest(decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_protocolrequest::Parent>::entries_end_ = &entries_[4];

void fidl::internal::NaturalServerDispatcher<::test_protocolrequest::Parent>::
    Dispatch(::fidl::Server<::test_protocolrequest::Parent>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_protocolrequest::Parent>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_protocolrequest::Parent>::Dispatch(this, std::move(msg),
                                                std::move(transport_context),
                                                txn);
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_protocolrequest::Child>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_protocolrequest::Child>::entries_[] = {};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_protocolrequest::Child>::entries_end_ = &entries_[0];

void fidl::internal::NaturalServerDispatcher<::test_protocolrequest::Child>::
    Dispatch(::fidl::Server<::test_protocolrequest::Child>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_protocolrequest::Child>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_protocolrequest::Child>::Dispatch(this, std::move(msg),
                                               std::move(transport_context),
                                               txn);
}
#endif  // __Fuchsia__
