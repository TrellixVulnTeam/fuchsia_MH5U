// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.structdefaultvalueenumlibraryreference/cpp/common_types.h>
#include <fidl/test.structdefaultvalueenumlibraryreference/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

#include <fidl/test.dependent/cpp/natural_types.h>

namespace test_structdefaultvalueenumlibraryreference {
class Foo;

extern "C" const fidl_type_t
    test_structdefaultvalueenumlibraryreference_FooTable;

class Foo final {
 private:
  struct Storage_;

 public:
  Foo(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Foo(::test_dependent::MyEnum field) noexcept
      : storage_({.field = std::move(field)}) {}
  Foo() : Foo(Storage_{}) {}

  Foo(Foo&&) noexcept = default;
  Foo& operator=(Foo&&) noexcept = default;
  Foo(const Foo& other) noexcept : Foo(other.CloneStorage_()) {}
  Foo& operator=(const Foo& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const Foo& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_structdefaultvalueenumlibraryreference::Foo, 4,
        4>::Equal(this, &other);
  }
  bool operator!=(const Foo& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_structdefaultvalueenumlibraryreference::Foo, 4,
        4>::Equal(this, &other);
  }

  ::test_dependent::MyEnum field() const { return storage_.field; }

  ::test_dependent::MyEnum& field() { return storage_.field; }

 private:
  struct Storage_ final {
    ::test_dependent::MyEnum field = ::test_dependent::MyEnum::kA;
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_structdefaultvalueenumlibraryreference::Foo, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_structdefaultvalueenumlibraryreference::Foo>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, ::test_dependent::MyEnum>{
          &Storage_::field, 0, 0});
};

}  // namespace test_structdefaultvalueenumlibraryreference
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_structdefaultvalueenumlibraryreference_FooTable;

template <>
struct IsFidlType<::test_structdefaultvalueenumlibraryreference::Foo>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_structdefaultvalueenumlibraryreference::Foo>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_structdefaultvalueenumlibraryreference_FooTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_structdefaultvalueenumlibraryreference::Foo>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_structdefaultvalueenumlibraryreference::Foo, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_structdefaultvalueenumlibraryreference::Foo>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_structdefaultvalueenumlibraryreference::Foo>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_dependent::MyEnum>::value> {};

#endif  // __Fuchsia__

}  // namespace fidl
