// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.inheritancewithrecursivedecl/cpp/markers.h>
#include <fidl/test.inheritancewithrecursivedecl/cpp/natural_types.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/internal/natural_server_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {}  // namespace fidl
namespace test_inheritancewithrecursivedecl {
__LOCAL extern "C" const fidl_type_t
    test_inheritancewithrecursivedecl_ParentFirstRequestTable;

#ifdef __Fuchsia__
}  // namespace test_inheritancewithrecursivedecl
template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fitx::result<::fidl::Error> First(
      ::test_inheritancewithrecursivedecl::ParentFirstRequest&& payload) const;
};
namespace test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

}  // namespace test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_inheritancewithrecursivedecl::Parent> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_inheritancewithrecursivedecl::Parent>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<
                    ::test_inheritancewithrecursivedecl::Parent>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_inheritancewithrecursivedecl::Parent>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<
    ::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<
    ::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<
              ::test_inheritancewithrecursivedecl::Parent>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_inheritancewithrecursivedecl::ParentFirstRequest payload)
      : payload_(std::move(payload)) {}
  Request(const Request&) noexcept = delete;
  Request& operator=(const Request&) noexcept = delete;
  ::test_inheritancewithrecursivedecl::ParentFirstRequest* operator->() {
    return &payload_;
  }
  const ::test_inheritancewithrecursivedecl::ParentFirstRequest* operator->()
      const {
    return &payload_;
  }
  ::test_inheritancewithrecursivedecl::ParentFirstRequest& operator*() {
    return payload_;
  }
  const ::test_inheritancewithrecursivedecl::ParentFirstRequest& operator*()
      const {
    return payload_;
  }

 private:
  ::test_inheritancewithrecursivedecl::ParentFirstRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_inheritancewithrecursivedecl::ParentFirstRequest;
};
#endif  // __Fuchsia__

template <>
class ::fidl::Server<::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_inheritancewithrecursivedecl::Parent;

  using FirstRequest =
      ::fidl::Request<::test_inheritancewithrecursivedecl::Parent::First>;
  using FirstCompleter = ::fidl::internal::NaturalCompleter<
      ::test_inheritancewithrecursivedecl::Parent::First>;

  virtual void First(FirstRequest& request,
                     FirstCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_inheritancewithrecursivedecl::Parent>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(
      ::fidl::Server<::test_inheritancewithrecursivedecl::Parent>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

namespace test_inheritancewithrecursivedecl {
__LOCAL extern "C" const fidl_type_t
    test_inheritancewithrecursivedecl_ChildSecondRequestTable;

#ifdef __Fuchsia__
}  // namespace test_inheritancewithrecursivedecl
template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  ::fitx::result<::fidl::Error> First(
      ::test_inheritancewithrecursivedecl::ParentFirstRequest&& payload) const;

  ::fitx::result<::fidl::Error> Second(
      ::test_inheritancewithrecursivedecl::ChildSecondRequest&& payload) const;
};
namespace test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

}  // namespace test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_inheritancewithrecursivedecl::Child> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_inheritancewithrecursivedecl::Child>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<
                    ::test_inheritancewithrecursivedecl::Child>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_inheritancewithrecursivedecl::Child>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<
    ::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<
    ::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<
              ::test_inheritancewithrecursivedecl::Child>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_inheritancewithrecursivedecl::Child::First> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_inheritancewithrecursivedecl::Child::First>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_inheritancewithrecursivedecl::ParentFirstRequest payload)
      : payload_(std::move(payload)) {}
  Request(const Request&) noexcept = delete;
  Request& operator=(const Request&) noexcept = delete;
  ::test_inheritancewithrecursivedecl::ParentFirstRequest* operator->() {
    return &payload_;
  }
  const ::test_inheritancewithrecursivedecl::ParentFirstRequest* operator->()
      const {
    return &payload_;
  }
  ::test_inheritancewithrecursivedecl::ParentFirstRequest& operator*() {
    return payload_;
  }
  const ::test_inheritancewithrecursivedecl::ParentFirstRequest& operator*()
      const {
    return payload_;
  }

 private:
  ::test_inheritancewithrecursivedecl::ParentFirstRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_inheritancewithrecursivedecl::Child::First>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_inheritancewithrecursivedecl::ParentFirstRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_inheritancewithrecursivedecl::ChildSecondRequest payload)
      : payload_(std::move(payload)) {}
  Request(const Request&) noexcept = delete;
  Request& operator=(const Request&) noexcept = delete;
  ::test_inheritancewithrecursivedecl::ChildSecondRequest* operator->() {
    return &payload_;
  }
  const ::test_inheritancewithrecursivedecl::ChildSecondRequest* operator->()
      const {
    return &payload_;
  }
  ::test_inheritancewithrecursivedecl::ChildSecondRequest& operator*() {
    return payload_;
  }
  const ::test_inheritancewithrecursivedecl::ChildSecondRequest& operator*()
      const {
    return payload_;
  }

 private:
  ::test_inheritancewithrecursivedecl::ChildSecondRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_inheritancewithrecursivedecl::ChildSecondRequest;
};
#endif  // __Fuchsia__

template <>
class ::fidl::Server<::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_inheritancewithrecursivedecl::Child;

  using FirstRequest =
      ::fidl::Request<::test_inheritancewithrecursivedecl::Child::First>;
  using FirstCompleter = ::fidl::internal::NaturalCompleter<
      ::test_inheritancewithrecursivedecl::Child::First>;

  virtual void First(FirstRequest& request,
                     FirstCompleter::Sync& completer) = 0;

  using SecondRequest =
      ::fidl::Request<::test_inheritancewithrecursivedecl::Child::Second>;
  using SecondCompleter = ::fidl::internal::NaturalCompleter<
      ::test_inheritancewithrecursivedecl::Child::Second>;

  virtual void Second(SecondRequest& request,
                      SecondCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_inheritancewithrecursivedecl::Child>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(
      ::fidl::Server<::test_inheritancewithrecursivedecl::Child>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
