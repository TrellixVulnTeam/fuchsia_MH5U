// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.driveroneway/cpp/markers.h>
#include <fidl/test.driveroneway/cpp/wire_types.h>
#include <lib/fidl_driver/cpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl_driver/cpp/client.h>
#include <lib/fidl_driver/cpp/server.h>

#endif  // __Fuchsia__

namespace test_driveroneway {
class OneWay;

__LOCAL extern "C" const fidl_type_t test_driveroneway_OneWaySendRequestTable;

}  // namespace test_driveroneway
template <>
struct ::fidl::internal::WireOrdinal<::test_driveroneway::OneWay::Send> final {
  static constexpr uint64_t value = 7942965975761529343lu;
};

namespace test_driveroneway {}  // namespace test_driveroneway
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_driveroneway::OneWay> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_driveroneway::OneWay>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fdf::WireServer<::test_driveroneway::OneWay>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(::fdf::WireServer<::test_driveroneway::OneWay>* impl,
                       ::fidl::IncomingMessage&& msg,
                       internal::IncomingTransportContext transport_context,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_driveroneway::OneWay::Send> final {
  FIDL_ALIGNDECL
  ::test_driveroneway::wire::Payload payload;

  explicit WireRequest(const ::test_driveroneway::wire::Payload& payload)
      : payload(payload) {}
  WireRequest() = default;
};

template <>
struct ::fidl::internal::TransactionalRequest<::test_driveroneway::OneWay::Send>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireRequest<::test_driveroneway::OneWay::Send> body;
  explicit TransactionalRequest(
      const ::test_driveroneway::wire::Payload& payload)
      : body(::fidl::WireRequest<::test_driveroneway::OneWay::Send>(payload)) {
    _InitHeader();
  }
  TransactionalRequest() { _InitHeader(); }

 private:
  void _InitHeader();
};

namespace fidl {

template <>
struct IsFidlType<
    ::fidl::internal::TransactionalRequest<::test_driveroneway::OneWay::Send>>
    : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireRequest<::test_driveroneway::OneWay::Send>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::internal::TransactionalRequest<::test_driveroneway::OneWay::Send>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireRequest<::test_driveroneway::OneWay::Send>>
    : public std::false_type {};

template <>
struct TypeTraits<
    ::fidl::internal::TransactionalRequest<::test_driveroneway::OneWay::Send>> {
  static constexpr const fidl_type_t* kType =
      &::test_driveroneway::test_driveroneway_OneWaySendRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<
                     ::test_driveroneway::OneWay::Send>) ==
              TypeTraits<::fidl::internal::TransactionalRequest<
                  ::test_driveroneway::OneWay::Send>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_driveroneway::OneWay::Send>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_driveroneway::OneWay::Send>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<::fidl::WireRequest<::test_driveroneway::OneWay::Send>> {
  static constexpr const fidl_type_t* kType =
      &::test_driveroneway::test_driveroneway_OneWaySendRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(4);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(4);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};
static_assert(
    sizeof(::fidl::WireRequest<::test_driveroneway::OneWay::Send>) ==
    TypeTraits<
        ::fidl::WireRequest<::test_driveroneway::OneWay::Send>>::kPrimarySize);
static_assert(offsetof(::fidl::WireRequest<::test_driveroneway::OneWay::Send>,
                       payload) == 0);

}  // namespace fidl
namespace test_driveroneway {
#ifdef __Fuchsia__
}  // namespace test_driveroneway
template <>
class ::fdf::WireUnownedResult<::test_driveroneway::OneWay::Send> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fdf::UnownedClientEnd<::test_driveroneway::OneWay> client_end,
      const ::fdf::Arena& arena,
      ::fidl::internal::TransactionalRequest<::test_driveroneway::OneWay::Send>*
          request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<::test_driveroneway::OneWay> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fdf::WireAsyncEventHandler<::test_driveroneway::OneWay>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_driveroneway::OneWay>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_driveroneway::OneWay>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_driveroneway::OneWay> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fdf::UnownedClientEnd<::test_driveroneway::OneWay> client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_driveroneway::OneWay> final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fdf::WireAsyncEventHandler<::test_driveroneway::OneWay>> {
 public:
  explicit WireEventDispatcher(
      ::fdf::WireAsyncEventHandler<::test_driveroneway::OneWay>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<::test_driveroneway::OneWay>
    final : public ::fdf::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_driveroneway::OneWay>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fdf::WireUnownedResult<::test_driveroneway::OneWay::Send> Send(
      const ::test_driveroneway::wire::Payload& payload) {
    ::fidl::internal::TransactionalRequest<::test_driveroneway::OneWay::Send>
        _request{payload};
    return ::fdf::WireUnownedResult<::test_driveroneway::OneWay::Send>(
        _client_end(), _arena(), &_request);
  }

 private:
  ::fdf::UnownedClientEnd<::test_driveroneway::OneWay> _client_end() const {
    return ::fdf::UnownedClientEnd<::test_driveroneway::OneWay>(
        _transport().get<::fidl::internal::DriverTransport>());
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fdf::ClientEnd<SomeProtocol>|
// and |fdf::ServerEnd<SomeProtocol>|).
template <>
class ::fdf::WireServer<::test_driveroneway::OneWay>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_driveroneway::OneWay;

  using SendCompleter =
      ::fidl::internal::WireCompleter<::test_driveroneway::OneWay::Send>;
  using SendRequestView =
      ::fidl::internal::WireRequestView<::test_driveroneway::OneWay::Send>;

  virtual void Send(SendRequestView request, fdf::Arena& arena,
                    SendCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
namespace test_driveroneway {
#endif  // __Fuchsia__

}  // namespace test_driveroneway
namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_driveroneway::OneWay>
    : public ::fdf::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;

  // Caller provides the backing storage for FIDL message.
  ::fidl::Result Send(const ::test_driveroneway::wire::Payload& payload);
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_driveroneway::OneWay>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_driveroneway::OneWay> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
