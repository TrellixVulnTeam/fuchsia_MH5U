// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.emptystruct/cpp/natural_messaging.h>

namespace test_emptystruct {
[[maybe_unused]] constexpr inline uint64_t kEmptyProtocol_Send_Ordinal =
    1378773277029173000lu;
[[maybe_unused]] constexpr inline uint64_t kEmptyProtocol_Receive_Ordinal =
    2301564782476583487lu;
[[maybe_unused]] constexpr inline uint64_t
    kEmptyProtocol_SendAndReceive_Ordinal = 534401212734647530lu;

#ifdef __Fuchsia__
}  // namespace test_emptystruct
void fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::
    SendAndReceive(
        ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
        ::fidl::ClientCallback<
            ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal};
  return messenger().TwoWay(
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>,
          ::fidl::ClientCallback<
              ::test_emptystruct::EmptyProtocol::SendAndReceive>>(
          ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::
    SendAndReceive(
        ::test_emptystruct::EmptyProtocolSendAndReceiveRequest&& payload,
        ::fidl::ClientResponseCallback<
            ::test_emptystruct::EmptyProtocol::SendAndReceive>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal};
  return messenger().TwoWay(
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_emptystruct::EmptyProtocol::SendAndReceive>,
          ::fidl::ClientResponseCallback<
              ::test_emptystruct::EmptyProtocol::SendAndReceive>>(
          ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
          std::move(_callback)));
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalClientImpl<::test_emptystruct::EmptyProtocol>::Send(
    ::test_emptystruct::EmptyProtocolSendRequest&& payload) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_emptystruct::kEmptyProtocol_Send_Ordinal};
  ::fidl::Result result = messenger().OneWay(
      &::test_emptystruct::test_emptystruct_EmptyProtocolSendRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
  return ::fidl::internal::ToFitxResult(result);
}
namespace test_emptystruct {
#endif  // __Fuchsia__

}  // namespace test_emptystruct
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_emptystruct::EmptyProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    case ::test_emptystruct::kEmptyProtocol_Receive_Ordinal: {
      ::fitx::result<::fidl::Error,
                     ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>>
          decoded = ::fidl::Event<::test_emptystruct::EmptyProtocol::Receive>::
              DecodeTransactional(std::move(msg));
      if (decoded.is_error()) {
        return ::fidl::UnbindInfo(decoded.error_value());
      }
      if (event_handler()) {
        event_handler()->Receive(decoded.value());
      }
      return std::nullopt;
    }
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fitx::result<::fidl::Error> fidl::internal::
    NaturalWeakEventSender<::test_emptystruct::EmptyProtocol>::Receive(
        ::test_emptystruct::EmptyProtocolReceiveRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_emptystruct::kEmptyProtocol_Receive_Ordinal};
  ::fidl::Result result = ::fidl::internal::ConvertFromHLCPPOutgoingMessageThen(
      &::test_emptystruct::test_emptystruct_EmptyProtocolReceiveRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      [this](fidl::OutgoingMessage outgoing) {
        return _inner().SendEvent(outgoing);
      });
  return ::fidl::internal::ToFitxResult(result);
}

::fitx::result<::fidl::Error>
fidl::internal::NaturalEventSender<::test_emptystruct::EmptyProtocol>::Receive(
    ::test_emptystruct::EmptyProtocolReceiveRequest payload) {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_emptystruct::kEmptyProtocol_Receive_Ordinal};
  ::fidl::Result result = ::fidl::internal::ConvertFromHLCPPOutgoingMessageThen(
      &::test_emptystruct::test_emptystruct_EmptyProtocolReceiveRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      [this](fidl::OutgoingMessage outgoing) {
        outgoing.Write(_transport());
        return ::fidl::Result{outgoing};
      });
  return ::fidl::internal::ToFitxResult(result);
}

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>::
    Reply(
        ::test_emptystruct::EmptyProtocolSendAndReceiveTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal};
  _messenger.SendReply(
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_emptystruct::EmptyProtocol>::entries_[] = {
    {
        ::test_emptystruct::kEmptyProtocol_Send_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_emptystruct::EmptyProtocol::Send>>
              decoded =
                  ::fidl::Request<::test_emptystruct::EmptyProtocol::Send>::
                      DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_emptystruct::EmptyProtocol::Send>::Sync completer(txn);
          static_cast<::fidl::Server<::test_emptystruct::EmptyProtocol>*>(
              interface)
              ->Send(decoded.value(), completer);
          return ZX_OK;
        },
    },
    {
        ::test_emptystruct::kEmptyProtocol_SendAndReceive_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<::fidl::Error,
                         ::fidl::Request<
                             ::test_emptystruct::EmptyProtocol::SendAndReceive>>
              decoded = ::fidl::Request<
                  ::test_emptystruct::EmptyProtocol::SendAndReceive>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_emptystruct::EmptyProtocol::SendAndReceive>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_emptystruct::EmptyProtocol>*>(
              interface)
              ->SendAndReceive(decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_emptystruct::EmptyProtocol>::entries_end_ = &entries_[2];

void fidl::internal::
    NaturalServerDispatcher<::test_emptystruct::EmptyProtocol>::Dispatch(
        ::fidl::Server<::test_emptystruct::EmptyProtocol>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_emptystruct::EmptyProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_emptystruct::EmptyProtocol>::Dispatch(this, std::move(msg),
                                                   std::move(transport_context),
                                                   txn);
}
#endif  // __Fuchsia__
