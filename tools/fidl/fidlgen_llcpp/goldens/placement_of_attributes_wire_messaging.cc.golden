// WARNING: This file is machine generated by fidlgen.

#include <fidl/test.placementofattributes/cpp/wire_messaging.h>

#include <memory>

namespace test_placementofattributes {
[[maybe_unused]] constexpr uint64_t kExampleProtocol_Method_Ordinal =
    6023439637367187273lu;

extern "C" const fidl_type_t
    test_placementofattributes_ExampleProtocolMethodRequestTable;
#ifdef __Fuchsia__
}  // namespace test_placementofattributes
::fidl::WireResult<::test_placementofattributes::ExampleProtocol::Method>::
    WireResult(
        ::fidl::UnownedClientEnd<::test_placementofattributes::ExampleProtocol>
            client,
        ::fidl::internal::TransactionalRequest<
            ::test_placementofattributes::ExampleProtocol::Method>* request) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::unstable::OwnedEncodedMessage<
      ::fidl::internal::TransactionalRequest<
          ::test_placementofattributes::ExampleProtocol::Method>,
      ::fidl::internal::ChannelTransport>
      request_message(::fidl::internal::AllowUnownedInputRef{}, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client.handle());
  SetResult(outgoing);
}
namespace test_placementofattributes {
#endif  // __Fuchsia__

#ifdef __Fuchsia__
}  // namespace test_placementofattributes
::fidl::WireUnownedResult<
    ::test_placementofattributes::ExampleProtocol::Method>::
    WireUnownedResult(
        ::fidl::UnownedClientEnd<::test_placementofattributes::ExampleProtocol>
            client_end,
        ::fidl::internal::AnyBufferAllocator& allocator,
        ::fidl::internal::TransactionalRequest<
            ::test_placementofattributes::ExampleProtocol::Method>* request) {
  constexpr uint32_t buffer_size = ::fidl::SyncClientMethodBufferSizeInChannel<
      ::test_placementofattributes::ExampleProtocol::Method>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> allocation =
      allocator.TryAllocate(buffer_size);
  if (!allocation.is_ok()) {
    ::fidl::Result::operator=(allocation.error_value());
    return;
  }
  uint8_t* buffer = allocation->data;
  uint32_t request_byte_capacity = buffer_size;
  uint8_t* request_bytes = buffer;

  ::fidl::unstable::UnownedEncodedMessage<
      ::fidl::internal::TransactionalRequest<
          ::test_placementofattributes::ExampleProtocol::Method>>
      request_message(request_bytes, request_byte_capacity, request);
  auto& outgoing = request_message.GetOutgoingMessage();
  outgoing.Write(client_end.handle());
  ::fidl::Result::operator=(outgoing);
}
namespace test_placementofattributes {
#endif  // __Fuchsia__

}  // namespace test_placementofattributes
#ifdef __Fuchsia__

::fidl::Result fidl::internal::WireWeakOnewayClientImpl<
    ::test_placementofattributes::ExampleProtocol>::
    Method(const ::test_exampleusing::wire::Empty& arg) {
  FIDL_INTERNAL_DISABLE_AUTO_VAR_INIT
  ::fidl::internal::TransactionalRequest<
      ::test_placementofattributes::ExampleProtocol::Method>
      _request_object{arg};
  ::fidl::unstable::OwnedEncodedMessage<
      ::fidl::internal::TransactionalRequest<
          ::test_placementofattributes::ExampleProtocol::Method>,
      ::fidl::internal::ChannelTransport>
      _request_message(::fidl::internal::AllowUnownedInputRef{},
                       &_request_object);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
::fidl::Result fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_placementofattributes::ExampleProtocol>::
    Method(const ::test_exampleusing::wire::Empty& arg) {
  constexpr uint32_t _buffer_size =
      ::fidl::AsyncClientMethodBufferSizeInChannel<
          ::test_placementofattributes::ExampleProtocol::Method>();
  ::fitx::result<::fidl::Error, ::fidl::BufferSpan> _allocation =
      _allocator().TryAllocate(_buffer_size);
  if (!_allocation.is_ok()) {
    return _allocation.error_value();
  }

  ::fidl::internal::TransactionalRequest<
      ::test_placementofattributes::ExampleProtocol::Method>
      _request{arg};
  ::fidl::unstable::UnownedEncodedMessage<
      ::fidl::internal::TransactionalRequest<
          ::test_placementofattributes::ExampleProtocol::Method>>
      _request_message(_allocation->data, _buffer_size, &_request);
  return _client_base()->SendOneWay(_request_message.GetOutgoingMessage());
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

::fidl::Result
fidl::WireSyncEventHandler<::test_placementofattributes::ExampleProtocol>::
    HandleOneEvent(
        ::fidl::UnownedClientEnd<::test_placementofattributes::ExampleProtocol>
            client_end) {
  zx_status_t status = client_end.channel()->wait_one(
      ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED, ::zx::time::infinite(),
      nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result::TransportError(
        status, ::fidl::internal::kErrorWaitOneFailed);
  }
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  static_assert(kHandleAllocSize <= ZX_CHANNEL_MAX_MSG_HANDLES);
  ::fidl::internal::InlineMessageBuffer<16> read_storage;
  std::array<zx_handle_t, kHandleAllocSize> read_handles;
  // TODO(fxbug.dev/85734) Remove this channel-specific allocation.
  std::array<fidl_channel_handle_metadata_t, kHandleAllocSize>
      read_handle_metadata;
  ::fidl::IncomingMessage msg = ::fidl::MessageRead(
      zx::unowned_channel(client_end.handle()), read_storage.view(),
      read_handles.data(), read_handle_metadata.data(), kHandleAllocSize,
      ReadOptions{.discardable = true});
  if (msg.status() == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return ::fidl::Result::UnexpectedMessage(Unknown());
  }
  if (!msg.ok()) {
    return msg;
  }
  fidl_message_header_t* hdr = msg.header();
  switch (hdr->ordinal) {
    default: {
      return ::fidl::Result::UnexpectedMessage(Unknown());
    }
  }
}

std::optional<::fidl::UnbindInfo> fidl::internal::WireEventDispatcher<
    ::test_placementofattributes::ExampleProtocol>::
    DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  switch (msg.header()->ordinal) {
    default:
      break;
  }
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::WireServerDispatcher<
    ::test_placementofattributes::ExampleProtocol>::entries_[] = {
    {
        ::test_placementofattributes::kExampleProtocol_Method_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fidl::unstable::DecodedMessage<
              ::fidl::internal::TransactionalRequest<
                  ::test_placementofattributes::ExampleProtocol::Method>>
              decoded{std::move(msg)};
          if (unlikely(!decoded.ok())) {
            return decoded.status();
          }
          auto* primary = &decoded.PrimaryObject()->body;
          ::fidl::internal::WireCompleter<
              ::test_placementofattributes::ExampleProtocol::Method>::Sync
              completer(txn);
          reinterpret_cast<::fidl::WireServer<
              ::test_placementofattributes::ExampleProtocol>*>(interface)
              ->Method(primary, completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::WireServerDispatcher<
    ::test_placementofattributes::ExampleProtocol>::entries_end_ = &entries_[1];

::fidl::DispatchResult fidl::internal::WireServerDispatcher<
    ::test_placementofattributes::ExampleProtocol>::
    TryDispatch(
        ::fidl::WireServer<::test_placementofattributes::ExampleProtocol>* impl,
        ::fidl::IncomingMessage& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(impl, msg, std::move(transport_context),
                                       txn, entries_, entries_end_);
}

void fidl::internal::WireServerDispatcher<
    ::test_placementofattributes::ExampleProtocol>::
    Dispatch(
        ::fidl::WireServer<::test_placementofattributes::ExampleProtocol>* impl,
        ::fidl::IncomingMessage&& msg,
        internal::IncomingTransportContext transport_context,
        ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::WireServer<::test_placementofattributes::ExampleProtocol>::
    dispatch_message(
        ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
        ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::WireServerDispatcher<
      ::test_placementofattributes::ExampleProtocol>::
      Dispatch(this, std::move(msg), std::move(transport_context), txn);
}
#endif  // __Fuchsia__

void ::fidl::internal::TransactionalRequest<
    ::test_placementofattributes::ExampleProtocol::Method>::_InitHeader() {
  fidl_init_txn_header(
      &header, 0,
      ::test_placementofattributes::kExampleProtocol_Method_Ordinal);
}

#ifdef __Fuchsia__

#endif  // __Fuchsia__
