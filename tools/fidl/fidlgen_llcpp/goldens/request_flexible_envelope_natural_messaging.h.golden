// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.requestflexibleenvelope/cpp/markers.h>
#include <fidl/test.requestflexibleenvelope/cpp/natural_types.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/internal/natural_server_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {}  // namespace fidl
namespace test_requestflexibleenvelope {
__LOCAL extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestStrictResponseFlexibleTopResponseTable;
__LOCAL extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_requestflexibleenvelope_ProtocolRequestFlexibleResponseStrictTopResponseTable;

#ifdef __Fuchsia__
}  // namespace test_requestflexibleenvelope

template <>
class ::fidl::Response<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                                     RequestStrictResponseFlexible>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_requestflexibleenvelope::
               ProtocolRequestStrictResponseFlexibleTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleTopResponse;
};
namespace test_requestflexibleenvelope {
}  // namespace test_requestflexibleenvelope
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                                          RequestStrictResponseFlexible>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                           RequestStrictResponseFlexible>&)>;
};

template <>
class ::fidl::Response<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                                     RequestFlexibleResponseStrict>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_requestflexibleenvelope::
               ProtocolRequestFlexibleResponseStrictTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse*
      operator->() {
    return &payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse*
      operator->() const {
    return &payload_;
  }
  ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse&
      operator*() {
    return payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse&
      operator*() const {
    return payload_;
  }

 private:
  ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictTopResponse;
};
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                                          RequestFlexibleResponseStrict>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_requestflexibleenvelope::Protocol::
                           RequestFlexibleResponseStrict>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_requestflexibleenvelope::Protocol>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void RequestStrictResponseFlexible(
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleRequest&& payload,
      ::fidl::ClientCallback<::test_requestflexibleenvelope::Protocol::
                                 RequestStrictResponseFlexible>&& _callback)
      const;

  void RequestStrictResponseFlexible(
      ::test_requestflexibleenvelope::
          ProtocolRequestStrictResponseFlexibleRequest&& payload,
      ::fidl::ClientResponseCallback<::test_requestflexibleenvelope::Protocol::
                                         RequestStrictResponseFlexible>&&
          _callback) const;

  void RequestFlexibleResponseStrict(
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictRequest&& payload,
      ::fidl::ClientCallback<::test_requestflexibleenvelope::Protocol::
                                 RequestFlexibleResponseStrict>&& _callback)
      const;

  void RequestFlexibleResponseStrict(
      ::test_requestflexibleenvelope::
          ProtocolRequestFlexibleResponseStrictRequest&& payload,
      ::fidl::ClientResponseCallback<::test_requestflexibleenvelope::Protocol::
                                         RequestFlexibleResponseStrict>&&
          _callback) const;
};
namespace test_requestflexibleenvelope {
#endif  // __Fuchsia__

}  // namespace test_requestflexibleenvelope
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_requestflexibleenvelope::Protocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_requestflexibleenvelope::Protocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_requestflexibleenvelope::Protocol>
    final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::AsyncEventHandler<::test_requestflexibleenvelope::Protocol>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_requestflexibleenvelope::Protocol>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<
    ::test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<
    ::test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<
              ::test_requestflexibleenvelope::Protocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Request<::test_requestflexibleenvelope::Protocol::
                                    RequestStrictResponseFlexible>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_requestflexibleenvelope::
              ProtocolRequestStrictResponseFlexibleRequest payload)
      : payload_(std::move(payload)) {}
  ::test_requestflexibleenvelope::ProtocolRequestStrictResponseFlexibleRequest*
  operator->() {
    return &payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleRequest*
      operator->() const {
    return &payload_;
  }
  ::test_requestflexibleenvelope::ProtocolRequestStrictResponseFlexibleRequest&
  operator*() {
    return payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleRequest&
      operator*() const {
    return payload_;
  }

 private:
  ::test_requestflexibleenvelope::ProtocolRequestStrictResponseFlexibleRequest
      payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_requestflexibleenvelope::
      ProtocolRequestStrictResponseFlexibleRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>
    final : public ::fidl::internal::MessageBase<
                ::fidl::Request<::test_requestflexibleenvelope::Protocol::
                                    RequestFlexibleResponseStrict>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_requestflexibleenvelope::
              ProtocolRequestFlexibleResponseStrictRequest payload)
      : payload_(std::move(payload)) {}
  ::test_requestflexibleenvelope::ProtocolRequestFlexibleResponseStrictRequest*
  operator->() {
    return &payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictRequest*
      operator->() const {
    return &payload_;
  }
  ::test_requestflexibleenvelope::ProtocolRequestFlexibleResponseStrictRequest&
  operator*() {
    return payload_;
  }
  const ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictRequest&
      operator*() const {
    return payload_;
  }

 private:
  ::test_requestflexibleenvelope::ProtocolRequestFlexibleResponseStrictRequest
      payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_requestflexibleenvelope::
      ProtocolRequestFlexibleResponseStrictRequest;
};
#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>
    : public ::fidl::CompleterBase {
 public:
  void Reply(::test_requestflexibleenvelope::
                 ProtocolRequestStrictResponseFlexibleTopResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::MethodTypes<
    ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>>;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>
    : public ::fidl::CompleterBase {
 public:
  void Reply(::test_requestflexibleenvelope::
                 ProtocolRequestFlexibleResponseStrictTopResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::MethodTypes<
    ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>>;
};

template <>
class ::fidl::Server<::test_requestflexibleenvelope::Protocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_requestflexibleenvelope::Protocol;

  using RequestStrictResponseFlexibleRequest = ::fidl::Request<
      ::test_requestflexibleenvelope::Protocol::RequestStrictResponseFlexible>;
  using RequestStrictResponseFlexibleCompleter =
      ::fidl::internal::NaturalCompleter<
          ::test_requestflexibleenvelope::Protocol::
              RequestStrictResponseFlexible>;

  virtual void RequestStrictResponseFlexible(
      RequestStrictResponseFlexibleRequest& request,
      RequestStrictResponseFlexibleCompleter::Sync& completer) = 0;

  using RequestFlexibleResponseStrictRequest = ::fidl::Request<
      ::test_requestflexibleenvelope::Protocol::RequestFlexibleResponseStrict>;
  using RequestFlexibleResponseStrictCompleter =
      ::fidl::internal::NaturalCompleter<
          ::test_requestflexibleenvelope::Protocol::
              RequestFlexibleResponseStrict>;

  virtual void RequestFlexibleResponseStrict(
      RequestFlexibleResponseStrictRequest& request,
      RequestFlexibleResponseStrictCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_requestflexibleenvelope::Protocol>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(
      ::fidl::Server<::test_requestflexibleenvelope::Protocol>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
