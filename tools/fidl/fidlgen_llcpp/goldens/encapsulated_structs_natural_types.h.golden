// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.encapsulatedstructs/cpp/common_types.h>
#include <fidl/test.encapsulatedstructs/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/handle.h>

#endif  // __Fuchsia__

namespace test_encapsulatedstructs {
class NonInlineStructTestStruct;

class Int8Int32;

class Int16Int8;

class ArrayInt16Int8;

class StructPaddingTestStruct;

class TopLevelStruct;

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_encapsulatedstructs_NonInlineStructTestStructTable;

class NonInlineStructTestStruct final {
 private:
  struct Storage_;

 public:
  NonInlineStructTestStruct(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  NonInlineStructTestStruct(
      ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8> element,
      ::zx::handle h) noexcept
      : storage_({.element = std::move(element), .h = std::move(h)}) {}
  NonInlineStructTestStruct() : NonInlineStructTestStruct(Storage_{}) {}

  NonInlineStructTestStruct(NonInlineStructTestStruct&&) noexcept = default;
  NonInlineStructTestStruct& operator=(NonInlineStructTestStruct&&) noexcept =
      default;

  const ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8>& element()
      const {
    return storage_.element;
  }

  ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8>& element() {
    return storage_.element;
  }

  const ::zx::handle& h() const { return storage_.h; }

  ::zx::handle& h() { return storage_.h; }

 private:
  struct Storage_ final {
    ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8> element{};
    ::zx::handle h{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_encapsulatedstructs::NonInlineStructTestStruct, 16, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_encapsulatedstructs::NonInlineStructTestStruct>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::std::unique_ptr<::test_encapsulatedstructs::Int16Int8>>{
          &Storage_::element, 0, 0},
      ::fidl::internal::NaturalStructMember<Storage_, ::zx::handle>{
          &Storage_::h, 8, 8,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_NONE, .rights = 0x80000000})});
};

#endif  // __Fuchsia__

extern "C" const fidl_type_t test_encapsulatedstructs_Int8Int32Table;

class Int8Int32 final {
 private:
  struct Storage_;

 public:
  Int8Int32(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Int8Int32(int8_t a, int32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  Int8Int32() : Int8Int32(Storage_{}) {}

  Int8Int32(Int8Int32&&) noexcept = default;
  Int8Int32& operator=(Int8Int32&&) noexcept = default;
  Int8Int32(const Int8Int32& other) noexcept
      : Int8Int32(other.CloneStorage_()) {}
  Int8Int32& operator=(const Int8Int32& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const Int8Int32& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_encapsulatedstructs::Int8Int32, 8, 8>::Equal(this, &other);
  }
  bool operator!=(const Int8Int32& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_encapsulatedstructs::Int8Int32, 8, 8>::Equal(this, &other);
  }

  int8_t a() const { return storage_.a; }

  int8_t& a() { return storage_.a; }

  int32_t b() const { return storage_.b; }

  int32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    int8_t a{};
    int32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_encapsulatedstructs::Int8Int32, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_encapsulatedstructs::Int8Int32>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, int8_t>{&Storage_::a, 0,
                                                              0},
      ::fidl::internal::NaturalStructMember<Storage_, int32_t>{&Storage_::b, 4,
                                                               4});
};

extern "C" const fidl_type_t test_encapsulatedstructs_Int16Int8Table;

class Int16Int8 final {
 private:
  struct Storage_;

 public:
  Int16Int8(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Int16Int8(int16_t a, int8_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  Int16Int8() : Int16Int8(Storage_{}) {}

  Int16Int8(Int16Int8&&) noexcept = default;
  Int16Int8& operator=(Int16Int8&&) noexcept = default;
  Int16Int8(const Int16Int8& other) noexcept
      : Int16Int8(other.CloneStorage_()) {}
  Int16Int8& operator=(const Int16Int8& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const Int16Int8& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_encapsulatedstructs::Int16Int8, 4, 4>::Equal(this, &other);
  }
  bool operator!=(const Int16Int8& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_encapsulatedstructs::Int16Int8, 4, 4>::Equal(this, &other);
  }

  int16_t a() const { return storage_.a; }

  int16_t& a() { return storage_.a; }

  int8_t b() const { return storage_.b; }

  int8_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    int16_t a{};
    int8_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_encapsulatedstructs::Int16Int8, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_encapsulatedstructs::Int16Int8>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, int16_t>{&Storage_::a, 0,
                                                               0},
      ::fidl::internal::NaturalStructMember<Storage_, int8_t>{&Storage_::b, 2,
                                                              2});
};

extern "C" const fidl_type_t test_encapsulatedstructs_ArrayInt16Int8Table;

class ArrayInt16Int8 final {
 private:
  struct Storage_;

 public:
  ArrayInt16Int8(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ArrayInt16Int8(
      ::std::array<::test_encapsulatedstructs::Int16Int8, 3> arr) noexcept
      : storage_({.arr = std::move(arr)}) {}
  ArrayInt16Int8() : ArrayInt16Int8(Storage_{}) {}

  ArrayInt16Int8(ArrayInt16Int8&&) noexcept = default;
  ArrayInt16Int8& operator=(ArrayInt16Int8&&) noexcept = default;
  ArrayInt16Int8(const ArrayInt16Int8& other) noexcept
      : ArrayInt16Int8(other.CloneStorage_()) {}
  ArrayInt16Int8& operator=(const ArrayInt16Int8& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const ArrayInt16Int8& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_encapsulatedstructs::ArrayInt16Int8, 12, 12>::Equal(this,
                                                                   &other);
  }
  bool operator!=(const ArrayInt16Int8& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_encapsulatedstructs::ArrayInt16Int8, 12, 12>::Equal(this,
                                                                   &other);
  }

  const ::std::array<::test_encapsulatedstructs::Int16Int8, 3>& arr() const {
    return storage_.arr;
  }

  ::std::array<::test_encapsulatedstructs::Int16Int8, 3>& arr() {
    return storage_.arr;
  }

 private:
  struct Storage_ final {
    ::std::array<::test_encapsulatedstructs::Int16Int8, 3> arr{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_encapsulatedstructs::ArrayInt16Int8, 12, 12>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_encapsulatedstructs::ArrayInt16Int8>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::std::array<::test_encapsulatedstructs::Int16Int8, 3>>{
          &Storage_::arr, 0, 0});
};

extern "C" const fidl_type_t
    test_encapsulatedstructs_StructPaddingTestStructTable;

class StructPaddingTestStruct final {
 private:
  struct Storage_;

 public:
  StructPaddingTestStruct(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructPaddingTestStruct(
      ::test_encapsulatedstructs::Int16Int8 trailing,
      ::test_encapsulatedstructs::Int8Int32 inner,
      ::test_encapsulatedstructs::ArrayInt16Int8 array) noexcept
      : storage_({.trailing = std::move(trailing),
                  .inner = std::move(inner),
                  .array = std::move(array)}) {}
  StructPaddingTestStruct() : StructPaddingTestStruct(Storage_{}) {}

  StructPaddingTestStruct(StructPaddingTestStruct&&) noexcept = default;
  StructPaddingTestStruct& operator=(StructPaddingTestStruct&&) noexcept =
      default;
  StructPaddingTestStruct(const StructPaddingTestStruct& other) noexcept
      : StructPaddingTestStruct(other.CloneStorage_()) {}
  StructPaddingTestStruct& operator=(
      const StructPaddingTestStruct& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const StructPaddingTestStruct& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_encapsulatedstructs::StructPaddingTestStruct, 24,
        24>::Equal(this, &other);
  }
  bool operator!=(const StructPaddingTestStruct& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_encapsulatedstructs::StructPaddingTestStruct, 24,
        24>::Equal(this, &other);
  }

  const ::test_encapsulatedstructs::Int16Int8& trailing() const {
    return storage_.trailing;
  }

  ::test_encapsulatedstructs::Int16Int8& trailing() {
    return storage_.trailing;
  }

  const ::test_encapsulatedstructs::Int8Int32& inner() const {
    return storage_.inner;
  }

  ::test_encapsulatedstructs::Int8Int32& inner() { return storage_.inner; }

  const ::test_encapsulatedstructs::ArrayInt16Int8& array() const {
    return storage_.array;
  }

  ::test_encapsulatedstructs::ArrayInt16Int8& array() { return storage_.array; }

 private:
  struct Storage_ final {
    ::test_encapsulatedstructs::Int16Int8 trailing{};
    ::test_encapsulatedstructs::Int8Int32 inner{};
    ::test_encapsulatedstructs::ArrayInt16Int8 array{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_encapsulatedstructs::StructPaddingTestStruct, 24, 24>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_encapsulatedstructs::StructPaddingTestStruct>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_encapsulatedstructs::Int16Int8>{&Storage_::trailing,
                                                           0, 0},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_encapsulatedstructs::Int8Int32>{&Storage_::inner, 4,
                                                           4},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_encapsulatedstructs::ArrayInt16Int8>{
          &Storage_::array, 12, 12});
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_encapsulatedstructs_TopLevelStructTable;

class TopLevelStruct final {
 private:
  struct Storage_;

 public:
  TopLevelStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  TopLevelStruct(
      ::test_encapsulatedstructs::StructPaddingTestStruct a,
      ::test_encapsulatedstructs::NonInlineStructTestStruct b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  TopLevelStruct() : TopLevelStruct(Storage_{}) {}

  TopLevelStruct(TopLevelStruct&&) noexcept = default;
  TopLevelStruct& operator=(TopLevelStruct&&) noexcept = default;

  const ::test_encapsulatedstructs::StructPaddingTestStruct& a() const {
    return storage_.a;
  }

  ::test_encapsulatedstructs::StructPaddingTestStruct& a() {
    return storage_.a;
  }

  const ::test_encapsulatedstructs::NonInlineStructTestStruct& b() const {
    return storage_.b;
  }

  ::test_encapsulatedstructs::NonInlineStructTestStruct& b() {
    return storage_.b;
  }

 private:
  struct Storage_ final {
    ::test_encapsulatedstructs::StructPaddingTestStruct a{};
    ::test_encapsulatedstructs::NonInlineStructTestStruct b{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_encapsulatedstructs::TopLevelStruct, 40, 40>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_encapsulatedstructs::TopLevelStruct>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_encapsulatedstructs::StructPaddingTestStruct>{
          &Storage_::a, 0, 0},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_encapsulatedstructs::NonInlineStructTestStruct>{
          &Storage_::b, 24, 24});
};

#endif  // __Fuchsia__

}  // namespace test_encapsulatedstructs
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_encapsulatedstructs_NonInlineStructTestStructTable;

template <>
struct IsResource<::test_encapsulatedstructs::NonInlineStructTestStruct>
    : public std::true_type {};
template <>
struct IsFidlType<::test_encapsulatedstructs::NonInlineStructTestStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_encapsulatedstructs::NonInlineStructTestStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_NonInlineStructTestStructTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_encapsulatedstructs::NonInlineStructTestStruct>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_encapsulatedstructs::NonInlineStructTestStruct, 16, 16> {
};

template <>
struct HasPadding<::test_encapsulatedstructs::NonInlineStructTestStruct>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_encapsulatedstructs::NonInlineStructTestStruct>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_encapsulatedstructs::NonInlineStructTestStruct>::value &&
          internal::NaturalIsMemcpyCompatible<::std::unique_ptr<
              ::test_encapsulatedstructs::Int16Int8>>::value &&
          internal::NaturalIsMemcpyCompatible<::zx::handle>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_encapsulatedstructs_Int8Int32Table;

template <>
struct IsFidlType<::test_encapsulatedstructs::Int8Int32>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_encapsulatedstructs::Int8Int32>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_Int8Int32Table;
};

template <>
struct internal::NaturalCodingTraits<::test_encapsulatedstructs::Int8Int32>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_encapsulatedstructs::Int8Int32, 8, 8> {};

template <>
struct HasPadding<::test_encapsulatedstructs::Int8Int32>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_encapsulatedstructs::Int8Int32>
    : public internal::BoolConstant<
          !HasPadding<::test_encapsulatedstructs::Int8Int32>::value &&
          internal::NaturalIsMemcpyCompatible<int8_t>::value &&
          internal::NaturalIsMemcpyCompatible<int32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_encapsulatedstructs_Int16Int8Table;

template <>
struct IsFidlType<::test_encapsulatedstructs::Int16Int8>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_encapsulatedstructs::Int16Int8>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_Int16Int8Table;
};

template <>
struct internal::NaturalCodingTraits<::test_encapsulatedstructs::Int16Int8>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_encapsulatedstructs::Int16Int8, 4, 4> {};

template <>
struct HasPadding<::test_encapsulatedstructs::Int16Int8>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_encapsulatedstructs::Int16Int8>
    : public internal::BoolConstant<
          !HasPadding<::test_encapsulatedstructs::Int16Int8>::value &&
          internal::NaturalIsMemcpyCompatible<int16_t>::value &&
          internal::NaturalIsMemcpyCompatible<int8_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_encapsulatedstructs_ArrayInt16Int8Table;

template <>
struct IsFidlType<::test_encapsulatedstructs::ArrayInt16Int8>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_encapsulatedstructs::ArrayInt16Int8>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_ArrayInt16Int8Table;
};

template <>
struct internal::NaturalCodingTraits<::test_encapsulatedstructs::ArrayInt16Int8>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_encapsulatedstructs::ArrayInt16Int8, 12, 12> {};

template <>
struct HasPadding<::test_encapsulatedstructs::ArrayInt16Int8>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_encapsulatedstructs::ArrayInt16Int8>
    : public internal::BoolConstant<
          !HasPadding<::test_encapsulatedstructs::ArrayInt16Int8>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::array<::test_encapsulatedstructs::Int16Int8, 3>>::value> {
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_encapsulatedstructs_StructPaddingTestStructTable;

template <>
struct IsFidlType<::test_encapsulatedstructs::StructPaddingTestStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_encapsulatedstructs::StructPaddingTestStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_StructPaddingTestStructTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_encapsulatedstructs::StructPaddingTestStruct>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_encapsulatedstructs::StructPaddingTestStruct, 24, 24> {};

template <>
struct HasPadding<::test_encapsulatedstructs::StructPaddingTestStruct>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_encapsulatedstructs::StructPaddingTestStruct>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_encapsulatedstructs::StructPaddingTestStruct>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_encapsulatedstructs::Int16Int8>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_encapsulatedstructs::Int8Int32>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_encapsulatedstructs::ArrayInt16Int8>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_encapsulatedstructs_TopLevelStructTable;

template <>
struct IsResource<::test_encapsulatedstructs::TopLevelStruct>
    : public std::true_type {};
template <>
struct IsFidlType<::test_encapsulatedstructs::TopLevelStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_encapsulatedstructs::TopLevelStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_encapsulatedstructs_TopLevelStructTable;
};

template <>
struct internal::NaturalCodingTraits<::test_encapsulatedstructs::TopLevelStruct>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_encapsulatedstructs::TopLevelStruct, 40, 40> {};

template <>
struct HasPadding<::test_encapsulatedstructs::TopLevelStruct>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_encapsulatedstructs::TopLevelStruct>
    : public internal::BoolConstant<
          !HasPadding<::test_encapsulatedstructs::TopLevelStruct>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_encapsulatedstructs::StructPaddingTestStruct>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_encapsulatedstructs::NonInlineStructTestStruct>::value> {};

#endif  // __Fuchsia__

}  // namespace fidl
