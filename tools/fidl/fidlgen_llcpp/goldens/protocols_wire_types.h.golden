// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>
#include <lib/zx/handle.h>
#include <lib/zx/socket.h>

#endif  // __Fuchsia__

#include <fidl/test.protocols/cpp/common_types.h>
#include <fidl/test.protocols/cpp/markers.h>

namespace test_protocols {
namespace wire {
using Rights = ::test_protocols::rights;

using ObjType = ::test_protocols::obj_type;
using ErrorEnum = ::test_protocols::ErrorEnum;

struct WithErrorSyntaxHandleInResultResponse;

struct WithErrorSyntaxResponseAsStructResponse;

struct WithErrorSyntaxErrorAsPrimitiveResponse;

struct WithErrorSyntaxErrorAsEnumResponse;

struct ProtocolEnds;

class WithErrorSyntaxHandleInResultResult;

class WithErrorSyntaxResponseAsStructResult;

class WithErrorSyntaxErrorAsPrimitiveResult;

class TheUnion;

class WithErrorSyntaxErrorAsEnumResult;

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocols_WithErrorSyntax_HandleInResult_ResponseTable;

struct WithErrorSyntaxHandleInResultResponse {
  ::zx::handle h = {};

  void _CloseHandles();
};
#endif  // __Fuchsia__

extern "C" const fidl_type_t
    test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseTable;

struct WithErrorSyntaxErrorAsPrimitiveResponse {
  uint8_t __reserved = {};
};

extern "C" const fidl_type_t
    test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseTable;

struct WithErrorSyntaxErrorAsEnumResponse {
  uint8_t __reserved = {};
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t
    test_protocols_WithErrorSyntax_HandleInResult_ResultTable;

class WithErrorSyntaxHandleInResultResult {
 public:
  using Response = test_protocols::wire::WithErrorSyntaxHandleInResultResponse;

  WithErrorSyntaxHandleInResultResult()
      : ordinal_(::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                     Ordinal::Invalid),
        envelope_ {}
  {}

  ~WithErrorSyntaxHandleInResultResult();
  WithErrorSyntaxHandleInResultResult(
      WithErrorSyntaxHandleInResultResult&& other) {
    _Move(std::move(other));
  }
  WithErrorSyntaxHandleInResultResult& operator=(
      WithErrorSyntaxHandleInResultResult&& other) {
    if (this != &other) {
      _Move(std::move(other));
    }
    return *this;
  }

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
               Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ ==
           ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
               Ordinal::kResponse;
  }
  static WithErrorSyntaxHandleInResultResult WithResponse(
      ::test_protocols::wire::WithErrorSyntaxHandleInResultResponse val) {
    WithErrorSyntaxHandleInResultResult result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::test_protocols::wire::WithErrorSyntaxHandleInResultResponse elem) {
    ordinal_ = ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
        Ordinal::kResponse;
    envelope_
        .As<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse>()
        .set_data(std::move(elem));
  }

  ::test_protocols::wire::WithErrorSyntaxHandleInResultResponse& response() {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse>()
        .get_data();
  }
  const ::test_protocols::wire::WithErrorSyntaxHandleInResultResponse&
  response() const {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::test_protocols::wire::
                           WithErrorSyntaxHandleInResultResult::Ordinal::kErr;
  }
  static WithErrorSyntaxHandleInResultResult WithErr(uint32_t val) {
    WithErrorSyntaxHandleInResultResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(uint32_t elem) {
    ordinal_ = ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
        Ordinal::kErr;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& err() {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                  Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::
                  Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::Tag Which()
      const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::Tag>(
        ordinal_);
  }
  void _CloseHandles();

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };
  void _Move(WithErrorSyntaxHandleInResultResult&& other);

  static void SizeAndOffsetAssertionHelper();
  ::test_protocols::wire::WithErrorSyntaxHandleInResultResult::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};
#endif  // __Fuchsia__

extern "C" const fidl_type_t
    test_protocols_WithErrorSyntax_ResponseAsStruct_ResultTable;

class WithErrorSyntaxResponseAsStructResult {
 public:
  using Response =
      test_protocols::wire::WithErrorSyntaxResponseAsStructResponse;

  WithErrorSyntaxResponseAsStructResult()
      : ordinal_(::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
                     Ordinal::Invalid),
        envelope_ {}
  {}

  WithErrorSyntaxResponseAsStructResult(
      const WithErrorSyntaxResponseAsStructResult&) = default;
  WithErrorSyntaxResponseAsStructResult& operator=(
      const WithErrorSyntaxResponseAsStructResult&) = default;
  WithErrorSyntaxResponseAsStructResult(
      WithErrorSyntaxResponseAsStructResult&&) = default;
  WithErrorSyntaxResponseAsStructResult& operator=(
      WithErrorSyntaxResponseAsStructResult&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
               Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ ==
           ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
               Ordinal::kResponse;
  }
  static WithErrorSyntaxResponseAsStructResult WithResponse(
      ::fidl::ObjectView<
          ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>
          val) {
    WithErrorSyntaxResponseAsStructResult result;
    result.set_response(val);
    return result;
  }

  template <typename... Args>
  static WithErrorSyntaxResponseAsStructResult WithResponse(
      ::fidl::AnyArena& allocator, Args&&... args) {
    WithErrorSyntaxResponseAsStructResult result;
    result.set_response(
        ::fidl::ObjectView<
            ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>(
            allocator, std::forward<Args>(args)...));
    return result;
  }

  void set_response(
      ::fidl::ObjectView<
          ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>
          elem) {
    ordinal_ = ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
        Ordinal::kResponse;
    envelope_
        .As<::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>()
        .set_data(std::move(elem));
  }

  template <typename... Args>
  void set_response(::fidl::AnyArena& allocator, Args&&... args) {
    ordinal_ = ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
        Ordinal::kResponse;
    set_response(
        ::fidl::ObjectView<
            ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>(
            allocator, std::forward<Args>(args)...));
  }

  ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse& response() {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>()
        .get_data();
  }
  const ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse&
  response() const {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::test_protocols::wire::
                           WithErrorSyntaxResponseAsStructResult::Ordinal::kErr;
  }
  static WithErrorSyntaxResponseAsStructResult WithErr(uint32_t val) {
    WithErrorSyntaxResponseAsStructResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(uint32_t elem) {
    ordinal_ = ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
        Ordinal::kErr;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& err() {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
                  Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::
                  Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::Tag Which()
      const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::Tag>(
        ordinal_);
  }

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult::Ordinal
      ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t
    test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultTable;

class WithErrorSyntaxErrorAsPrimitiveResult {
 public:
  using Response =
      test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse;

  WithErrorSyntaxErrorAsPrimitiveResult()
      : ordinal_(::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
                     Ordinal::Invalid),
        envelope_ {}
  {}

  WithErrorSyntaxErrorAsPrimitiveResult(
      const WithErrorSyntaxErrorAsPrimitiveResult&) = default;
  WithErrorSyntaxErrorAsPrimitiveResult& operator=(
      const WithErrorSyntaxErrorAsPrimitiveResult&) = default;
  WithErrorSyntaxErrorAsPrimitiveResult(
      WithErrorSyntaxErrorAsPrimitiveResult&&) = default;
  WithErrorSyntaxErrorAsPrimitiveResult& operator=(
      WithErrorSyntaxErrorAsPrimitiveResult&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ ==
           ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
               Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ ==
           ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
               Ordinal::kResponse;
  }
  static WithErrorSyntaxErrorAsPrimitiveResult WithResponse(
      ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse val) {
    WithErrorSyntaxErrorAsPrimitiveResult result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse elem) {
    ordinal_ = ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
        Ordinal::kResponse;
    envelope_
        .As<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>()
        .set_data(std::move(elem));
  }

  ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse& response() {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>()
        .get_data();
  }
  const ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse&
  response() const {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::test_protocols::wire::
                           WithErrorSyntaxErrorAsPrimitiveResult::Ordinal::kErr;
  }
  static WithErrorSyntaxErrorAsPrimitiveResult WithErr(uint32_t val) {
    WithErrorSyntaxErrorAsPrimitiveResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(uint32_t elem) {
    ordinal_ = ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
        Ordinal::kErr;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& err() {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
                  Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::
                  Ordinal::kErr);
    return envelope_.As<uint32_t>().get_data();
  }
  ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::Tag Which()
      const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::Tag>(
        ordinal_);
  }

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult::Ordinal
      ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t test_protocols_TheUnionTable;

class TheUnion {
 public:
  TheUnion()
      : ordinal_(::test_protocols::wire::TheUnion::Ordinal::Invalid),
        envelope_ {}
  {}

  TheUnion(const TheUnion&) = default;
  TheUnion& operator=(const TheUnion&) = default;
  TheUnion(TheUnion&&) = default;
  TheUnion& operator=(TheUnion&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kV = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::test_protocols::wire::TheUnion::Ordinal::Invalid;
  }

  bool is_v() const {
    return ordinal_ == ::test_protocols::wire::TheUnion::Ordinal::kV;
  }
  static TheUnion WithV(uint32_t val) {
    TheUnion result;
    result.set_v(std::move(val));
    return result;
  }

  void set_v(uint32_t elem) {
    ordinal_ = ::test_protocols::wire::TheUnion::Ordinal::kV;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& v() {
    ZX_ASSERT(ordinal_ == ::test_protocols::wire::TheUnion::Ordinal::kV);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& v() const {
    ZX_ASSERT(ordinal_ == ::test_protocols::wire::TheUnion::Ordinal::kV);
    return envelope_.As<uint32_t>().get_data();
  }
  ::test_protocols::wire::TheUnion::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kV = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_protocols::wire::TheUnion::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t
    test_protocols_WithErrorSyntax_ErrorAsEnum_ResultTable;

class WithErrorSyntaxErrorAsEnumResult {
 public:
  using Response = test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse;

  WithErrorSyntaxErrorAsEnumResult()
      : ordinal_(::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
                     Ordinal::Invalid),
        envelope_ {}
  {}

  WithErrorSyntaxErrorAsEnumResult(const WithErrorSyntaxErrorAsEnumResult&) =
      default;
  WithErrorSyntaxErrorAsEnumResult& operator=(
      const WithErrorSyntaxErrorAsEnumResult&) = default;
  WithErrorSyntaxErrorAsEnumResult(WithErrorSyntaxErrorAsEnumResult&&) =
      default;
  WithErrorSyntaxErrorAsEnumResult& operator=(
      WithErrorSyntaxErrorAsEnumResult&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::test_protocols::wire::
                           WithErrorSyntaxErrorAsEnumResult::Ordinal::Invalid;
  }

  bool is_response() const {
    return ordinal_ == ::test_protocols::wire::
                           WithErrorSyntaxErrorAsEnumResult::Ordinal::kResponse;
  }
  static WithErrorSyntaxErrorAsEnumResult WithResponse(
      ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse val) {
    WithErrorSyntaxErrorAsEnumResult result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse elem) {
    ordinal_ = ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
        Ordinal::kResponse;
    envelope_.As<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>()
        .set_data(std::move(elem));
  }

  ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse& response() {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>()
        .get_data();
  }
  const ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse& response()
      const {
    ZX_ASSERT(ordinal_ ==
              ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::
                  Ordinal::kResponse);
    return envelope_
        .As<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>()
        .get_data();
  }

  bool is_err() const {
    return ordinal_ == ::test_protocols::wire::
                           WithErrorSyntaxErrorAsEnumResult::Ordinal::kErr;
  }
  static WithErrorSyntaxErrorAsEnumResult WithErr(
      ::test_protocols::wire::ErrorEnum val) {
    WithErrorSyntaxErrorAsEnumResult result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(::test_protocols::wire::ErrorEnum elem) {
    ordinal_ =
        ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::Ordinal::kErr;
    envelope_.As<::test_protocols::wire::ErrorEnum>().set_data(std::move(elem));
  }

  ::test_protocols::wire::ErrorEnum& err() {
    ZX_ASSERT(ordinal_ == ::test_protocols::wire::
                              WithErrorSyntaxErrorAsEnumResult::Ordinal::kErr);
    return envelope_.As<::test_protocols::wire::ErrorEnum>().get_data();
  }
  const ::test_protocols::wire::ErrorEnum& err() const {
    ZX_ASSERT(ordinal_ == ::test_protocols::wire::
                              WithErrorSyntaxErrorAsEnumResult::Ordinal::kErr);
    return envelope_.As<::test_protocols::wire::ErrorEnum>().get_data();
  }
  ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::Tag Which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<
        ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::Tag>(
        ordinal_);
  }

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

extern "C" const fidl_type_t
    test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseTable;

struct WithErrorSyntaxResponseAsStructResponse {
  int64_t a = {};

  int64_t b = {};

  int64_t c = {};
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_protocols_ProtocolEndsTable;

struct ProtocolEnds {
  ::fidl::ClientEnd<::test_protocols::DiscoverableProtocol> client = {};

  ::fidl::ServerEnd<::test_protocols::DiscoverableProtocol> server = {};

  ::fidl::ClientEnd<::test_protocols::DiscoverableProtocol> client_opt = {};

  ::fidl::ServerEnd<::test_protocols::DiscoverableProtocol> server_opt = {};

  void _CloseHandles();
};
#endif  // __Fuchsia__

}  // namespace wire
}  // namespace test_protocols
namespace fidl {

#ifdef __Fuchsia__
template <>
struct IsResource<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse>
    : public std::true_type {};

template <>
struct TypeTraits<
    ::test_protocols::wire::WithErrorSyntaxHandleInResultResponse> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::
          test_protocols_WithErrorSyntax_HandleInResult_ResponseTable;
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kPrimarySize = 4;
  static constexpr uint32_t kPrimarySizeV1 = 4;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse>
    : public std::true_type {};
template <>
struct IsStruct<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_protocols::wire::WithErrorSyntaxHandleInResultResponse>);
static_assert(
    offsetof(::test_protocols::wire::WithErrorSyntaxHandleInResultResponse,
             h) == 0);
static_assert(
    sizeof(::test_protocols::wire::WithErrorSyntaxHandleInResultResponse) ==
    TypeTraits<::test_protocols::wire::WithErrorSyntaxHandleInResultResponse>::
        kPrimarySize);
#endif  // __Fuchsia__

template <>
struct TypeTraits<
    ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::
          test_protocols_WithErrorSyntax_ResponseAsStruct_ResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 24;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<
    ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>
    : public std::true_type {};
template <>
struct IsStruct<::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse>);
static_assert(
    offsetof(::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse,
             a) == 0);
static_assert(
    offsetof(::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse,
             b) == 8);
static_assert(
    offsetof(::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse,
             c) == 16);
static_assert(
    sizeof(::test_protocols::wire::WithErrorSyntaxResponseAsStructResponse) ==
    TypeTraits<::test_protocols::wire::
                   WithErrorSyntaxResponseAsStructResponse>::kPrimarySize);

template <>
struct TypeTraits<
    ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::
          test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 1;
  static constexpr uint32_t kPrimarySizeV1 = 1;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<
    ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>
    : public std::true_type {};
template <>
struct IsStruct<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse>);
static_assert(
    offsetof(::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse,
             __reserved) == 0);
static_assert(
    sizeof(::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResponse) ==
    TypeTraits<::test_protocols::wire::
                   WithErrorSyntaxErrorAsPrimitiveResponse>::kPrimarySize);

template <>
struct TypeTraits<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::
          test_protocols_WithErrorSyntax_ErrorAsEnum_ResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 1;
  static constexpr uint32_t kPrimarySizeV1 = 1;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>
    : public std::true_type {};
template <>
struct IsStruct<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>);
static_assert(
    offsetof(::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse,
             __reserved) == 0);
static_assert(
    sizeof(::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse) ==
    TypeTraits<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResponse>::
        kPrimarySize);

#ifdef __Fuchsia__
template <>
struct IsResource<::test_protocols::wire::ProtocolEnds>
    : public std::true_type {};

template <>
struct TypeTraits<::test_protocols::wire::ProtocolEnds> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::test_protocols_ProtocolEndsTable;
  static constexpr uint32_t kMaxNumHandles = 4;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_protocols::wire::ProtocolEnds>
    : public std::true_type {};
template <>
struct IsStruct<::test_protocols::wire::ProtocolEnds> : public std::true_type {
};
static_assert(std::is_standard_layout_v<::test_protocols::wire::ProtocolEnds>);
static_assert(offsetof(::test_protocols::wire::ProtocolEnds, client) == 0);
static_assert(offsetof(::test_protocols::wire::ProtocolEnds, server) == 4);
static_assert(offsetof(::test_protocols::wire::ProtocolEnds, client_opt) == 8);
static_assert(offsetof(::test_protocols::wire::ProtocolEnds, server_opt) == 12);
static_assert(sizeof(::test_protocols::wire::ProtocolEnds) ==
              TypeTraits<::test_protocols::wire::ProtocolEnds>::kPrimarySize);
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
struct IsResource<::test_protocols::wire::WithErrorSyntaxHandleInResultResult>
    : public std::true_type {};

template <>
struct TypeTraits<::test_protocols::wire::WithErrorSyntaxHandleInResultResult> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::
          test_protocols_WithErrorSyntax_HandleInResult_ResultTable;
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_protocols::wire::WithErrorSyntaxHandleInResultResult>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocols::wire::WithErrorSyntaxHandleInResultResult>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_protocols::wire::WithErrorSyntaxHandleInResultResult>);
#endif  // __Fuchsia__

template <>
struct TypeTraits<
    ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::
          test_protocols_WithErrorSyntax_ResponseAsStruct_ResultTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 24;
  static constexpr uint32_t kMaxOutOfLineV1 = 24;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_protocols::wire::WithErrorSyntaxResponseAsStructResult>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocols::wire::WithErrorSyntaxResponseAsStructResult>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_protocols::wire::WithErrorSyntaxResponseAsStructResult>);

template <>
struct TypeTraits<
    ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::
          test_protocols_WithErrorSyntax_ErrorAsPrimitive_ResultTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_protocols::wire::WithErrorSyntaxErrorAsPrimitiveResult>);

template <>
struct TypeTraits<::test_protocols::wire::TheUnion> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::test_protocols_TheUnionTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_protocols::wire::TheUnion> : public std::true_type {};
template <>
struct IsUnion<::test_protocols::wire::TheUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_protocols::wire::TheUnion>);

template <>
struct TypeTraits<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult> {
  static constexpr const fidl_type_t* kType =
      &::test_protocols::wire::
          test_protocols_WithErrorSyntax_ErrorAsEnum_ResultTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::test_protocols::wire::WithErrorSyntaxErrorAsEnumResult>);

}  // namespace fidl
