// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.union/cpp/natural_messaging.h>

namespace test_union {
[[maybe_unused]] constexpr inline uint64_t
    kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal =
        582913180652179677lu;
[[maybe_unused]] constexpr inline uint64_t
    kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal =
        7698084639218919941lu;

#ifdef __Fuchsia__
}  // namespace test_union
void fidl::internal::NaturalClientImpl<::test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated(
        ::fidl::ClientCallback<
            ::test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_union::
              kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal};
  return messenger().TwoWay(
      nullptr,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>,
          ::fidl::ClientCallback<
              ::test_union::TestProtocol::
                  StrictXUnionHenceResponseMayBeStackAllocated>>(
          ::test_union::
              kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_union::TestProtocol>::
    StrictXUnionHenceResponseMayBeStackAllocated(
        ::fidl::ClientResponseCallback<
            ::test_union::TestProtocol::
                StrictXUnionHenceResponseMayBeStackAllocated>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_union::
              kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal};
  return messenger().TwoWay(
      nullptr,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_union::TestProtocol::
                               StrictXUnionHenceResponseMayBeStackAllocated>,
          ::fidl::ClientResponseCallback<
              ::test_union::TestProtocol::
                  StrictXUnionHenceResponseMayBeStackAllocated>>(
          ::test_union::
              kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal,
          std::move(_callback)));
}

void fidl::internal::NaturalClientImpl<::test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(
        ::fidl::ClientCallback<
            ::test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_union::
              kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal};
  return messenger().TwoWay(
      nullptr,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>,
          ::fidl::ClientCallback<
              ::test_union::TestProtocol::
                  FlexibleXUnionHenceResponseMustBeHeapAllocated>>(
          ::test_union::
              kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal,
          std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_union::TestProtocol>::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(
        ::fidl::ClientResponseCallback<
            ::test_union::TestProtocol::
                FlexibleXUnionHenceResponseMustBeHeapAllocated>&& _callback)
        const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_union::
              kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal};
  return messenger().TwoWay(
      nullptr,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(_encoder),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_union::TestProtocol::
                               FlexibleXUnionHenceResponseMustBeHeapAllocated>,
          ::fidl::ClientResponseCallback<
              ::test_union::TestProtocol::
                  FlexibleXUnionHenceResponseMustBeHeapAllocated>>(
          ::test_union::
              kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal,
          std::move(_callback)));
}
namespace test_union {
#endif  // __Fuchsia__

}  // namespace test_union
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_union::TestProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<
    ::test_union::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocated>::
    Reply(
        ::test_union::
            TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponse&&
                payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_union::
              kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal};
  _messenger.SendReply(
      &::test_union::
          test_union_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

void fidl::internal::NaturalCompleterBase<
    ::test_union::TestProtocol::
        FlexibleXUnionHenceResponseMustBeHeapAllocated>::
    Reply(
        ::test_union::
            TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponse&&
                payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{
          ::test_union::
              kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal};
  _messenger.SendReply(
      &::test_union::
          test_union_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_union::TestProtocol>::entries_[] = {
    {
        ::test_union::
            kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<::test_union::TestProtocol::
                                  StrictXUnionHenceResponseMayBeStackAllocated>>
              decoded = ::fidl::Request<
                  ::test_union::TestProtocol::
                      StrictXUnionHenceResponseMayBeStackAllocated>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_union::TestProtocol::
                  StrictXUnionHenceResponseMayBeStackAllocated>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_union::TestProtocol>*>(interface)
              ->StrictXUnionHenceResponseMayBeStackAllocated(decoded.value(),
                                                             completer);
          return ZX_OK;
        },
    },
    {
        ::test_union::
            kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<
              ::fidl::Error,
              ::fidl::Request<
                  ::test_union::TestProtocol::
                      FlexibleXUnionHenceResponseMustBeHeapAllocated>>
              decoded = ::fidl::Request<
                  ::test_union::TestProtocol::
                      FlexibleXUnionHenceResponseMustBeHeapAllocated>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_union::TestProtocol::
                  FlexibleXUnionHenceResponseMustBeHeapAllocated>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_union::TestProtocol>*>(interface)
              ->FlexibleXUnionHenceResponseMustBeHeapAllocated(decoded.value(),
                                                               completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_union::TestProtocol>::entries_end_ = &entries_[2];

void fidl::internal::NaturalServerDispatcher<::test_union::TestProtocol>::
    Dispatch(::fidl::Server<::test_union::TestProtocol>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_union::TestProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_union::TestProtocol>::Dispatch(this, std::move(msg),
                                            std::move(transport_context), txn);
}
#endif  // __Fuchsia__
