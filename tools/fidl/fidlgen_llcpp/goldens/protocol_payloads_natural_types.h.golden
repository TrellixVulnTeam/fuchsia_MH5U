// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.protocolpayloads/cpp/common_types.h>
#include <fidl/test.protocolpayloads/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.protocolpayloads.imported/cpp/natural_types.h>

namespace test_protocolpayloads {
class MainProtocolTwoWayImportWithErrorTopResponse;

class MainProtocol_TwoWayAnonWithError_Response;

class MainProtocolTwoWayAnonWithErrorTopResponse;

class MainProtocolOnImportWithErrorRequest;

class MainProtocol_OnAnonWithError_Response;

class MainProtocolOnAnonWithErrorRequest;

class MainProtocolTwoWayAnonWithErrorRequest;

class MainProtocolTwoWayAnonTopResponse;

class MainProtocolTwoWayAnonRequest;

class MainProtocolOneWayAnonRequest;

class MainProtocolOnAnonRequest;

class LocalStructPayload;

class MainProtocolTwoWayLocalWithErrorTopResponse;

class MainProtocolOnLocalWithErrorRequest;

class MainProtocol_TwoWayImportWithError_Result;

class MainProtocol_TwoWayAnonWithError_Result;

class MainProtocol_OnImportWithError_Result;

class MainProtocol_OnAnonWithError_Result;

class MainProtocol_TwoWayLocalWithError_Result;

class MainProtocol_OnLocalWithError_Result;

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_TwoWayImportWithError_ResultTable;

class MainProtocol_TwoWayImportWithError_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_protocolpayloads_imported::ImportStructPayload,
                     uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_TwoWayImportWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_TwoWayImportWithError_Result(
      MainProtocol_TwoWayImportWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayImportWithError_Result& operator=(
      MainProtocol_TwoWayImportWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayImportWithError_Result(
      const MainProtocol_TwoWayImportWithError_Result& other) noexcept
      : MainProtocol_TwoWayImportWithError_Result(other.CloneStorage_()) {}
  MainProtocol_TwoWayImportWithError_Result& operator=(
      const MainProtocol_TwoWayImportWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_TwoWayImportWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_TwoWayImportWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result::
      Tag
      Which() const {
    return MainProtocol_TwoWayImportWithError_Result::IndexToTag(
        storage_->index());
  }
  static MainProtocol_TwoWayImportWithError_Result WithResponse(
      ::test_protocolpayloads_imported::ImportStructPayload val) {
    return MainProtocol_TwoWayImportWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_TwoWayImportWithError_Result WithErr(uint32_t val) {
    return MainProtocol_TwoWayImportWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 3>
      kMembers = {std::nullopt, std::nullopt, std::nullopt};

  explicit MainProtocol_TwoWayImportWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result::Tag
          tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result::
          Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result::
          Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_protocolpayloads::
      MainProtocol_TwoWayImportWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayImportWithError_Result::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayImportWithError_Result::Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayImportWithError_Result::Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayImportWithErrorTopResponseTable;

class MainProtocolTwoWayImportWithErrorTopResponse final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayImportWithErrorTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayImportWithErrorTopResponse(
      ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolTwoWayImportWithErrorTopResponse()
      : MainProtocolTwoWayImportWithErrorTopResponse(Storage_{}) {}

  MainProtocolTwoWayImportWithErrorTopResponse(
      MainProtocolTwoWayImportWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayImportWithErrorTopResponse& operator=(
      MainProtocolTwoWayImportWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayImportWithErrorTopResponse(
      const MainProtocolTwoWayImportWithErrorTopResponse& other) noexcept
      : MainProtocolTwoWayImportWithErrorTopResponse(other.CloneStorage_()) {}
  MainProtocolTwoWayImportWithErrorTopResponse& operator=(
      const MainProtocolTwoWayImportWithErrorTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const MainProtocolTwoWayImportWithErrorTopResponse& other)
      const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse,
        24, 16>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayImportWithErrorTopResponse& other)
      const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse,
        24, 16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse, 24,
      16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result>{
          &Storage_::result, 0, 0});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_TwoWayAnonWithError_ResponseTable;

class MainProtocol_TwoWayAnonWithError_Response final {
 private:
  struct Storage_;

 public:
  MainProtocol_TwoWayAnonWithError_Response(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocol_TwoWayAnonWithError_Response(uint32_t a, uint32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  MainProtocol_TwoWayAnonWithError_Response()
      : MainProtocol_TwoWayAnonWithError_Response(Storage_{}) {}

  MainProtocol_TwoWayAnonWithError_Response(
      MainProtocol_TwoWayAnonWithError_Response&&) noexcept = default;
  MainProtocol_TwoWayAnonWithError_Response& operator=(
      MainProtocol_TwoWayAnonWithError_Response&&) noexcept = default;
  MainProtocol_TwoWayAnonWithError_Response(
      const MainProtocol_TwoWayAnonWithError_Response& other) noexcept
      : MainProtocol_TwoWayAnonWithError_Response(other.CloneStorage_()) {}
  MainProtocol_TwoWayAnonWithError_Response& operator=(
      const MainProtocol_TwoWayAnonWithError_Response& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_TwoWayAnonWithError_Response& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response, 8,
        8>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocol_TwoWayAnonWithError_Response& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response, 8,
        8>::Equal(this, &other);
  }

  uint32_t a() const { return storage_.a; }

  uint32_t& a() { return storage_.a; }

  uint32_t b() const { return storage_.b; }

  uint32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    uint32_t a{};
    uint32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::a, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::b, 4,
                                                                4});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_TwoWayAnonWithError_ResultTable;

class MainProtocol_TwoWayAnonWithError_Result final {
 private:
  using Storage_ = cpp17::variant<
      cpp17::monostate,
      ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response,
      uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_TwoWayAnonWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_TwoWayAnonWithError_Result(
      MainProtocol_TwoWayAnonWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayAnonWithError_Result& operator=(
      MainProtocol_TwoWayAnonWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayAnonWithError_Result(
      const MainProtocol_TwoWayAnonWithError_Result& other) noexcept
      : MainProtocol_TwoWayAnonWithError_Result(other.CloneStorage_()) {}
  MainProtocol_TwoWayAnonWithError_Result& operator=(
      const MainProtocol_TwoWayAnonWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_TwoWayAnonWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_TwoWayAnonWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result::
      Tag
      Which() const {
    return MainProtocol_TwoWayAnonWithError_Result::IndexToTag(
        storage_->index());
  }
  static MainProtocol_TwoWayAnonWithError_Result WithResponse(
      ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response val) {
    return MainProtocol_TwoWayAnonWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_TwoWayAnonWithError_Result WithErr(uint32_t val) {
    return MainProtocol_TwoWayAnonWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 3>
      kMembers = {std::nullopt, std::nullopt, std::nullopt};

  explicit MainProtocol_TwoWayAnonWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result::Tag
          tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result::
          Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result::
          Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_protocolpayloads::
      MainProtocol_TwoWayAnonWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayAnonWithError_Result::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayAnonWithError_Result::Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayAnonWithError_Result::Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayAnonWithErrorTopResponseTable;

class MainProtocolTwoWayAnonWithErrorTopResponse final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonWithErrorTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayAnonWithErrorTopResponse(
      ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolTwoWayAnonWithErrorTopResponse()
      : MainProtocolTwoWayAnonWithErrorTopResponse(Storage_{}) {}

  MainProtocolTwoWayAnonWithErrorTopResponse(
      MainProtocolTwoWayAnonWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorTopResponse& operator=(
      MainProtocolTwoWayAnonWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorTopResponse(
      const MainProtocolTwoWayAnonWithErrorTopResponse& other) noexcept
      : MainProtocolTwoWayAnonWithErrorTopResponse(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonWithErrorTopResponse& operator=(
      const MainProtocolTwoWayAnonWithErrorTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolTwoWayAnonWithErrorTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolTwoWayAnonWithErrorTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse, 24,
      16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result>{
          &Storage_::result, 0, 0});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_OnImportWithError_ResultTable;

class MainProtocol_OnImportWithError_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_protocolpayloads_imported::ImportStructPayload,
                     uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_OnImportWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_OnImportWithError_Result(
      MainProtocol_OnImportWithError_Result&&) noexcept = default;
  MainProtocol_OnImportWithError_Result& operator=(
      MainProtocol_OnImportWithError_Result&&) noexcept = default;
  MainProtocol_OnImportWithError_Result(
      const MainProtocol_OnImportWithError_Result& other) noexcept
      : MainProtocol_OnImportWithError_Result(other.CloneStorage_()) {}
  MainProtocol_OnImportWithError_Result& operator=(
      const MainProtocol_OnImportWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_OnImportWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_OnImportWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocol_OnImportWithError_Result::Tag
  Which() const {
    return MainProtocol_OnImportWithError_Result::IndexToTag(storage_->index());
  }
  static MainProtocol_OnImportWithError_Result WithResponse(
      ::test_protocolpayloads_imported::ImportStructPayload val) {
    return MainProtocol_OnImportWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_OnImportWithError_Result WithErr(uint32_t val) {
    return MainProtocol_OnImportWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocolpayloads::MainProtocol_OnImportWithError_Result>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 3>
      kMembers = {std::nullopt, std::nullopt, std::nullopt};

  explicit MainProtocol_OnImportWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocolpayloads::MainProtocol_OnImportWithError_Result::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocol_OnImportWithError_Result::Tag::
          kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocol_OnImportWithError_Result::Tag::
          kErr:
        return 2;
    }
  }

  static constexpr ::test_protocolpayloads::
      MainProtocol_OnImportWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocol_OnImportWithError_Result::
            Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocol_OnImportWithError_Result::
            Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocolpayloads::MainProtocol_OnImportWithError_Result::
            Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOnImportWithErrorRequestTable;

class MainProtocolOnImportWithErrorRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOnImportWithErrorRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOnImportWithErrorRequest(
      ::test_protocolpayloads::MainProtocol_OnImportWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolOnImportWithErrorRequest()
      : MainProtocolOnImportWithErrorRequest(Storage_{}) {}

  MainProtocolOnImportWithErrorRequest(
      MainProtocolOnImportWithErrorRequest&&) noexcept = default;
  MainProtocolOnImportWithErrorRequest& operator=(
      MainProtocolOnImportWithErrorRequest&&) noexcept = default;
  MainProtocolOnImportWithErrorRequest(
      const MainProtocolOnImportWithErrorRequest& other) noexcept
      : MainProtocolOnImportWithErrorRequest(other.CloneStorage_()) {}
  MainProtocolOnImportWithErrorRequest& operator=(
      const MainProtocolOnImportWithErrorRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolOnImportWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolOnImportWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocol_OnImportWithError_Result& result()
      const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocol_OnImportWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocol_OnImportWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest, 24, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocolpayloads::MainProtocol_OnImportWithError_Result>{
          &Storage_::result, 0, 0});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_OnAnonWithError_ResponseTable;

class MainProtocol_OnAnonWithError_Response final {
 private:
  struct Storage_;

 public:
  MainProtocol_OnAnonWithError_Response(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocol_OnAnonWithError_Response(uint32_t a, uint32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  MainProtocol_OnAnonWithError_Response()
      : MainProtocol_OnAnonWithError_Response(Storage_{}) {}

  MainProtocol_OnAnonWithError_Response(
      MainProtocol_OnAnonWithError_Response&&) noexcept = default;
  MainProtocol_OnAnonWithError_Response& operator=(
      MainProtocol_OnAnonWithError_Response&&) noexcept = default;
  MainProtocol_OnAnonWithError_Response(
      const MainProtocol_OnAnonWithError_Response& other) noexcept
      : MainProtocol_OnAnonWithError_Response(other.CloneStorage_()) {}
  MainProtocol_OnAnonWithError_Response& operator=(
      const MainProtocol_OnAnonWithError_Response& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_OnAnonWithError_Response& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response, 8,
        8>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocol_OnAnonWithError_Response& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response, 8,
        8>::Equal(this, &other);
  }

  uint32_t a() const { return storage_.a; }

  uint32_t& a() { return storage_.a; }

  uint32_t b() const { return storage_.b; }

  uint32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    uint32_t a{};
    uint32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::a, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::b, 4,
                                                                4});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_OnAnonWithError_ResultTable;

class MainProtocol_OnAnonWithError_Result final {
 private:
  using Storage_ = cpp17::variant<
      cpp17::monostate,
      ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_OnAnonWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_OnAnonWithError_Result(
      MainProtocol_OnAnonWithError_Result&&) noexcept = default;
  MainProtocol_OnAnonWithError_Result& operator=(
      MainProtocol_OnAnonWithError_Result&&) noexcept = default;
  MainProtocol_OnAnonWithError_Result(
      const MainProtocol_OnAnonWithError_Result& other) noexcept
      : MainProtocol_OnAnonWithError_Result(other.CloneStorage_()) {}
  MainProtocol_OnAnonWithError_Result& operator=(
      const MainProtocol_OnAnonWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_OnAnonWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_OnAnonWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result::Tag
  Which() const {
    return MainProtocol_OnAnonWithError_Result::IndexToTag(storage_->index());
  }
  static MainProtocol_OnAnonWithError_Result WithResponse(
      ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response val) {
    return MainProtocol_OnAnonWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_OnAnonWithError_Result WithErr(uint32_t val) {
    return MainProtocol_OnAnonWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 3>
      kMembers = {std::nullopt, std::nullopt, std::nullopt};

  explicit MainProtocol_OnAnonWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result::Tag::
          kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result::Tag::
          kErr:
        return 2;
    }
  }

  static constexpr ::test_protocolpayloads::
      MainProtocol_OnAnonWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result::
            Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result::
            Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result::
            Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOnAnonWithErrorRequestTable;

class MainProtocolOnAnonWithErrorRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOnAnonWithErrorRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOnAnonWithErrorRequest(
      ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolOnAnonWithErrorRequest()
      : MainProtocolOnAnonWithErrorRequest(Storage_{}) {}

  MainProtocolOnAnonWithErrorRequest(
      MainProtocolOnAnonWithErrorRequest&&) noexcept = default;
  MainProtocolOnAnonWithErrorRequest& operator=(
      MainProtocolOnAnonWithErrorRequest&&) noexcept = default;
  MainProtocolOnAnonWithErrorRequest(
      const MainProtocolOnAnonWithErrorRequest& other) noexcept
      : MainProtocolOnAnonWithErrorRequest(other.CloneStorage_()) {}
  MainProtocolOnAnonWithErrorRequest& operator=(
      const MainProtocolOnAnonWithErrorRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolOnAnonWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolOnAnonWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result& result()
      const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, 24, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result>{
          &Storage_::result, 0, 0});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayAnonWithErrorRequestTable;

class MainProtocolTwoWayAnonWithErrorRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonWithErrorRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayAnonWithErrorRequest(uint32_t a, uint32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  MainProtocolTwoWayAnonWithErrorRequest()
      : MainProtocolTwoWayAnonWithErrorRequest(Storage_{}) {}

  MainProtocolTwoWayAnonWithErrorRequest(
      MainProtocolTwoWayAnonWithErrorRequest&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorRequest& operator=(
      MainProtocolTwoWayAnonWithErrorRequest&&) noexcept = default;
  MainProtocolTwoWayAnonWithErrorRequest(
      const MainProtocolTwoWayAnonWithErrorRequest& other) noexcept
      : MainProtocolTwoWayAnonWithErrorRequest(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonWithErrorRequest& operator=(
      const MainProtocolTwoWayAnonWithErrorRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolTwoWayAnonWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest, 8,
        8>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolTwoWayAnonWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest, 8,
        8>::Equal(this, &other);
  }

  uint32_t a() const { return storage_.a; }

  uint32_t& a() { return storage_.a; }

  uint32_t b() const { return storage_.b; }

  uint32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    uint32_t a{};
    uint32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::a, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::b, 4,
                                                                4});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayAnonTopResponseTable;

class MainProtocolTwoWayAnonTopResponse final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayAnonTopResponse(uint32_t a, uint32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  MainProtocolTwoWayAnonTopResponse()
      : MainProtocolTwoWayAnonTopResponse(Storage_{}) {}

  MainProtocolTwoWayAnonTopResponse(
      MainProtocolTwoWayAnonTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonTopResponse& operator=(
      MainProtocolTwoWayAnonTopResponse&&) noexcept = default;
  MainProtocolTwoWayAnonTopResponse(
      const MainProtocolTwoWayAnonTopResponse& other) noexcept
      : MainProtocolTwoWayAnonTopResponse(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonTopResponse& operator=(
      const MainProtocolTwoWayAnonTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolTwoWayAnonTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse, 8,
        8>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolTwoWayAnonTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse, 8,
        8>::Equal(this, &other);
  }

  uint32_t a() const { return storage_.a; }

  uint32_t& a() { return storage_.a; }

  uint32_t b() const { return storage_.b; }

  uint32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    uint32_t a{};
    uint32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::a, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::b, 4,
                                                                4});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayAnonRequestTable;

class MainProtocolTwoWayAnonRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayAnonRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayAnonRequest(uint32_t a, uint32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  MainProtocolTwoWayAnonRequest() : MainProtocolTwoWayAnonRequest(Storage_{}) {}

  MainProtocolTwoWayAnonRequest(MainProtocolTwoWayAnonRequest&&) noexcept =
      default;
  MainProtocolTwoWayAnonRequest& operator=(
      MainProtocolTwoWayAnonRequest&&) noexcept = default;
  MainProtocolTwoWayAnonRequest(
      const MainProtocolTwoWayAnonRequest& other) noexcept
      : MainProtocolTwoWayAnonRequest(other.CloneStorage_()) {}
  MainProtocolTwoWayAnonRequest& operator=(
      const MainProtocolTwoWayAnonRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const MainProtocolTwoWayAnonRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayAnonRequest, 8,
        8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolTwoWayAnonRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayAnonRequest, 8,
        8>::Equal(this, &other);
  }

  uint32_t a() const { return storage_.a; }

  uint32_t& a() { return storage_.a; }

  uint32_t b() const { return storage_.b; }

  uint32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    uint32_t a{};
    uint32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolTwoWayAnonRequest, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolTwoWayAnonRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::a, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::b, 4,
                                                                4});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOneWayAnonRequestTable;

class MainProtocolOneWayAnonRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOneWayAnonRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOneWayAnonRequest(uint32_t a, uint32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  MainProtocolOneWayAnonRequest() : MainProtocolOneWayAnonRequest(Storage_{}) {}

  MainProtocolOneWayAnonRequest(MainProtocolOneWayAnonRequest&&) noexcept =
      default;
  MainProtocolOneWayAnonRequest& operator=(
      MainProtocolOneWayAnonRequest&&) noexcept = default;
  MainProtocolOneWayAnonRequest(
      const MainProtocolOneWayAnonRequest& other) noexcept
      : MainProtocolOneWayAnonRequest(other.CloneStorage_()) {}
  MainProtocolOneWayAnonRequest& operator=(
      const MainProtocolOneWayAnonRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const MainProtocolOneWayAnonRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOneWayAnonRequest, 8,
        8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolOneWayAnonRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOneWayAnonRequest, 8,
        8>::Equal(this, &other);
  }

  uint32_t a() const { return storage_.a; }

  uint32_t& a() { return storage_.a; }

  uint32_t b() const { return storage_.b; }

  uint32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    uint32_t a{};
    uint32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolOneWayAnonRequest, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolOneWayAnonRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::a, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::b, 4,
                                                                4});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOnAnonRequestTable;

class MainProtocolOnAnonRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOnAnonRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOnAnonRequest(uint32_t a, uint32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  MainProtocolOnAnonRequest() : MainProtocolOnAnonRequest(Storage_{}) {}

  MainProtocolOnAnonRequest(MainProtocolOnAnonRequest&&) noexcept = default;
  MainProtocolOnAnonRequest& operator=(MainProtocolOnAnonRequest&&) noexcept =
      default;
  MainProtocolOnAnonRequest(const MainProtocolOnAnonRequest& other) noexcept
      : MainProtocolOnAnonRequest(other.CloneStorage_()) {}
  MainProtocolOnAnonRequest& operator=(
      const MainProtocolOnAnonRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const MainProtocolOnAnonRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOnAnonRequest, 8,
        8>::Equal(this, &other);
  }
  bool operator!=(const MainProtocolOnAnonRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOnAnonRequest, 8,
        8>::Equal(this, &other);
  }

  uint32_t a() const { return storage_.a; }

  uint32_t& a() { return storage_.a; }

  uint32_t b() const { return storage_.b; }

  uint32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    uint32_t a{};
    uint32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolOnAnonRequest, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolOnAnonRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::a, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::b, 4,
                                                                4});
};

extern "C" const fidl_type_t test_protocolpayloads_LocalStructPayloadTable;

class LocalStructPayload final {
 private:
  struct Storage_;

 public:
  LocalStructPayload(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  LocalStructPayload(uint32_t a, uint32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  LocalStructPayload() : LocalStructPayload(Storage_{}) {}

  LocalStructPayload(LocalStructPayload&&) noexcept = default;
  LocalStructPayload& operator=(LocalStructPayload&&) noexcept = default;
  LocalStructPayload(const LocalStructPayload& other) noexcept
      : LocalStructPayload(other.CloneStorage_()) {}
  LocalStructPayload& operator=(const LocalStructPayload& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const LocalStructPayload& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::LocalStructPayload, 8, 8>::Equal(this, &other);
  }
  bool operator!=(const LocalStructPayload& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::LocalStructPayload, 8, 8>::Equal(this, &other);
  }

  uint32_t a() const { return storage_.a; }

  uint32_t& a() { return storage_.a; }

  uint32_t b() const { return storage_.b; }

  uint32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    uint32_t a{};
    uint32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::LocalStructPayload, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::LocalStructPayload>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::a, 0,
                                                                0},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{&Storage_::b, 4,
                                                                4});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_TwoWayLocalWithError_ResultTable;

class MainProtocol_TwoWayLocalWithError_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_protocolpayloads::LocalStructPayload, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_TwoWayLocalWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_TwoWayLocalWithError_Result(
      MainProtocol_TwoWayLocalWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayLocalWithError_Result& operator=(
      MainProtocol_TwoWayLocalWithError_Result&&) noexcept = default;
  MainProtocol_TwoWayLocalWithError_Result(
      const MainProtocol_TwoWayLocalWithError_Result& other) noexcept
      : MainProtocol_TwoWayLocalWithError_Result(other.CloneStorage_()) {}
  MainProtocol_TwoWayLocalWithError_Result& operator=(
      const MainProtocol_TwoWayLocalWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_TwoWayLocalWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_TwoWayLocalWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result::
      Tag
      Which() const {
    return MainProtocol_TwoWayLocalWithError_Result::IndexToTag(
        storage_->index());
  }
  static MainProtocol_TwoWayLocalWithError_Result WithResponse(
      ::test_protocolpayloads::LocalStructPayload val) {
    return MainProtocol_TwoWayLocalWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_TwoWayLocalWithError_Result WithErr(uint32_t val) {
    return MainProtocol_TwoWayLocalWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 3>
      kMembers = {std::nullopt, std::nullopt, std::nullopt};

  explicit MainProtocol_TwoWayLocalWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result::Tag
          tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result::
          Tag::kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result::
          Tag::kErr:
        return 2;
    }
  }

  static constexpr ::test_protocolpayloads::
      MainProtocol_TwoWayLocalWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayLocalWithError_Result::Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayLocalWithError_Result::Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocolpayloads::
            MainProtocol_TwoWayLocalWithError_Result::Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayLocalWithErrorTopResponseTable;

class MainProtocolTwoWayLocalWithErrorTopResponse final {
 private:
  struct Storage_;

 public:
  MainProtocolTwoWayLocalWithErrorTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolTwoWayLocalWithErrorTopResponse(
      ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolTwoWayLocalWithErrorTopResponse()
      : MainProtocolTwoWayLocalWithErrorTopResponse(Storage_{}) {}

  MainProtocolTwoWayLocalWithErrorTopResponse(
      MainProtocolTwoWayLocalWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayLocalWithErrorTopResponse& operator=(
      MainProtocolTwoWayLocalWithErrorTopResponse&&) noexcept = default;
  MainProtocolTwoWayLocalWithErrorTopResponse(
      const MainProtocolTwoWayLocalWithErrorTopResponse& other) noexcept
      : MainProtocolTwoWayLocalWithErrorTopResponse(other.CloneStorage_()) {}
  MainProtocolTwoWayLocalWithErrorTopResponse& operator=(
      const MainProtocolTwoWayLocalWithErrorTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolTwoWayLocalWithErrorTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse,
        24, 16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolTwoWayLocalWithErrorTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse,
        24, 16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result&
  result() const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse, 24,
      16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result>{
          &Storage_::result, 0, 0});
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_OnLocalWithError_ResultTable;

class MainProtocol_OnLocalWithError_Result final {
 private:
  using Storage_ =
      cpp17::variant<cpp17::monostate,
                     ::test_protocolpayloads::LocalStructPayload, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  // Create an unknown value of this union.
  MainProtocol_OnLocalWithError_Result()
      : storage_(std::make_shared<Storage_>()) {}

  MainProtocol_OnLocalWithError_Result(
      MainProtocol_OnLocalWithError_Result&&) noexcept = default;
  MainProtocol_OnLocalWithError_Result& operator=(
      MainProtocol_OnLocalWithError_Result&&) noexcept = default;
  MainProtocol_OnLocalWithError_Result(
      const MainProtocol_OnLocalWithError_Result& other) noexcept
      : MainProtocol_OnLocalWithError_Result(other.CloneStorage_()) {}
  MainProtocol_OnLocalWithError_Result& operator=(
      const MainProtocol_OnLocalWithError_Result& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocol_OnLocalWithError_Result& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(
      const MainProtocol_OnLocalWithError_Result& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result::Tag
  Which() const {
    return MainProtocol_OnLocalWithError_Result::IndexToTag(storage_->index());
  }
  static MainProtocol_OnLocalWithError_Result WithResponse(
      ::test_protocolpayloads::LocalStructPayload val) {
    return MainProtocol_OnLocalWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> response() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> response() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static MainProtocol_OnLocalWithError_Result WithErr(uint32_t val) {
    return MainProtocol_OnLocalWithError_Result(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> err() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> err() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 3>
      kMembers = {std::nullopt, std::nullopt, std::nullopt};

  explicit MainProtocol_OnLocalWithError_Result(
      std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result::Tag tag) {
    switch (tag) {
      case ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result::Tag::
          kResponse:
        return 1;
      case ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result::Tag::
          kErr:
        return 2;
    }
  }

  static constexpr ::test_protocolpayloads::
      MainProtocol_OnLocalWithError_Result::Tag
      IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result::
            Tag::kResponse;
      case 2:
        return ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result::
            Tag::kErr;
      // TODO: what's the right thing to do here?
      default:
        return ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result::
            Tag::kResponse;
    }
  }
};

extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOnLocalWithErrorRequestTable;

class MainProtocolOnLocalWithErrorRequest final {
 private:
  struct Storage_;

 public:
  MainProtocolOnLocalWithErrorRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  MainProtocolOnLocalWithErrorRequest(
      ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result
          result) noexcept
      : storage_({.result = std::move(result)}) {}
  MainProtocolOnLocalWithErrorRequest()
      : MainProtocolOnLocalWithErrorRequest(Storage_{}) {}

  MainProtocolOnLocalWithErrorRequest(
      MainProtocolOnLocalWithErrorRequest&&) noexcept = default;
  MainProtocolOnLocalWithErrorRequest& operator=(
      MainProtocolOnLocalWithErrorRequest&&) noexcept = default;
  MainProtocolOnLocalWithErrorRequest(
      const MainProtocolOnLocalWithErrorRequest& other) noexcept
      : MainProtocolOnLocalWithErrorRequest(other.CloneStorage_()) {}
  MainProtocolOnLocalWithErrorRequest& operator=(
      const MainProtocolOnLocalWithErrorRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(
      const MainProtocolOnLocalWithErrorRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest, 24,
        16>::Equal(this, &other);
  }
  bool operator!=(
      const MainProtocolOnLocalWithErrorRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest, 24,
        16>::Equal(this, &other);
  }

  const ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result& result()
      const {
    return storage_.result;
  }

  ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result& result() {
    return storage_.result;
  }

 private:
  struct Storage_ final {
    ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result result{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest, 24, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_,
          ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result>{
          &Storage_::result, 0, 0});
};

}  // namespace test_protocolpayloads
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayImportWithErrorTopResponseTable;

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolTwoWayImportWithErrorTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse,
          24, 16> {};

template <>
struct HasPadding<
    ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorTopResponse>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_protocolpayloads::
                  MainProtocolTwoWayImportWithErrorTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocolpayloads::
                  MainProtocol_TwoWayImportWithError_Result>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_TwoWayAnonWithError_ResponseTable;

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocol_TwoWayAnonWithError_ResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response, 8,
          8> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Response>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocol_TwoWayAnonWithError_Response>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayAnonWithErrorTopResponseTable;

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolTwoWayAnonWithErrorTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse,
          24, 16> {};

template <>
struct HasPadding<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorTopResponse>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocolTwoWayAnonWithErrorTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocolpayloads::
                  MainProtocol_TwoWayAnonWithError_Result>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOnImportWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolOnImportWithErrorRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest,
                24, 16> {};

template <>
struct HasPadding<::test_protocolpayloads::MainProtocolOnImportWithErrorRequest>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolOnImportWithErrorRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocolOnImportWithErrorRequest>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocolpayloads::MainProtocol_OnImportWithError_Result>::
              value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocol_OnAnonWithError_ResponseTable;

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocol_OnAnonWithError_ResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response,
                8, 8> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocol_OnAnonWithError_Response>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocol_OnAnonWithError_Response>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOnAnonWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolOnAnonWithErrorRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest, 24, 16> {
};

template <>
struct HasPadding<::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolOnAnonWithErrorRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocolOnAnonWithErrorRequest>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result>::
              value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayAnonWithErrorRequestTable;

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolTwoWayAnonWithErrorRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest,
                8, 8> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocolTwoWayAnonWithErrorRequest>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayAnonTopResponseTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolTwoWayAnonTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse, 8, 8> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolTwoWayAnonTopResponse>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocolTwoWayAnonTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayAnonRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolTwoWayAnonRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolTwoWayAnonRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolTwoWayAnonRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolTwoWayAnonRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolpayloads::MainProtocolTwoWayAnonRequest, 8, 8> {
};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolTwoWayAnonRequest>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_protocolpayloads::MainProtocolTwoWayAnonRequest>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOneWayAnonRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOneWayAnonRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolOneWayAnonRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolOneWayAnonRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolOneWayAnonRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolpayloads::MainProtocolOneWayAnonRequest, 8, 8> {
};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolOneWayAnonRequest>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_protocolpayloads::MainProtocolOneWayAnonRequest>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOnAnonRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnAnonRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolOnAnonRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolOnAnonRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolOnAnonRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolpayloads::MainProtocolOnAnonRequest, 8, 8> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolOnAnonRequest>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_protocolpayloads::MainProtocolOnAnonRequest>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_protocolpayloads_LocalStructPayloadTable;

template <>
struct IsFidlType<::test_protocolpayloads::LocalStructPayload>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_protocolpayloads::LocalStructPayload>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_LocalStructPayloadTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::LocalStructPayload>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolpayloads::LocalStructPayload, 8, 8> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::LocalStructPayload>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::LocalStructPayload>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolTwoWayLocalWithErrorTopResponseTable;

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolTwoWayLocalWithErrorTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse,
          24, 16> {};

template <>
struct HasPadding<
    ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorTopResponse>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocolTwoWayLocalWithErrorTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocolpayloads::
                  MainProtocol_TwoWayLocalWithError_Result>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_protocolpayloads_MainProtocolOnLocalWithErrorRequestTable;

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_protocolpayloads_MainProtocolOnLocalWithErrorRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest,
                24, 16> {};

template <>
struct HasPadding<::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_protocolpayloads::MainProtocolOnLocalWithErrorRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_protocolpayloads::
                          MainProtocolOnLocalWithErrorRequest>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result>::
              value> {};

#endif  // __Fuchsia__

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<
    ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_protocolpayloads::MainProtocol_TwoWayImportWithError_Result> {
};

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_protocolpayloads::MainProtocol_TwoWayAnonWithError_Result> {};

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocol_OnImportWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocolpayloads::MainProtocol_OnImportWithError_Result>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocol_OnImportWithError_Result>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_protocolpayloads::MainProtocol_OnImportWithError_Result> {};

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocol_OnAnonWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocolpayloads::MainProtocol_OnAnonWithError_Result>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_protocolpayloads::MainProtocol_OnAnonWithError_Result> {
};

template <>
struct IsFidlType<
    ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<
    ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result>
    final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_protocolpayloads::MainProtocol_TwoWayLocalWithError_Result> {};

template <>
struct IsFidlType<::test_protocolpayloads::MainProtocol_OnLocalWithError_Result>
    : public std::true_type {};
template <>
struct IsUnion<::test_protocolpayloads::MainProtocol_OnLocalWithError_Result>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_protocolpayloads::MainProtocol_OnLocalWithError_Result> {
};

}  // namespace fidl
