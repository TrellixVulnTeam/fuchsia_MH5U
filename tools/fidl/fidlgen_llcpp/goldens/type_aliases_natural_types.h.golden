// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.typealiases/cpp/common_types.h>
#include <fidl/test.typealiases/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.someotherlibrary/cpp/natural_types.h>

namespace test_typealiases {
class ExampleOfUseOfAliases;

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_typealiases_ExampleOfUseOfAliasesTable;

class ExampleOfUseOfAliases final {
 private:
  struct Storage_;

 public:
  ExampleOfUseOfAliases(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleOfUseOfAliases(
      uint32_t field_of_u32,
      ::std::vector<::std::string> field_of_vec_of_strings,
      ::std::vector<::std::string> field_of_vec_of_strings_at_most_nine,
      ::std::vector<::std::string> field_of_vec_of_strings_at_most_5,
      ::std::vector<::test_someotherlibrary::ReferenceMe>
          field_of_vec_of_ref_me_at_most_5,
      ::zx::channel field_of_channel, ::zx::channel field_of_client_end,
      ::zx::channel field_of_nullable_client_end) noexcept
      : storage_({.field_of_u32 = std::move(field_of_u32),
                  .field_of_vec_of_strings = std::move(field_of_vec_of_strings),
                  .field_of_vec_of_strings_at_most_nine =
                      std::move(field_of_vec_of_strings_at_most_nine),
                  .field_of_vec_of_strings_at_most_5 =
                      std::move(field_of_vec_of_strings_at_most_5),
                  .field_of_vec_of_ref_me_at_most_5 =
                      std::move(field_of_vec_of_ref_me_at_most_5),
                  .field_of_channel = std::move(field_of_channel),
                  .field_of_client_end = std::move(field_of_client_end),
                  .field_of_nullable_client_end =
                      std::move(field_of_nullable_client_end)}) {}
  ExampleOfUseOfAliases() : ExampleOfUseOfAliases(Storage_{}) {}

  ExampleOfUseOfAliases(ExampleOfUseOfAliases&&) noexcept = default;
  ExampleOfUseOfAliases& operator=(ExampleOfUseOfAliases&&) noexcept = default;

  uint32_t field_of_u32() const { return storage_.field_of_u32; }

  uint32_t& field_of_u32() { return storage_.field_of_u32; }

  const ::std::vector<::std::string>& field_of_vec_of_strings() const {
    return storage_.field_of_vec_of_strings;
  }

  ::std::vector<::std::string>& field_of_vec_of_strings() {
    return storage_.field_of_vec_of_strings;
  }

  const ::std::vector<::std::string>& field_of_vec_of_strings_at_most_nine()
      const {
    return storage_.field_of_vec_of_strings_at_most_nine;
  }

  ::std::vector<::std::string>& field_of_vec_of_strings_at_most_nine() {
    return storage_.field_of_vec_of_strings_at_most_nine;
  }

  const ::std::vector<::std::string>& field_of_vec_of_strings_at_most_5()
      const {
    return storage_.field_of_vec_of_strings_at_most_5;
  }

  ::std::vector<::std::string>& field_of_vec_of_strings_at_most_5() {
    return storage_.field_of_vec_of_strings_at_most_5;
  }

  const ::std::vector<::test_someotherlibrary::ReferenceMe>&
  field_of_vec_of_ref_me_at_most_5() const {
    return storage_.field_of_vec_of_ref_me_at_most_5;
  }

  ::std::vector<::test_someotherlibrary::ReferenceMe>&
  field_of_vec_of_ref_me_at_most_5() {
    return storage_.field_of_vec_of_ref_me_at_most_5;
  }

  const ::zx::channel& field_of_channel() const {
    return storage_.field_of_channel;
  }

  ::zx::channel& field_of_channel() { return storage_.field_of_channel; }

  const ::zx::channel& field_of_client_end() const {
    return storage_.field_of_client_end;
  }

  ::zx::channel& field_of_client_end() { return storage_.field_of_client_end; }

  const ::zx::channel& field_of_nullable_client_end() const {
    return storage_.field_of_nullable_client_end;
  }

  ::zx::channel& field_of_nullable_client_end() {
    return storage_.field_of_nullable_client_end;
  }

 private:
  struct Storage_ final {
    uint32_t field_of_u32{};
    ::std::vector<::std::string> field_of_vec_of_strings{};
    ::std::vector<::std::string> field_of_vec_of_strings_at_most_nine{};
    ::std::vector<::std::string> field_of_vec_of_strings_at_most_5{};
    ::std::vector<::test_someotherlibrary::ReferenceMe>
        field_of_vec_of_ref_me_at_most_5{};
    ::zx::channel field_of_channel{};
    ::zx::channel field_of_client_end{};
    ::zx::channel field_of_nullable_client_end{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_typealiases::ExampleOfUseOfAliases, 88, 88>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_typealiases::ExampleOfUseOfAliases>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::field_of_u32, 0, 0},
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::std::vector<::std::string>>{
          &Storage_::field_of_vec_of_strings, 8, 8},
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::std::vector<::std::string>>{
          &Storage_::field_of_vec_of_strings_at_most_nine, 24, 24},
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::std::vector<::std::string>>{
          &Storage_::field_of_vec_of_strings_at_most_5, 40, 40},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::std::vector<::test_someotherlibrary::ReferenceMe>>{
          &Storage_::field_of_vec_of_ref_me_at_most_5, 56, 56},
      ::fidl::internal::NaturalStructMember<Storage_, ::zx::channel>{
          &Storage_::field_of_channel, 72, 72,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_CHANNEL, .rights = 0x80000000})},
      ::fidl::internal::NaturalStructMember<Storage_, ::zx::channel>{
          &Storage_::field_of_client_end, 76, 76,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_CHANNEL, .rights = 0x80000000})},
      ::fidl::internal::NaturalStructMember<Storage_, ::zx::channel>{
          &Storage_::field_of_nullable_client_end, 80, 80,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_CHANNEL, .rights = 0x80000000})});
};

#endif  // __Fuchsia__

}  // namespace test_typealiases
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_typealiases_ExampleOfUseOfAliasesTable;

template <>
struct IsResource<::test_typealiases::ExampleOfUseOfAliases>
    : public std::true_type {};
template <>
struct IsFidlType<::test_typealiases::ExampleOfUseOfAliases>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_typealiases::ExampleOfUseOfAliases>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_typealiases_ExampleOfUseOfAliasesTable;
};

template <>
struct internal::NaturalCodingTraits<::test_typealiases::ExampleOfUseOfAliases>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_typealiases::ExampleOfUseOfAliases, 88, 88> {};

template <>
struct HasPadding<::test_typealiases::ExampleOfUseOfAliases>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_typealiases::ExampleOfUseOfAliases>
    : public internal::BoolConstant<
          !HasPadding<::test_typealiases::ExampleOfUseOfAliases>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::vector<::std::string>>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::vector<::test_someotherlibrary::ReferenceMe>>::value &&
          internal::NaturalIsMemcpyCompatible<::zx::channel>::value> {};

#endif  // __Fuchsia__

template <>
struct internal::NaturalCodingTraits<::test_typealiases::obj_type> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_typealiases::obj_type* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_typealiases::obj_type>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_typealiases::obj_type* value, size_t offset) {
    *value = *decoder->template GetPtr<::test_typealiases::obj_type>(offset);
  }
};

}  // namespace fidl
