// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.error/cpp/natural_messaging.h>

namespace test_error {
[[maybe_unused]] constexpr inline uint64_t kExample_foo_Ordinal =
    1107623248440401476lu;

#ifdef __Fuchsia__
}  // namespace test_error
void fidl::internal::NaturalClientImpl<::test_error::Example>::Foo(
    ::test_error::ExampleFooRequest&& payload,
    ::fidl::ClientCallback<::test_error::Example::Foo>&& _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_error::kExample_foo_Ordinal};
  return messenger().TwoWay(
      &::test_error::test_error_ExampleFooRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_error::Example::Foo>,
          ::fidl::ClientCallback<::test_error::Example::Foo>>(
          ::test_error::kExample_foo_Ordinal, std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_error::Example>::Foo(
    ::test_error::ExampleFooRequest&& payload,
    ::fidl::ClientResponseCallback<::test_error::Example::Foo>&& _callback)
    const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_error::kExample_foo_Ordinal};
  return messenger().TwoWay(
      &::test_error::test_error_ExampleFooRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_error::Example::Foo>,
          ::fidl::ClientResponseCallback<::test_error::Example::Foo>>(
          ::test_error::kExample_foo_Ordinal, std::move(_callback)));
}
namespace test_error {
#endif  // __Fuchsia__

}  // namespace test_error
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo>
fidl::internal::NaturalEventDispatcher<::test_error::Example>::DispatchEvent(
    ::fidl::IncomingMessage& msg,
    ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::NaturalCompleterBase<::test_error::Example::Foo>::Reply(
    ::test_error::ExampleFooTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_error::kExample_foo_Ordinal};
  _messenger.SendReply(
      &::test_error::test_error_ExampleFooTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_error::Example>::entries_[] = {
    {
        ::test_error::kExample_foo_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<::fidl::Error,
                         ::fidl::Request<::test_error::Example::Foo>>
              decoded = ::fidl::Request<::test_error::Example::Foo>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<::test_error::Example::Foo>::Sync
              completer(txn);
          static_cast<::fidl::Server<::test_error::Example>*>(interface)->Foo(
              decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_error::Example>::entries_end_ = &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_error::Example>::Dispatch(
    ::fidl::Server<::test_error::Example>* impl, ::fidl::IncomingMessage&& msg,
    internal::IncomingTransportContext transport_context,
    ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_error::Example>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<::test_error::Example>::Dispatch(
      this, std::move(msg), std::move(transport_context), txn);
}
#endif  // __Fuchsia__
