// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/message_storage.h>
#include <lib/fidl/llcpp/object_view.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/wire_types.h>
#include <lib/stdcompat/optional.h>

#include <cinttypes>
#ifdef __Fuchsia__
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.versions/cpp/common_types.h>
#include <fidl/test.versions/cpp/markers.h>

namespace test_versions {
namespace wire {
using Bits = ::test_versions::Bits;

using Enum = ::test_versions::Enum;

struct Struct;

class Table;

class Union;

extern "C" const fidl_type_t test_versions_StructTable;

struct Struct {
  uint32_t x = {};
};

}  // namespace wire
}  // namespace test_versions
template <>
struct ::fidl::WireTableFrame<::test_versions::wire::Table> final {
 public:
  WireTableFrame() = default;
  // In its intended usage, WireTableFrame will be referenced by an ObjectView.
  // If the ObjectView is assigned before a move or copy, then it will reference
  // the old invalid object. Because this is unsafe, copies are disallowed and
  // moves are only allowed by friend classes that operate safely.
  WireTableFrame(const WireTableFrame&) = delete;
  WireTableFrame& operator=(const WireTableFrame&) = delete;

 private:
  WireTableFrame(WireTableFrame&&) noexcept = default;
  WireTableFrame& operator=(WireTableFrame&&) noexcept = default;

  bool HasUnknownData() const;
  ::fidl::Envelope<uint32_t> x_;

  friend class ::test_versions::wire::Table;
};

namespace test_versions {
namespace wire {
extern "C" const fidl_type_t test_versions_TableTable;

class Table final {
 public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  // Returns whether the table references unknown fields.
  bool HasUnknownData() const;

  const uint32_t& x() const {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }
  uint32_t& x() {
    ZX_ASSERT(has_x());
    return frame_ptr_->x_.get_data();
  }
  bool has_x() const { return max_ordinal_ >= 1 && frame_ptr_->x_.has_data(); }
  Table& set_x(uint32_t elem) {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.set_data(std::move(elem));
    max_ordinal_ = std::max(max_ordinal_, static_cast<uint64_t>(1));
    return *this;
  }

  Table& clear_x() {
    ZX_DEBUG_ASSERT(frame_ptr_ != nullptr);
    frame_ptr_->x_.clear_data();
    return *this;
  }

  Table() = default;
  explicit Table(::fidl::AnyArena& allocator)
      : frame_ptr_(::fidl::ObjectView<
                   ::fidl::WireTableFrame<::test_versions::wire::Table>>(
            allocator)) {}
  // This constructor allows a user controlled allocation (not using a Arena).
  // It should only be used when performance is key.
  // As soon as the frame is given to the table, it must not be used directly or
  // for another table.
  explicit Table(
      ::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>&&
          frame)
      : frame_ptr_(std::move(frame)) {}
  ~Table() = default;
  Table(const Table& other) noexcept = default;
  Table& operator=(const Table& other) noexcept = default;
  Table(Table&& other) noexcept = default;
  Table& operator=(Table&& other) noexcept = default;

  void Allocate(::fidl::AnyArena& allocator) {
    max_ordinal_ = 0;
    frame_ptr_ = ::fidl::ObjectView<
        ::fidl::WireTableFrame<::test_versions::wire::Table>>(allocator);
  }
  void Init(
      ::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>&&
          frame_ptr) {
    max_ordinal_ = 0;
    frame_ptr_ = std::move(frame_ptr);
  }

 private:
  uint64_t max_ordinal_ = 0;
  ::fidl::ObjectView<::fidl::WireTableFrame<::test_versions::wire::Table>>
      frame_ptr_;
};

extern "C" const fidl_type_t test_versions_UnionTable;

class Union {
 public:
  Union()
      : ordinal_(::test_versions::wire::Union::Ordinal::Invalid), envelope_ {}
  {}

  Union(const Union&) = default;
  Union& operator=(const Union&) = default;
  Union(Union&&) = default;
  Union& operator=(Union&&) = default;

  enum class Tag : fidl_xunion_tag_t {
    kX = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const {
    return ordinal_ == ::test_versions::wire::Union::Ordinal::Invalid;
  }

  bool is_x() const {
    return ordinal_ == ::test_versions::wire::Union::Ordinal::kX;
  }
  static Union WithX(uint32_t val) {
    Union result;
    result.set_x(std::move(val));
    return result;
  }

  void set_x(uint32_t elem) {
    ordinal_ = ::test_versions::wire::Union::Ordinal::kX;
    envelope_.As<uint32_t>().set_data(std::move(elem));
  }

  uint32_t& x() {
    ZX_ASSERT(ordinal_ == ::test_versions::wire::Union::Ordinal::kX);
    return envelope_.As<uint32_t>().get_data();
  }
  const uint32_t& x() const {
    ZX_ASSERT(ordinal_ == ::test_versions::wire::Union::Ordinal::kX);
    return envelope_.As<uint32_t>().get_data();
  }
  ::test_versions::wire::Union::Tag Which() const;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kX = 1,  // 0x1
  };

  static void SizeAndOffsetAssertionHelper();
  ::test_versions::wire::Union::Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::UntypedEnvelope envelope_;
};

constexpr uint32_t kConst = 0u;

}  // namespace wire
}  // namespace test_versions
namespace fidl {

template <>
struct TypeTraits<::test_versions::wire::Struct> {
  static constexpr const fidl_type_t* kType =
      &::test_versions::wire::test_versions_StructTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 4;
  static constexpr uint32_t kPrimarySizeV1 = 4;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasPointer = false;
};

template <>
struct IsFidlType<::test_versions::wire::Struct> : public std::true_type {};
template <>
struct IsStruct<::test_versions::wire::Struct> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_versions::wire::Struct>);
static_assert(offsetof(::test_versions::wire::Struct, x) == 0);
static_assert(sizeof(::test_versions::wire::Struct) ==
              TypeTraits<::test_versions::wire::Struct>::kPrimarySize);

template <>
struct TypeTraits<::test_versions::wire::Table> {
  static constexpr const fidl_type_t* kType =
      &::test_versions::wire::test_versions_TableTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 16;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 8;
  static constexpr uint32_t kMaxOutOfLineV1 = 24;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_versions::wire::Table> : public std::true_type {};
template <>
struct IsTable<::test_versions::wire::Table> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_versions::wire::Table>);

template <>
struct TypeTraits<::test_versions::wire::Union> {
  static constexpr const fidl_type_t* kType =
      &::test_versions::wire::test_versions_UnionTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = 16;
  static constexpr uint32_t kPrimarySizeV1 = 24;
  [[maybe_unused]] static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 8;
  static constexpr bool kHasPointer = true;
};

template <>
struct IsFidlType<::test_versions::wire::Union> : public std::true_type {};
template <>
struct IsUnion<::test_versions::wire::Union> : public std::true_type {};
static_assert(std::is_standard_layout_v<::test_versions::wire::Union>);

}  // namespace fidl
