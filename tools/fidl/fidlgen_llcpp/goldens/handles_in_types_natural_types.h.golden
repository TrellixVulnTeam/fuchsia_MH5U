// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.handlesintypes/cpp/common_types.h>
#include <fidl/test.handlesintypes/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/vmo.h>

#endif  // __Fuchsia__

namespace test_handlesintypes {
class HandlesInTypes;

class TableWithHandle;

class UnionWithHandle;

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_handlesintypes_UnionWithHandleTable;

class UnionWithHandle final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, ::zx::vmo>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kH = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  UnionWithHandle() : storage_(std::make_shared<Storage_>()) {}

  UnionWithHandle(UnionWithHandle&&) noexcept = default;
  UnionWithHandle& operator=(UnionWithHandle&&) noexcept = default;

  constexpr ::test_handlesintypes::UnionWithHandle::Tag Which() const {
    return UnionWithHandle::IndexToTag(storage_->index());
  }
  static UnionWithHandle WithH(::zx::vmo val) {
    return UnionWithHandle(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> h() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> h() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_handlesintypes::UnionWithHandle>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {
          std::nullopt,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})};

  explicit UnionWithHandle(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_handlesintypes::UnionWithHandle::Tag tag) {
    switch (tag) {
      case ::test_handlesintypes::UnionWithHandle::Tag::kH:
        return 1;
      case ::test_handlesintypes::UnionWithHandle::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_handlesintypes::UnionWithHandle::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_handlesintypes::UnionWithHandle::Tag::kH;
      default:
        return ::test_handlesintypes::UnionWithHandle::Tag::kUnknown;
    }
  }
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_handlesintypes_TableWithHandleTable;

class TableWithHandle final {
 private:
  struct Storage_;

 public:
  TableWithHandle(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  TableWithHandle() noexcept = default;
  TableWithHandle(TableWithHandle&&) noexcept = default;
  TableWithHandle& operator=(TableWithHandle&&) noexcept = default;

  bool IsEmpty() const { return !(storage_.h.has_value()); }

  const cpp17::optional<::zx::vmo>& h() const { return storage_.h; }
  ::cpp17::optional<::zx::vmo>& h() { return storage_.h; }

 private:
  struct Storage_ final {
    ::cpp17::optional<::zx::vmo> h{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_handlesintypes::TableWithHandle>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_handlesintypes::TableWithHandle>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, ::zx::vmo>{
          1, &Storage_::h,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})});
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_handlesintypes_HandlesInTypesTable;

class HandlesInTypes final {
 private:
  struct Storage_;

 public:
  HandlesInTypes(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  HandlesInTypes(
      ::zx::vmo normal_handle, ::std::vector<::zx::vmo> handle_in_vec,
      ::std::array<::zx::vmo, 5> handle_in_array,
      ::std::vector<::std::array<::zx::vmo, 5>> handle_in_mixed_vec_array,
      ::test_handlesintypes::TableWithHandle table_with_handle,
      ::test_handlesintypes::UnionWithHandle union_with_handle) noexcept
      : storage_(
            {.normal_handle = std::move(normal_handle),
             .handle_in_vec = std::move(handle_in_vec),
             .handle_in_array = std::move(handle_in_array),
             .handle_in_mixed_vec_array = std::move(handle_in_mixed_vec_array),
             .table_with_handle = std::move(table_with_handle),
             .union_with_handle = std::move(union_with_handle)}) {}
  HandlesInTypes() : HandlesInTypes(Storage_{}) {}

  HandlesInTypes(HandlesInTypes&&) noexcept = default;
  HandlesInTypes& operator=(HandlesInTypes&&) noexcept = default;

  const ::zx::vmo& normal_handle() const { return storage_.normal_handle; }

  ::zx::vmo& normal_handle() { return storage_.normal_handle; }

  const ::std::vector<::zx::vmo>& handle_in_vec() const {
    return storage_.handle_in_vec;
  }

  ::std::vector<::zx::vmo>& handle_in_vec() { return storage_.handle_in_vec; }

  const ::std::array<::zx::vmo, 5>& handle_in_array() const {
    return storage_.handle_in_array;
  }

  ::std::array<::zx::vmo, 5>& handle_in_array() {
    return storage_.handle_in_array;
  }

  const ::std::vector<::std::array<::zx::vmo, 5>>& handle_in_mixed_vec_array()
      const {
    return storage_.handle_in_mixed_vec_array;
  }

  ::std::vector<::std::array<::zx::vmo, 5>>& handle_in_mixed_vec_array() {
    return storage_.handle_in_mixed_vec_array;
  }

  const ::test_handlesintypes::TableWithHandle& table_with_handle() const {
    return storage_.table_with_handle;
  }

  ::test_handlesintypes::TableWithHandle& table_with_handle() {
    return storage_.table_with_handle;
  }

  const ::test_handlesintypes::UnionWithHandle& union_with_handle() const {
    return storage_.union_with_handle;
  }

  ::test_handlesintypes::UnionWithHandle& union_with_handle() {
    return storage_.union_with_handle;
  }

 private:
  struct Storage_ final {
    ::zx::vmo normal_handle{};
    ::std::vector<::zx::vmo> handle_in_vec{};
    ::std::array<::zx::vmo, 5> handle_in_array{};
    ::std::vector<::std::array<::zx::vmo, 5>> handle_in_mixed_vec_array{};
    ::test_handlesintypes::TableWithHandle table_with_handle{};
    ::test_handlesintypes::UnionWithHandle union_with_handle{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_handlesintypes::HandlesInTypes, 104, 96>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_handlesintypes::HandlesInTypes>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, ::zx::vmo>{
          &Storage_::normal_handle, 0, 0,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})},
      ::fidl::internal::NaturalStructMember<Storage_, ::std::vector<::zx::vmo>>{
          &Storage_::handle_in_vec, 8, 8,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})},
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::std::array<::zx::vmo, 5>>{
          &Storage_::handle_in_array, 24, 24,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::std::vector<::std::array<::zx::vmo, 5>>>{
          &Storage_::handle_in_mixed_vec_array, 48, 48,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_handlesintypes::TableWithHandle>{
          &Storage_::table_with_handle, 64, 64},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_handlesintypes::UnionWithHandle>{
          &Storage_::union_with_handle, 80, 80});
};

#endif  // __Fuchsia__

}  // namespace test_handlesintypes
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_handlesintypes_HandlesInTypesTable;

template <>
struct IsResource<::test_handlesintypes::HandlesInTypes>
    : public std::true_type {};
template <>
struct IsFidlType<::test_handlesintypes::HandlesInTypes>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_handlesintypes::HandlesInTypes>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_handlesintypes_HandlesInTypesTable;
};

template <>
struct internal::NaturalCodingTraits<::test_handlesintypes::HandlesInTypes>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_handlesintypes::HandlesInTypes, 104, 96> {};

template <>
struct HasPadding<::test_handlesintypes::HandlesInTypes>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_handlesintypes::HandlesInTypes>
    : public internal::BoolConstant<
          !HasPadding<::test_handlesintypes::HandlesInTypes>::value &&
          internal::NaturalIsMemcpyCompatible<::zx::vmo>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::vector<::zx::vmo>>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::array<::zx::vmo, 5>>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::vector<::std::array<::zx::vmo, 5>>>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_handlesintypes::TableWithHandle>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_handlesintypes::UnionWithHandle>::value> {};

#endif  // __Fuchsia__

template <>
struct IsResource<::test_handlesintypes::TableWithHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::test_handlesintypes::TableWithHandle>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_handlesintypes::TableWithHandle>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_handlesintypes::TableWithHandle> {};

template <>
struct IsResource<::test_handlesintypes::UnionWithHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::test_handlesintypes::UnionWithHandle>
    : public std::true_type {};
template <>
struct IsUnion<::test_handlesintypes::UnionWithHandle> : public std::true_type {
};

template <>
struct internal::NaturalCodingTraits<::test_handlesintypes::UnionWithHandle>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_handlesintypes::UnionWithHandle> {};

template <>
struct internal::NaturalCodingTraits<::test_handlesintypes::obj_type> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_handlesintypes::obj_type* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_handlesintypes::obj_type>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_handlesintypes::obj_type* value, size_t offset) {
    *value = *decoder->template GetPtr<::test_handlesintypes::obj_type>(offset);
  }
};

}  // namespace fidl
