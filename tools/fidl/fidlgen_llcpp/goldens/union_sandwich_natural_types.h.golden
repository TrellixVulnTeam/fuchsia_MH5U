// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.unionsandwich/cpp/common_types.h>
#include <fidl/test.unionsandwich/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_unionsandwich {
class SandwichUnionSize8Alignment4;

class SandwichUnionSize36Alignment4;

class SandwichUnionSize12Alignment4;

class StructSize16Alignment8;

class SandwichUnionSize24Alignment8;

class UnionSize8Alignment4;

class UnionSize36Alignment4;

class UnionSize12Alignment4;

class UnionSize24Alignment8;

extern "C" const fidl_type_t test_unionsandwich_UnionSize8Alignment4Table;

class UnionSize8Alignment4 final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kVariant = 1,  // 0x1
  };

  // Create an unknown value of this union.
  UnionSize8Alignment4() : storage_(std::make_shared<Storage_>()) {}

  UnionSize8Alignment4(UnionSize8Alignment4&&) noexcept = default;
  UnionSize8Alignment4& operator=(UnionSize8Alignment4&&) noexcept = default;
  UnionSize8Alignment4(const UnionSize8Alignment4& other) noexcept
      : UnionSize8Alignment4(other.CloneStorage_()) {}
  UnionSize8Alignment4& operator=(const UnionSize8Alignment4& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const UnionSize8Alignment4& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const UnionSize8Alignment4& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_unionsandwich::UnionSize8Alignment4::Tag Which() const {
    return UnionSize8Alignment4::IndexToTag(storage_->index());
  }
  static UnionSize8Alignment4 WithVariant(uint32_t val) {
    return UnionSize8Alignment4(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> variant() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> variant() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_unionsandwich::UnionSize8Alignment4>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit UnionSize8Alignment4(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_unionsandwich::UnionSize8Alignment4::Tag tag) {
    switch (tag) {
      case ::test_unionsandwich::UnionSize8Alignment4::Tag::kVariant:
        return 1;
    }
  }

  static constexpr ::test_unionsandwich::UnionSize8Alignment4::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_unionsandwich::UnionSize8Alignment4::Tag::kVariant;
      // TODO: what's the right thing to do here?
      default:
        return ::test_unionsandwich::UnionSize8Alignment4::Tag::kVariant;
    }
  }
};

extern "C" const fidl_type_t
    test_unionsandwich_SandwichUnionSize8Alignment4Table;

class SandwichUnionSize8Alignment4 final {
 private:
  struct Storage_;

 public:
  SandwichUnionSize8Alignment4(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SandwichUnionSize8Alignment4(
      uint32_t before, ::test_unionsandwich::UnionSize8Alignment4 union_,
      uint32_t after) noexcept
      : storage_({.before = std::move(before),
                  .union_ = std::move(union_),
                  .after = std::move(after)}) {}
  SandwichUnionSize8Alignment4() : SandwichUnionSize8Alignment4(Storage_{}) {}

  SandwichUnionSize8Alignment4(SandwichUnionSize8Alignment4&&) noexcept =
      default;
  SandwichUnionSize8Alignment4& operator=(
      SandwichUnionSize8Alignment4&&) noexcept = default;
  SandwichUnionSize8Alignment4(
      const SandwichUnionSize8Alignment4& other) noexcept
      : SandwichUnionSize8Alignment4(other.CloneStorage_()) {}
  SandwichUnionSize8Alignment4& operator=(
      const SandwichUnionSize8Alignment4& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SandwichUnionSize8Alignment4& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::SandwichUnionSize8Alignment4, 40,
        32>::Equal(this, &other);
  }
  bool operator!=(const SandwichUnionSize8Alignment4& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::SandwichUnionSize8Alignment4, 40,
        32>::Equal(this, &other);
  }

  uint32_t before() const { return storage_.before; }

  uint32_t& before() { return storage_.before; }

  const ::test_unionsandwich::UnionSize8Alignment4& union_() const {
    return storage_.union_;
  }

  ::test_unionsandwich::UnionSize8Alignment4& union_() {
    return storage_.union_;
  }

  uint32_t after() const { return storage_.after; }

  uint32_t& after() { return storage_.after; }

 private:
  struct Storage_ final {
    uint32_t before{};
    ::test_unionsandwich::UnionSize8Alignment4 union_{};
    uint32_t after{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_unionsandwich::SandwichUnionSize8Alignment4, 40, 32>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_unionsandwich::SandwichUnionSize8Alignment4>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::before, 0, 0},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_unionsandwich::UnionSize8Alignment4>{
          &Storage_::union_, 8, 8},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::after, 32, 24});
};

extern "C" const fidl_type_t test_unionsandwich_UnionSize36Alignment4Table;

class UnionSize36Alignment4 final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, ::std::array<uint8_t, 32>>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kVariant = 1,  // 0x1
  };

  // Create an unknown value of this union.
  UnionSize36Alignment4() : storage_(std::make_shared<Storage_>()) {}

  UnionSize36Alignment4(UnionSize36Alignment4&&) noexcept = default;
  UnionSize36Alignment4& operator=(UnionSize36Alignment4&&) noexcept = default;
  UnionSize36Alignment4(const UnionSize36Alignment4& other) noexcept
      : UnionSize36Alignment4(other.CloneStorage_()) {}
  UnionSize36Alignment4& operator=(
      const UnionSize36Alignment4& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const UnionSize36Alignment4& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const UnionSize36Alignment4& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_unionsandwich::UnionSize36Alignment4::Tag Which() const {
    return UnionSize36Alignment4::IndexToTag(storage_->index());
  }
  static UnionSize36Alignment4 WithVariant(::std::array<uint8_t, 32> val) {
    return UnionSize36Alignment4(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> variant() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> variant() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_unionsandwich::UnionSize36Alignment4>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit UnionSize36Alignment4(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_unionsandwich::UnionSize36Alignment4::Tag tag) {
    switch (tag) {
      case ::test_unionsandwich::UnionSize36Alignment4::Tag::kVariant:
        return 1;
    }
  }

  static constexpr ::test_unionsandwich::UnionSize36Alignment4::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_unionsandwich::UnionSize36Alignment4::Tag::kVariant;
      // TODO: what's the right thing to do here?
      default:
        return ::test_unionsandwich::UnionSize36Alignment4::Tag::kVariant;
    }
  }
};

extern "C" const fidl_type_t
    test_unionsandwich_SandwichUnionSize36Alignment4Table;

class SandwichUnionSize36Alignment4 final {
 private:
  struct Storage_;

 public:
  SandwichUnionSize36Alignment4(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SandwichUnionSize36Alignment4(
      uint32_t before, ::test_unionsandwich::UnionSize36Alignment4 union_,
      uint32_t after) noexcept
      : storage_({.before = std::move(before),
                  .union_ = std::move(union_),
                  .after = std::move(after)}) {}
  SandwichUnionSize36Alignment4() : SandwichUnionSize36Alignment4(Storage_{}) {}

  SandwichUnionSize36Alignment4(SandwichUnionSize36Alignment4&&) noexcept =
      default;
  SandwichUnionSize36Alignment4& operator=(
      SandwichUnionSize36Alignment4&&) noexcept = default;
  SandwichUnionSize36Alignment4(
      const SandwichUnionSize36Alignment4& other) noexcept
      : SandwichUnionSize36Alignment4(other.CloneStorage_()) {}
  SandwichUnionSize36Alignment4& operator=(
      const SandwichUnionSize36Alignment4& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SandwichUnionSize36Alignment4& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::SandwichUnionSize36Alignment4, 40,
        32>::Equal(this, &other);
  }
  bool operator!=(const SandwichUnionSize36Alignment4& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::SandwichUnionSize36Alignment4, 40,
        32>::Equal(this, &other);
  }

  uint32_t before() const { return storage_.before; }

  uint32_t& before() { return storage_.before; }

  const ::test_unionsandwich::UnionSize36Alignment4& union_() const {
    return storage_.union_;
  }

  ::test_unionsandwich::UnionSize36Alignment4& union_() {
    return storage_.union_;
  }

  uint32_t after() const { return storage_.after; }

  uint32_t& after() { return storage_.after; }

 private:
  struct Storage_ final {
    uint32_t before{};
    ::test_unionsandwich::UnionSize36Alignment4 union_{};
    uint32_t after{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_unionsandwich::SandwichUnionSize36Alignment4, 40, 32>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_unionsandwich::SandwichUnionSize36Alignment4>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::before, 0, 0},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_unionsandwich::UnionSize36Alignment4>{
          &Storage_::union_, 8, 8},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::after, 32, 24});
};

extern "C" const fidl_type_t test_unionsandwich_UnionSize12Alignment4Table;

class UnionSize12Alignment4 final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, ::std::array<uint8_t, 6>>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kVariant = 1,  // 0x1
  };

  // Create an unknown value of this union.
  UnionSize12Alignment4() : storage_(std::make_shared<Storage_>()) {}

  UnionSize12Alignment4(UnionSize12Alignment4&&) noexcept = default;
  UnionSize12Alignment4& operator=(UnionSize12Alignment4&&) noexcept = default;
  UnionSize12Alignment4(const UnionSize12Alignment4& other) noexcept
      : UnionSize12Alignment4(other.CloneStorage_()) {}
  UnionSize12Alignment4& operator=(
      const UnionSize12Alignment4& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const UnionSize12Alignment4& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const UnionSize12Alignment4& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_unionsandwich::UnionSize12Alignment4::Tag Which() const {
    return UnionSize12Alignment4::IndexToTag(storage_->index());
  }
  static UnionSize12Alignment4 WithVariant(::std::array<uint8_t, 6> val) {
    return UnionSize12Alignment4(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> variant() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> variant() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_unionsandwich::UnionSize12Alignment4>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit UnionSize12Alignment4(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_unionsandwich::UnionSize12Alignment4::Tag tag) {
    switch (tag) {
      case ::test_unionsandwich::UnionSize12Alignment4::Tag::kVariant:
        return 1;
    }
  }

  static constexpr ::test_unionsandwich::UnionSize12Alignment4::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_unionsandwich::UnionSize12Alignment4::Tag::kVariant;
      // TODO: what's the right thing to do here?
      default:
        return ::test_unionsandwich::UnionSize12Alignment4::Tag::kVariant;
    }
  }
};

extern "C" const fidl_type_t
    test_unionsandwich_SandwichUnionSize12Alignment4Table;

class SandwichUnionSize12Alignment4 final {
 private:
  struct Storage_;

 public:
  SandwichUnionSize12Alignment4(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SandwichUnionSize12Alignment4(
      uint32_t before, ::test_unionsandwich::UnionSize12Alignment4 union_,
      int32_t after) noexcept
      : storage_({.before = std::move(before),
                  .union_ = std::move(union_),
                  .after = std::move(after)}) {}
  SandwichUnionSize12Alignment4() : SandwichUnionSize12Alignment4(Storage_{}) {}

  SandwichUnionSize12Alignment4(SandwichUnionSize12Alignment4&&) noexcept =
      default;
  SandwichUnionSize12Alignment4& operator=(
      SandwichUnionSize12Alignment4&&) noexcept = default;
  SandwichUnionSize12Alignment4(
      const SandwichUnionSize12Alignment4& other) noexcept
      : SandwichUnionSize12Alignment4(other.CloneStorage_()) {}
  SandwichUnionSize12Alignment4& operator=(
      const SandwichUnionSize12Alignment4& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SandwichUnionSize12Alignment4& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::SandwichUnionSize12Alignment4, 40,
        32>::Equal(this, &other);
  }
  bool operator!=(const SandwichUnionSize12Alignment4& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::SandwichUnionSize12Alignment4, 40,
        32>::Equal(this, &other);
  }

  uint32_t before() const { return storage_.before; }

  uint32_t& before() { return storage_.before; }

  const ::test_unionsandwich::UnionSize12Alignment4& union_() const {
    return storage_.union_;
  }

  ::test_unionsandwich::UnionSize12Alignment4& union_() {
    return storage_.union_;
  }

  int32_t after() const { return storage_.after; }

  int32_t& after() { return storage_.after; }

 private:
  struct Storage_ final {
    uint32_t before{};
    ::test_unionsandwich::UnionSize12Alignment4 union_{};
    int32_t after{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_unionsandwich::SandwichUnionSize12Alignment4, 40, 32>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_unionsandwich::SandwichUnionSize12Alignment4>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::before, 0, 0},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_unionsandwich::UnionSize12Alignment4>{
          &Storage_::union_, 8, 8},
      ::fidl::internal::NaturalStructMember<Storage_, int32_t>{&Storage_::after,
                                                               32, 24});
};

extern "C" const fidl_type_t test_unionsandwich_StructSize16Alignment8Table;

class StructSize16Alignment8 final {
 private:
  struct Storage_;

 public:
  StructSize16Alignment8(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructSize16Alignment8(uint64_t f1, uint64_t f2) noexcept
      : storage_({.f1 = std::move(f1), .f2 = std::move(f2)}) {}
  StructSize16Alignment8() : StructSize16Alignment8(Storage_{}) {}

  StructSize16Alignment8(StructSize16Alignment8&&) noexcept = default;
  StructSize16Alignment8& operator=(StructSize16Alignment8&&) noexcept =
      default;
  StructSize16Alignment8(const StructSize16Alignment8& other) noexcept
      : StructSize16Alignment8(other.CloneStorage_()) {}
  StructSize16Alignment8& operator=(
      const StructSize16Alignment8& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const StructSize16Alignment8& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::StructSize16Alignment8, 16, 16>::Equal(this,
                                                                     &other);
  }
  bool operator!=(const StructSize16Alignment8& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::StructSize16Alignment8, 16, 16>::Equal(this,
                                                                     &other);
  }

  uint64_t f1() const { return storage_.f1; }

  uint64_t& f1() { return storage_.f1; }

  uint64_t f2() const { return storage_.f2; }

  uint64_t& f2() { return storage_.f2; }

 private:
  struct Storage_ final {
    uint64_t f1{};
    uint64_t f2{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_unionsandwich::StructSize16Alignment8, 16, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_unionsandwich::StructSize16Alignment8>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint64_t>{&Storage_::f1,
                                                                0, 0},
      ::fidl::internal::NaturalStructMember<Storage_, uint64_t>{&Storage_::f2,
                                                                8, 8});
};

extern "C" const fidl_type_t test_unionsandwich_UnionSize24Alignment8Table;

class UnionSize24Alignment8 final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate,
                                  ::test_unionsandwich::StructSize16Alignment8>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kVariant = 1,  // 0x1
  };

  // Create an unknown value of this union.
  UnionSize24Alignment8() : storage_(std::make_shared<Storage_>()) {}

  UnionSize24Alignment8(UnionSize24Alignment8&&) noexcept = default;
  UnionSize24Alignment8& operator=(UnionSize24Alignment8&&) noexcept = default;
  UnionSize24Alignment8(const UnionSize24Alignment8& other) noexcept
      : UnionSize24Alignment8(other.CloneStorage_()) {}
  UnionSize24Alignment8& operator=(
      const UnionSize24Alignment8& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const UnionSize24Alignment8& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const UnionSize24Alignment8& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_unionsandwich::UnionSize24Alignment8::Tag Which() const {
    return UnionSize24Alignment8::IndexToTag(storage_->index());
  }
  static UnionSize24Alignment8 WithVariant(
      ::test_unionsandwich::StructSize16Alignment8 val) {
    return UnionSize24Alignment8(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> variant() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> variant() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_unionsandwich::UnionSize24Alignment8>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit UnionSize24Alignment8(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_unionsandwich::UnionSize24Alignment8::Tag tag) {
    switch (tag) {
      case ::test_unionsandwich::UnionSize24Alignment8::Tag::kVariant:
        return 1;
    }
  }

  static constexpr ::test_unionsandwich::UnionSize24Alignment8::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_unionsandwich::UnionSize24Alignment8::Tag::kVariant;
      // TODO: what's the right thing to do here?
      default:
        return ::test_unionsandwich::UnionSize24Alignment8::Tag::kVariant;
    }
  }
};

extern "C" const fidl_type_t
    test_unionsandwich_SandwichUnionSize24Alignment8Table;

class SandwichUnionSize24Alignment8 final {
 private:
  struct Storage_;

 public:
  SandwichUnionSize24Alignment8(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SandwichUnionSize24Alignment8(
      uint32_t before, ::test_unionsandwich::UnionSize24Alignment8 union_,
      uint32_t after) noexcept
      : storage_({.before = std::move(before),
                  .union_ = std::move(union_),
                  .after = std::move(after)}) {}
  SandwichUnionSize24Alignment8() : SandwichUnionSize24Alignment8(Storage_{}) {}

  SandwichUnionSize24Alignment8(SandwichUnionSize24Alignment8&&) noexcept =
      default;
  SandwichUnionSize24Alignment8& operator=(
      SandwichUnionSize24Alignment8&&) noexcept = default;
  SandwichUnionSize24Alignment8(
      const SandwichUnionSize24Alignment8& other) noexcept
      : SandwichUnionSize24Alignment8(other.CloneStorage_()) {}
  SandwichUnionSize24Alignment8& operator=(
      const SandwichUnionSize24Alignment8& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SandwichUnionSize24Alignment8& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::SandwichUnionSize24Alignment8, 40,
        32>::Equal(this, &other);
  }
  bool operator!=(const SandwichUnionSize24Alignment8& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_unionsandwich::SandwichUnionSize24Alignment8, 40,
        32>::Equal(this, &other);
  }

  uint32_t before() const { return storage_.before; }

  uint32_t& before() { return storage_.before; }

  const ::test_unionsandwich::UnionSize24Alignment8& union_() const {
    return storage_.union_;
  }

  ::test_unionsandwich::UnionSize24Alignment8& union_() {
    return storage_.union_;
  }

  uint32_t after() const { return storage_.after; }

  uint32_t& after() { return storage_.after; }

 private:
  struct Storage_ final {
    uint32_t before{};
    ::test_unionsandwich::UnionSize24Alignment8 union_{};
    uint32_t after{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_unionsandwich::SandwichUnionSize24Alignment8, 40, 32>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_unionsandwich::SandwichUnionSize24Alignment8>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::before, 0, 0},
      ::fidl::internal::NaturalStructMember<
          Storage_, ::test_unionsandwich::UnionSize24Alignment8>{
          &Storage_::union_, 8, 8},
      ::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::after, 32, 24});
};

}  // namespace test_unionsandwich
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_unionsandwich_SandwichUnionSize8Alignment4Table;

template <>
struct IsFidlType<::test_unionsandwich::SandwichUnionSize8Alignment4>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_unionsandwich::SandwichUnionSize8Alignment4>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_unionsandwich_SandwichUnionSize8Alignment4Table;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_unionsandwich::SandwichUnionSize8Alignment4>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_unionsandwich::SandwichUnionSize8Alignment4, 40, 32> {};

template <>
struct HasPadding<::test_unionsandwich::SandwichUnionSize8Alignment4>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_unionsandwich::SandwichUnionSize8Alignment4>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_unionsandwich::SandwichUnionSize8Alignment4>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_unionsandwich::UnionSize8Alignment4>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_unionsandwich_SandwichUnionSize36Alignment4Table;

template <>
struct IsFidlType<::test_unionsandwich::SandwichUnionSize36Alignment4>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_unionsandwich::SandwichUnionSize36Alignment4>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_unionsandwich_SandwichUnionSize36Alignment4Table;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_unionsandwich::SandwichUnionSize36Alignment4>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_unionsandwich::SandwichUnionSize36Alignment4, 40, 32> {};

template <>
struct HasPadding<::test_unionsandwich::SandwichUnionSize36Alignment4>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_unionsandwich::SandwichUnionSize36Alignment4>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_unionsandwich::SandwichUnionSize36Alignment4>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_unionsandwich::UnionSize36Alignment4>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_unionsandwich_SandwichUnionSize12Alignment4Table;

template <>
struct IsFidlType<::test_unionsandwich::SandwichUnionSize12Alignment4>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_unionsandwich::SandwichUnionSize12Alignment4>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_unionsandwich_SandwichUnionSize12Alignment4Table;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_unionsandwich::SandwichUnionSize12Alignment4>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_unionsandwich::SandwichUnionSize12Alignment4, 40, 32> {};

template <>
struct HasPadding<::test_unionsandwich::SandwichUnionSize12Alignment4>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_unionsandwich::SandwichUnionSize12Alignment4>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_unionsandwich::SandwichUnionSize12Alignment4>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_unionsandwich::UnionSize12Alignment4>::value &&
          internal::NaturalIsMemcpyCompatible<int32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_unionsandwich_StructSize16Alignment8Table;

template <>
struct IsFidlType<::test_unionsandwich::StructSize16Alignment8>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_unionsandwich::StructSize16Alignment8>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_unionsandwich_StructSize16Alignment8Table;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_unionsandwich::StructSize16Alignment8>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_unionsandwich::StructSize16Alignment8, 16, 16> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_unionsandwich::StructSize16Alignment8>
    : public internal::BoolConstant<
          !HasPadding<::test_unionsandwich::StructSize16Alignment8>::value &&
          internal::NaturalIsMemcpyCompatible<uint64_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_unionsandwich_SandwichUnionSize24Alignment8Table;

template <>
struct IsFidlType<::test_unionsandwich::SandwichUnionSize24Alignment8>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_unionsandwich::SandwichUnionSize24Alignment8>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_unionsandwich_SandwichUnionSize24Alignment8Table;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_unionsandwich::SandwichUnionSize24Alignment8>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_unionsandwich::SandwichUnionSize24Alignment8, 40, 32> {};

template <>
struct HasPadding<::test_unionsandwich::SandwichUnionSize24Alignment8>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_unionsandwich::SandwichUnionSize24Alignment8>
    : public internal::BoolConstant<
          !HasPadding<
              ::test_unionsandwich::SandwichUnionSize24Alignment8>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_unionsandwich::UnionSize24Alignment8>::value> {};

#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_unionsandwich::UnionSize8Alignment4>
    : public std::true_type {};
template <>
struct IsUnion<::test_unionsandwich::UnionSize8Alignment4>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_unionsandwich::UnionSize8Alignment4>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_unionsandwich::UnionSize8Alignment4> {};

template <>
struct IsFidlType<::test_unionsandwich::UnionSize36Alignment4>
    : public std::true_type {};
template <>
struct IsUnion<::test_unionsandwich::UnionSize36Alignment4>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_unionsandwich::UnionSize36Alignment4>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_unionsandwich::UnionSize36Alignment4> {};

template <>
struct IsFidlType<::test_unionsandwich::UnionSize12Alignment4>
    : public std::true_type {};
template <>
struct IsUnion<::test_unionsandwich::UnionSize12Alignment4>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_unionsandwich::UnionSize12Alignment4>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_unionsandwich::UnionSize12Alignment4> {};

template <>
struct IsFidlType<::test_unionsandwich::UnionSize24Alignment8>
    : public std::true_type {};
template <>
struct IsUnion<::test_unionsandwich::UnionSize24Alignment8>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_unionsandwich::UnionSize24Alignment8>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_unionsandwich::UnionSize24Alignment8> {};

}  // namespace fidl
