// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.nullable/cpp/markers.h>
#include <fidl/test.nullable/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace test_nullable {
class SimpleProtocol;

__LOCAL extern "C" const fidl_type_t
    test_nullable_SimpleProtocolAddRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_nullable_SimpleProtocolAddTopResponseTable;
}  // namespace test_nullable
template <>
struct ::fidl::internal::WireOrdinal<::test_nullable::SimpleProtocol::Add>
    final {
  static constexpr uint64_t value = 9142761280038437494lu;
};

namespace test_nullable {}  // namespace test_nullable
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_nullable::SimpleProtocol> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_nullable::SimpleProtocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::test_nullable::SimpleProtocol>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::test_nullable::SimpleProtocol>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_nullable::SimpleProtocol::Add> final {
  FIDL_ALIGNDECL
  int32_t a;
  int32_t b;

  explicit WireRequest(int32_t a, int32_t b) : a(a), b(b) {}
  WireRequest() = default;
  using ResponseType =
      ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>;
};

template <>
struct ::fidl::internal::TransactionalRequest<
    ::test_nullable::SimpleProtocol::Add>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireRequest<::test_nullable::SimpleProtocol::Add> body;
  explicit TransactionalRequest(int32_t a, int32_t b)
      : body(::fidl::WireRequest<::test_nullable::SimpleProtocol::Add>(a, b)) {
    _InitHeader();
  }
  TransactionalRequest() { _InitHeader(); }
  using ResponseType = ::fidl::internal::TransactionalResponse<
      ::test_nullable::SimpleProtocol::Add>;

 private:
  void _InitHeader();
};

template <>
struct ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add> final {
  FIDL_ALIGNDECL
  int32_t sum;

  explicit WireResponse(int32_t sum) : sum(sum) {}
  WireResponse() = default;
};

template <>
struct ::fidl::internal::TransactionalResponse<
    ::test_nullable::SimpleProtocol::Add>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add> body;
  explicit TransactionalResponse(int32_t sum)
      : body(::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>(sum)) {
    _InitHeader();
  }
  TransactionalResponse() { _InitHeader(); }

 private:
  void _InitHeader();
};

namespace fidl {

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<
    ::test_nullable::SimpleProtocol::Add>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireRequest<::test_nullable::SimpleProtocol::Add>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<
    ::test_nullable::SimpleProtocol::Add>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireRequest<::test_nullable::SimpleProtocol::Add>>
    : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<
    ::test_nullable::SimpleProtocol::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_nullable::test_nullable_SimpleProtocolAddRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(8 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(8 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<
                     ::test_nullable::SimpleProtocol::Add>) ==
              TypeTraits<::fidl::internal::TransactionalRequest<
                  ::test_nullable::SimpleProtocol::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_nullable::SimpleProtocol::Add>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_nullable::SimpleProtocol::Add>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<::fidl::WireRequest<::test_nullable::SimpleProtocol::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_nullable::test_nullable_SimpleProtocolAddRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(8);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(8);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};
static_assert(
    sizeof(::fidl::WireRequest<::test_nullable::SimpleProtocol::Add>) ==
    TypeTraits<::fidl::WireRequest<::test_nullable::SimpleProtocol::Add>>::
        kPrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::test_nullable::SimpleProtocol::Add>, a) ==
    0);
static_assert(
    offsetof(::fidl::WireRequest<::test_nullable::SimpleProtocol::Add>, b) ==
    4);

template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<
    ::test_nullable::SimpleProtocol::Add>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<
    ::test_nullable::SimpleProtocol::Add>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>>
    : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<
    ::test_nullable::SimpleProtocol::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_nullable::test_nullable_SimpleProtocolAddTopResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalResponse<
                     ::test_nullable::SimpleProtocol::Add>) ==
              TypeTraits<::fidl::internal::TransactionalResponse<
                  ::test_nullable::SimpleProtocol::Add>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<
                           ::test_nullable::SimpleProtocol::Add>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<
                           ::test_nullable::SimpleProtocol::Add>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>> {
  static constexpr const fidl_type_t* kType =
      &::test_nullable::test_nullable_SimpleProtocolAddTopResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(4);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(4);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(
    sizeof(::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>) ==
    TypeTraits<::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>>::
        kPrimarySize);
static_assert(
    offsetof(::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>, sum) ==
    0);

}  // namespace fidl
namespace test_nullable {
#ifdef __Fuchsia__
}  // namespace test_nullable
template <>
class ::fidl::WireResult<::test_nullable::SimpleProtocol::Add> final
    : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::test_nullable::SimpleProtocol> client,
             ::fidl::internal::TransactionalRequest<
                 ::test_nullable::SimpleProtocol::Add>* request);
  WireResult(::fidl::UnownedClientEnd<::test_nullable::SimpleProtocol> client,
             ::fidl::internal::TransactionalRequest<
                 ::test_nullable::SimpleProtocol::Add>* request,
             zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;
  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>*>(
        bytes_.data() + sizeof(fidl_message_header_t));
  }
  const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<
        const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>*>(
        bytes_.data() + sizeof(fidl_message_header_t));
  }

  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>& operator*()
      const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<::test_nullable::SimpleProtocol::Add> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_nullable::SimpleProtocol> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::internal::TransactionalRequest<
          ::test_nullable::SimpleProtocol::Add>* request);
  explicit WireUnownedResult(::fidl::internal::TransactionalResponse<
                             ::test_nullable::SimpleProtocol::Add>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::unstable::DecodedMessage<::fidl::internal::TransactionalResponse<
          ::test_nullable::SimpleProtocol::Add>>&& decoded,
      ::fidl::internal::IncomingTransportContext context)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return &(reinterpret_cast<::fidl::internal::TransactionalResponse<
                 ::test_nullable::SimpleProtocol::Add>*>(bytes_)
                 ->body);
  }
  const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* Unwrap()
      const {
    ZX_DEBUG_ASSERT(ok());
    return &(reinterpret_cast<const ::fidl::internal::TransactionalResponse<
                 ::test_nullable::SimpleProtocol::Add>*>(bytes_)
                 ->body);
  }

  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>& value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>& value()
      const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* operator->()
      const {
    return &value();
  }

  ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>& operator*() {
    return value();
  }
  const ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>& operator*()
      const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::test_nullable::SimpleProtocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_nullable::SimpleProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_nullable::SimpleProtocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_nullable::SimpleProtocol> client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_nullable::SimpleProtocol>
    final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::WireAsyncEventHandler<::test_nullable::SimpleProtocol>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<::test_nullable::SimpleProtocol>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a |fidl::ClientEnd<::test_nullable::SimpleProtocol>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::test_nullable::SimpleProtocol>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::test_nullable::SimpleProtocol>> {
 public:
  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_nullable::SimpleProtocol::Add> Add(int32_t a,
                                                               int32_t b) {
    ::fidl::internal::TransactionalRequest<::test_nullable::SimpleProtocol::Add>
        _request{a, b};
    return ::fidl::WireResult<::test_nullable::SimpleProtocol::Add>(
        _client_end(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_nullable::SimpleProtocol> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::test_nullable::SimpleProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::test_nullable::SimpleProtocol>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_nullable::SimpleProtocol>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_nullable::SimpleProtocol::Add> Add(
      int32_t a, int32_t b) {
    ::fidl::internal::TransactionalRequest<::test_nullable::SimpleProtocol::Add>
        _request{a, b};
    return ::fidl::WireUnownedResult<::test_nullable::SimpleProtocol::Add>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_nullable::SimpleProtocol> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::test_nullable::SimpleProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireCompleterImpl<::test_nullable::SimpleProtocol::Add>
    : public ::fidl::internal::CompleterImplBase<
          ::test_nullable::SimpleProtocol::Add> {
 public:
  using CompleterImplBase::CompleterImplBase;

  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.

  ::fidl::Result Reply(int32_t sum);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<
    ::test_nullable::SimpleProtocol::Add>
    : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.

  ::fidl::Result Reply(int32_t sum);
};

template <>
class ::fidl::internal::WireCompleterBase<::test_nullable::SimpleProtocol::Add>
    : public ::fidl::CompleterBase,
      public ::fidl::internal::WireCompleterImpl<
          ::test_nullable::SimpleProtocol::Add> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned,
                    bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};

template <>
struct ::fidl::internal::WireMethodTypes<::test_nullable::SimpleProtocol::Add> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::test_nullable::SimpleProtocol::Add>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_nullable::SimpleProtocol;

  using AddCompleter =
      ::fidl::internal::WireCompleter<::test_nullable::SimpleProtocol::Add>;
  using AddRequestView =
      ::fidl::internal::WireRequestView<::test_nullable::SimpleProtocol::Add>;

  virtual void Add(AddRequestView request, AddCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
namespace test_nullable {
#endif  // __Fuchsia__

}  // namespace test_nullable
namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireWeakOnewayClientImpl<
    ::test_nullable::SimpleProtocol> : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;
};

template <>
class ::fidl::internal::WireWeakAsyncClientImpl<::test_nullable::SimpleProtocol>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_nullable::SimpleProtocol> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
  // Allocates 24 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  void Add(
      int32_t a, int32_t b,
      ::fidl::WireClientCallback<::test_nullable::SimpleProtocol::Add> _cb);
  void Add(
      int32_t a, int32_t b,
      ::fit::callback<void(
          ::fidl::WireResponse<::test_nullable::SimpleProtocol::Add>* response)>
          _cb);
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_nullable::SimpleProtocol>
    : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_nullable::SimpleProtocol>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_nullable::SimpleProtocol> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;

  // Caller provides the backing storage for FIDL message.
  void Add(int32_t a, int32_t b,
           ::fidl::WireResponseContext<::test_nullable::SimpleProtocol::Add>*
               _context);
};
template <>
class ::fidl::internal::WireWeakSyncClientImpl<::test_nullable::SimpleProtocol>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_nullable::SimpleProtocol> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;

  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_nullable::SimpleProtocol::Add> Add(int32_t a,
                                                               int32_t b);
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
template <>
class ::fidl::internal::WireWeakEventSender<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::WireWeakBufferEventSender<
    ::test_nullable::SimpleProtocol>
    : public ::fidl::internal::WeakBufferEventSenderBase {
 public:
  using WeakBufferEventSenderBase::WeakBufferEventSenderBase;
};

template <>
class ::fidl::internal::WireEventSender<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireEventSender<::test_nullable::SimpleProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};

template <>
class ::fidl::internal::WireBufferEventSender<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::SyncEndpointBufferVeneer<
          ::fidl::internal::WireBufferEventSender<
              ::test_nullable::SimpleProtocol>> {
 public:
  using SyncEndpointBufferVeneer::SyncEndpointBufferVeneer;
};
#endif  // __Fuchsia__
