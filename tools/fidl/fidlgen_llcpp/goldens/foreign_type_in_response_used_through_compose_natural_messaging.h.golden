// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.bottom/cpp/natural_messaging.h>
#include <fidl/test.foreigntypeinresponseusedthroughcompose/cpp/markers.h>
#include <fidl/test.foreigntypeinresponseusedthroughcompose/cpp/natural_types.h>
#include <fidl/test.middle/cpp/natural_messaging.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/internal/natural_server_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {}  // namespace fidl
namespace test_foreigntypeinresponseusedthroughcompose {
__LOCAL extern "C" const fidl_type_t test_middle_MiddleGetFooTopResponseTable;

#ifdef __Fuchsia__
}  // namespace test_foreigntypeinresponseusedthroughcompose

template <>
class ::fidl::Response<
    ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    final : public ::fidl::internal::MessageBase<::fidl::Response<
                ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_middle::MiddleGetFooTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_middle::MiddleGetFooTopResponse* operator->() { return &payload_; }
  const ::test_middle::MiddleGetFooTopResponse* operator->() const {
    return &payload_;
  }
  ::test_middle::MiddleGetFooTopResponse& operator*() { return payload_; }
  const ::test_middle::MiddleGetFooTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_middle::MiddleGetFooTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Response<
    ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_middle::MiddleGetFooTopResponse;
};
namespace test_foreigntypeinresponseusedthroughcompose {
}  // namespace test_foreigntypeinresponseusedthroughcompose
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<
              ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<
          ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<
    ::test_foreigntypeinresponseusedthroughcompose::Top>
    final : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void GetFoo(::fidl::ClientCallback<
              ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&&
                  _callback) const;

  void GetFoo(::fidl::ClientResponseCallback<
              ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>&&
                  _callback) const;
};
namespace test_foreigntypeinresponseusedthroughcompose {
#endif  // __Fuchsia__

}  // namespace test_foreigntypeinresponseusedthroughcompose
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_foreigntypeinresponseusedthroughcompose::Top> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<
    ::test_foreigntypeinresponseusedthroughcompose::Top>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_foreigntypeinresponseusedthroughcompose::Top>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<
    ::test_foreigntypeinresponseusedthroughcompose::Top>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<
                    ::test_foreigntypeinresponseusedthroughcompose::Top>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<
          ::test_foreigntypeinresponseusedthroughcompose::Top>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<
    ::test_foreigntypeinresponseusedthroughcompose::Top>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<
    ::test_foreigntypeinresponseusedthroughcompose::Top>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<
              ::test_foreigntypeinresponseusedthroughcompose::Top>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<
    ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    final : public ::fidl::internal::MessageBase<::fidl::Request<
                ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<::fidl::Request<
    ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>
    : public ::fidl::CompleterBase {
 public:
  void Reply(::test_middle::MiddleGetFooTopResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::MethodTypes<
    ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>>;
};

template <>
class ::fidl::Server<::test_foreigntypeinresponseusedthroughcompose::Top>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol =
      ::test_foreigntypeinresponseusedthroughcompose::Top;

  using GetFooRequest = ::fidl::Request<
      ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>;
  using GetFooCompleter = ::fidl::internal::NaturalCompleter<
      ::test_foreigntypeinresponseusedthroughcompose::Top::GetFoo>;

  virtual void GetFoo(GetFooRequest& request,
                      GetFooCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_foreigntypeinresponseusedthroughcompose::Top>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(
      ::fidl::Server<::test_foreigntypeinresponseusedthroughcompose::Top>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
