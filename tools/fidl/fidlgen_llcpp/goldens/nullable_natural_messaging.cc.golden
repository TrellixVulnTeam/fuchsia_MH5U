// WARNING: This file is machine generated by fidlgen_llcpp.

#include <fidl/test.nullable/cpp/natural_messaging.h>

namespace test_nullable {
[[maybe_unused]] constexpr inline uint64_t kSimpleProtocol_Add_Ordinal =
    9142761280038437494lu;

#ifdef __Fuchsia__
}  // namespace test_nullable
void fidl::internal::NaturalClientImpl<::test_nullable::SimpleProtocol>::Add(
    ::test_nullable::SimpleProtocolAddRequest&& payload,
    ::fidl::ClientCallback<::test_nullable::SimpleProtocol::Add>&& _callback)
    const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_nullable::kSimpleProtocol_Add_Ordinal};
  return messenger().TwoWay(
      &::test_nullable::test_nullable_SimpleProtocolAddRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_nullable::SimpleProtocol::Add>,
          ::fidl::ClientCallback<::test_nullable::SimpleProtocol::Add>>(
          ::test_nullable::kSimpleProtocol_Add_Ordinal, std::move(_callback)));
}
void fidl::internal::NaturalClientImpl<::test_nullable::SimpleProtocol>::Add(
    ::test_nullable::SimpleProtocolAddRequest&& payload,
    ::fidl::ClientResponseCallback<::test_nullable::SimpleProtocol::Add>&&
        _callback) const {
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_nullable::kSimpleProtocol_Add_Ordinal};
  return messenger().TwoWay(
      &::test_nullable::test_nullable_SimpleProtocolAddRequestTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)),
      ::fidl::internal::MakeResponseContext<
          ::fidl::Response<::test_nullable::SimpleProtocol::Add>,
          ::fidl::ClientResponseCallback<::test_nullable::SimpleProtocol::Add>>(
          ::test_nullable::kSimpleProtocol_Add_Ordinal, std::move(_callback)));
}
namespace test_nullable {
#endif  // __Fuchsia__

}  // namespace test_nullable
#ifdef __Fuchsia__

std::optional<::fidl::UnbindInfo> fidl::internal::
    NaturalEventDispatcher<::test_nullable::SimpleProtocol>::DispatchEvent(
        ::fidl::IncomingMessage& msg,
        ::fidl::internal::IncomingTransportContext transport_context) {
  return ::fidl::UnbindInfo::UnknownOrdinal();
}
#endif  // __Fuchsia__

#ifdef __Fuchsia__

#endif  // __Fuchsia__

void fidl::internal::
    NaturalCompleterBase<::test_nullable::SimpleProtocol::Add>::Reply(
        ::test_nullable::SimpleProtocolAddTopResponse&& payload) {
  ::fidl::internal::NaturalServerMessenger _messenger{this};
  ::fidl::internal::NaturalMessageEncoder<::fidl::internal::ChannelTransport>
      _encoder{::test_nullable::kSimpleProtocol_Add_Ordinal};
  _messenger.SendReply(
      &::test_nullable::test_nullable_SimpleProtocolAddTopResponseTable,
      ::fidl::internal::EncodeTransactionalMessageWithoutValidating(
          _encoder, std::move(payload)));
}

#ifdef __Fuchsia__

constexpr ::fidl::internal::MethodEntry fidl::internal::NaturalServerDispatcher<
    ::test_nullable::SimpleProtocol>::entries_[] = {
    {
        ::test_nullable::kSimpleProtocol_Add_Ordinal,
        [](void* interface, ::fidl::IncomingMessage&& msg,
           internal::IncomingTransportContext transport_context,
           ::fidl::Transaction* txn) {
          ::fitx::result<::fidl::Error,
                         ::fidl::Request<::test_nullable::SimpleProtocol::Add>>
              decoded = ::fidl::Request<::test_nullable::SimpleProtocol::Add>::
                  DecodeTransactional(std::move(msg));
          if (decoded.is_error()) {
            return decoded.error_value().status();
          }
          ::fidl::internal::NaturalCompleter<
              ::test_nullable::SimpleProtocol::Add>::Sync completer(txn);
          static_cast<::fidl::Server<::test_nullable::SimpleProtocol>*>(
              interface)
              ->Add(decoded.value(), completer);
          return ZX_OK;
        },
    },
};

const ::fidl::internal::MethodEntry* fidl::internal::NaturalServerDispatcher<
    ::test_nullable::SimpleProtocol>::entries_end_ = &entries_[1];

void fidl::internal::NaturalServerDispatcher<::test_nullable::SimpleProtocol>::
    Dispatch(::fidl::Server<::test_nullable::SimpleProtocol>* impl,
             ::fidl::IncomingMessage&& msg,
             internal::IncomingTransportContext transport_context,
             ::fidl::Transaction* txn) {
  ::fidl::internal::Dispatch(impl, msg, std::move(transport_context), txn,
                             entries_, entries_end_);
}
void fidl::Server<::test_nullable::SimpleProtocol>::dispatch_message(
    ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
    ::fidl::internal::IncomingTransportContext transport_context) {
  ::fidl::internal::NaturalServerDispatcher<
      ::test_nullable::SimpleProtocol>::Dispatch(this, std::move(msg),
                                                 std::move(transport_context),
                                                 txn);
}
#endif  // __Fuchsia__
