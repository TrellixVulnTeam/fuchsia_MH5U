// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.protocolrequest/cpp/markers.h>
#include <fidl/test.protocolrequest/cpp/natural_types.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/internal/natural_server_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {}  // namespace fidl
namespace test_protocolrequest {
__LOCAL extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildTopResponseTable;

__LOCAL extern "C" const fidl_type_t
    test_protocolrequest_ParentGetChildRequestTopResponseTable;
__LOCAL extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestTable;

__LOCAL extern "C" const fidl_type_t
    test_protocolrequest_ParentTakeChildRequestRequestTable;

#ifdef __Fuchsia__
}  // namespace test_protocolrequest

template <>
class ::fidl::Response<::test_protocolrequest::Parent::GetChild> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_protocolrequest::Parent::GetChild>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocolrequest::ParentGetChildTopResponse payload)
      : payload_(std::move(payload)) {}
  Response(const Response&) noexcept = delete;
  Response& operator=(const Response&) noexcept = delete;
  ::test_protocolrequest::ParentGetChildTopResponse* operator->() {
    return &payload_;
  }
  const ::test_protocolrequest::ParentGetChildTopResponse* operator->() const {
    return &payload_;
  }
  ::test_protocolrequest::ParentGetChildTopResponse& operator*() {
    return payload_;
  }
  const ::test_protocolrequest::ParentGetChildTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_protocolrequest::ParentGetChildTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocolrequest::Parent::GetChild>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocolrequest::ParentGetChildTopResponse;
};
namespace test_protocolrequest {}  // namespace test_protocolrequest
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_protocolrequest::Parent::GetChild>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_protocolrequest::Parent::GetChild>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_protocolrequest::Parent::GetChild>&)>;
};

template <>
class ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_protocolrequest::ParentGetChildRequestTopResponse payload)
      : payload_(std::move(payload)) {}
  Response(const Response&) noexcept = delete;
  Response& operator=(const Response&) noexcept = delete;
  ::test_protocolrequest::ParentGetChildRequestTopResponse* operator->() {
    return &payload_;
  }
  const ::test_protocolrequest::ParentGetChildRequestTopResponse* operator->()
      const {
    return &payload_;
  }
  ::test_protocolrequest::ParentGetChildRequestTopResponse& operator*() {
    return payload_;
  }
  const ::test_protocolrequest::ParentGetChildRequestTopResponse& operator*()
      const {
    return payload_;
  }

 private:
  ::test_protocolrequest::ParentGetChildRequestTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocolrequest::ParentGetChildRequestTopResponse;
};
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_protocolrequest::Parent::GetChildRequest>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<
          ::fidl::Error,
          ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_protocolrequest::Parent::GetChildRequest>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_protocolrequest::Parent> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void GetChild(
      ::fidl::ClientCallback<::test_protocolrequest::Parent::GetChild>&&
          _callback) const;

  void GetChild(
      ::fidl::ClientResponseCallback<::test_protocolrequest::Parent::GetChild>&&
          _callback) const;

  void GetChildRequest(
      ::fidl::ClientCallback<::test_protocolrequest::Parent::GetChildRequest>&&
          _callback) const;

  void GetChildRequest(
      ::fidl::ClientResponseCallback<
          ::test_protocolrequest::Parent::GetChildRequest>&& _callback) const;

  ::fitx::result<::fidl::Error> TakeChild(
      ::test_protocolrequest::ParentTakeChildRequest&& payload) const;

  ::fitx::result<::fidl::Error> TakeChildRequest(
      ::test_protocolrequest::ParentTakeChildRequestRequest&& payload) const;
};
namespace test_protocolrequest {
#endif  // __Fuchsia__

}  // namespace test_protocolrequest
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_protocolrequest::Parent> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_protocolrequest::Parent>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_protocolrequest::Parent>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_protocolrequest::Parent>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<::test_protocolrequest::Parent>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_protocolrequest::Parent>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<::test_protocolrequest::Parent>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<::test_protocolrequest::Parent>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<
              ::test_protocolrequest::Parent>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocolrequest::Parent::GetChild> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocolrequest::Parent::GetChild>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocolrequest::Parent::GetChild>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocolrequest::Parent::GetChildRequest> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocolrequest::Parent::GetChildRequest>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;

 private:
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocolrequest::Parent::GetChildRequest>>
    final {
 public:
  static constexpr bool kHasPayload = false;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocolrequest::Parent::TakeChild> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocolrequest::Parent::TakeChild>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocolrequest::ParentTakeChildRequest payload)
      : payload_(std::move(payload)) {}
  Request(const Request&) noexcept = delete;
  Request& operator=(const Request&) noexcept = delete;
  ::test_protocolrequest::ParentTakeChildRequest* operator->() {
    return &payload_;
  }
  const ::test_protocolrequest::ParentTakeChildRequest* operator->() const {
    return &payload_;
  }
  ::test_protocolrequest::ParentTakeChildRequest& operator*() {
    return payload_;
  }
  const ::test_protocolrequest::ParentTakeChildRequest& operator*() const {
    return payload_;
  }

 private:
  ::test_protocolrequest::ParentTakeChildRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocolrequest::Parent::TakeChild>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocolrequest::ParentTakeChildRequest;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_protocolrequest::Parent::TakeChildRequest> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_protocolrequest::Parent::TakeChildRequest>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_protocolrequest::ParentTakeChildRequestRequest payload)
      : payload_(std::move(payload)) {}
  Request(const Request&) noexcept = delete;
  Request& operator=(const Request&) noexcept = delete;
  ::test_protocolrequest::ParentTakeChildRequestRequest* operator->() {
    return &payload_;
  }
  const ::test_protocolrequest::ParentTakeChildRequestRequest* operator->()
      const {
    return &payload_;
  }
  ::test_protocolrequest::ParentTakeChildRequestRequest& operator*() {
    return payload_;
  }
  const ::test_protocolrequest::ParentTakeChildRequestRequest& operator*()
      const {
    return payload_;
  }

 private:
  ::test_protocolrequest::ParentTakeChildRequestRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_protocolrequest::Parent::TakeChildRequest>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_protocolrequest::ParentTakeChildRequestRequest;
};
#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocolrequest::Parent::GetChild> : public ::fidl::CompleterBase {
 public:
  void Reply(::test_protocolrequest::ParentGetChildTopResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::MethodTypes<::test_protocolrequest::Parent::GetChild> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocolrequest::Parent::GetChild>>;
};

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_protocolrequest::Parent::GetChildRequest>
    : public ::fidl::CompleterBase {
 public:
  void Reply(
      ::test_protocolrequest::ParentGetChildRequestTopResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::MethodTypes<
    ::test_protocolrequest::Parent::GetChildRequest> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_protocolrequest::Parent::GetChildRequest>>;
};

template <>
class ::fidl::Server<::test_protocolrequest::Parent>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_protocolrequest::Parent;

  using GetChildRequest =
      ::fidl::Request<::test_protocolrequest::Parent::GetChild>;
  using GetChildCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocolrequest::Parent::GetChild>;

  virtual void GetChild(GetChildRequest& request,
                        GetChildCompleter::Sync& completer) = 0;

  using GetChildRequestRequest =
      ::fidl::Request<::test_protocolrequest::Parent::GetChildRequest>;
  using GetChildRequestCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocolrequest::Parent::GetChildRequest>;

  virtual void GetChildRequest(GetChildRequestRequest& request,
                               GetChildRequestCompleter::Sync& completer) = 0;

  using TakeChildRequest =
      ::fidl::Request<::test_protocolrequest::Parent::TakeChild>;
  using TakeChildCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocolrequest::Parent::TakeChild>;

  virtual void TakeChild(TakeChildRequest& request,
                         TakeChildCompleter::Sync& completer) = 0;

  using TakeChildRequestRequest =
      ::fidl::Request<::test_protocolrequest::Parent::TakeChildRequest>;
  using TakeChildRequestCompleter = ::fidl::internal::NaturalCompleter<
      ::test_protocolrequest::Parent::TakeChildRequest>;

  virtual void TakeChildRequest(TakeChildRequestRequest& request,
                                TakeChildRequestCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<::test_protocolrequest::Parent>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_protocolrequest::Parent>* impl,
                       ::fidl::IncomingMessage&& msg,
                       internal::IncomingTransportContext transport_context,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalClientImpl<::test_protocolrequest::Child> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_protocolrequest::Child> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_protocolrequest::Child>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_protocolrequest::Child>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_protocolrequest::Child>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<::test_protocolrequest::Child>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_protocolrequest::Child>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<::test_protocolrequest::Child>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<::test_protocolrequest::Child>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<::test_protocolrequest::Child>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

template <>
class ::fidl::Server<::test_protocolrequest::Child>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_protocolrequest::Child;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<::test_protocolrequest::Child>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_protocolrequest::Child>* impl,
                       ::fidl::IncomingMessage&& msg,
                       internal::IncomingTransportContext transport_context,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
