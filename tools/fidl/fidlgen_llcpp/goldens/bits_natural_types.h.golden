// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.bits/cpp/common_types.h>
#include <fidl/test.bits/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace fidl {

template <>
struct internal::NaturalCodingTraits<::test_bits::StrictBits> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint64_t);
  static constexpr size_t inline_size_v2 = sizeof(uint64_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_bits::StrictBits* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_bits::StrictBits>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_bits::StrictBits* value, size_t offset) {
    *value = *decoder->template GetPtr<::test_bits::StrictBits>(offset);
  }
};
template <>
struct internal::NaturalCodingTraits<::test_bits::MyBits> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_bits::MyBits* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_bits::MyBits>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_bits::MyBits* value, size_t offset) {
    *value = *decoder->template GetPtr<::test_bits::MyBits>(offset);
  }
};
template <>
struct internal::NaturalCodingTraits<::test_bits::FlexibleBits> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint64_t);
  static constexpr size_t inline_size_v2 = sizeof(uint64_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_bits::FlexibleBits* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_bits::FlexibleBits>(offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_bits::FlexibleBits* value, size_t offset) {
    *value = *decoder->template GetPtr<::test_bits::FlexibleBits>(offset);
  }
};

}  // namespace fidl
