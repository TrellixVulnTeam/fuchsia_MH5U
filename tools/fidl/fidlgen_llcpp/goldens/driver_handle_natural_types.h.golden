// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.driverhandle/cpp/common_types.h>
#include <fidl/test.driverhandle/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/fidl_driver/cpp/natural_types.h>
#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_driverhandle {
class ServerEndWrapper;

class ClientEndWrapper;

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_driverhandle_ServerEndWrapperTable;

class ServerEndWrapper final {
 private:
  struct Storage_;

 public:
  ServerEndWrapper(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ServerEndWrapper(
      ::fdf::ServerEnd<::test_driverhandle::DriverProtocol> value) noexcept
      : storage_({.value = std::move(value)}) {}
  ServerEndWrapper() : ServerEndWrapper(Storage_{}) {}

  ServerEndWrapper(ServerEndWrapper&&) noexcept = default;
  ServerEndWrapper& operator=(ServerEndWrapper&&) noexcept = default;

  const ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>& value() const {
    return storage_.value;
  }

  ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>& value() {
    return storage_.value;
  }

 private:
  struct Storage_ final {
    ::fdf::ServerEnd<::test_driverhandle::DriverProtocol> value{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_driverhandle::ServerEndWrapper, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_driverhandle::ServerEndWrapper>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>>{
          &Storage_::value, 0, 0,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_CHANNEL,
               .rights = ZX_DEFAULT_CHANNEL_RIGHTS})});
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_driverhandle_ClientEndWrapperTable;

class ClientEndWrapper final {
 private:
  struct Storage_;

 public:
  ClientEndWrapper(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ClientEndWrapper(
      ::fdf::ClientEnd<::test_driverhandle::DriverProtocol> value) noexcept
      : storage_({.value = std::move(value)}) {}
  ClientEndWrapper() : ClientEndWrapper(Storage_{}) {}

  ClientEndWrapper(ClientEndWrapper&&) noexcept = default;
  ClientEndWrapper& operator=(ClientEndWrapper&&) noexcept = default;

  const ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& value() const {
    return storage_.value;
  }

  ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>& value() {
    return storage_.value;
  }

 private:
  struct Storage_ final {
    ::fdf::ClientEnd<::test_driverhandle::DriverProtocol> value{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_driverhandle::ClientEndWrapper, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_driverhandle::ClientEndWrapper>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>>{
          &Storage_::value, 0, 0,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_CHANNEL,
               .rights = ZX_DEFAULT_CHANNEL_RIGHTS})});
};

#endif  // __Fuchsia__

}  // namespace test_driverhandle
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_driverhandle_ServerEndWrapperTable;

template <>
struct IsResource<::test_driverhandle::ServerEndWrapper>
    : public std::true_type {};
template <>
struct IsFidlType<::test_driverhandle::ServerEndWrapper>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_driverhandle::ServerEndWrapper>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_driverhandle_ServerEndWrapperTable;
};

template <>
struct internal::NaturalCodingTraits<::test_driverhandle::ServerEndWrapper>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_driverhandle::ServerEndWrapper, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_driverhandle::ServerEndWrapper>
    : public internal::BoolConstant<
          !HasPadding<::test_driverhandle::ServerEndWrapper>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::fdf::ServerEnd<::test_driverhandle::DriverProtocol>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_driverhandle_ClientEndWrapperTable;

template <>
struct IsResource<::test_driverhandle::ClientEndWrapper>
    : public std::true_type {};
template <>
struct IsFidlType<::test_driverhandle::ClientEndWrapper>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_driverhandle::ClientEndWrapper>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_driverhandle_ClientEndWrapperTable;
};

template <>
struct internal::NaturalCodingTraits<::test_driverhandle::ClientEndWrapper>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_driverhandle::ClientEndWrapper, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_driverhandle::ClientEndWrapper>
    : public internal::BoolConstant<
          !HasPadding<::test_driverhandle::ClientEndWrapper>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::fdf::ClientEnd<::test_driverhandle::DriverProtocol>>::value> {};

#endif  // __Fuchsia__

}  // namespace fidl
