// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.placementofattributes/cpp/common_types.h>
#include <fidl/test.placementofattributes/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

#include <fidl/test.exampleusing/cpp/natural_types.h>

namespace test_placementofattributes {
class ExampleStruct;

class ExampleProtocolMethodRequest;

class ExampleTable;

class ExampleXUnion;

class ExampleUnion;

extern "C" const fidl_type_t test_placementofattributes_ExampleXUnionTable;

class ExampleXUnion final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kVariant = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  ExampleXUnion() : storage_(std::make_shared<Storage_>()) {}

  ExampleXUnion(ExampleXUnion&&) noexcept = default;
  ExampleXUnion& operator=(ExampleXUnion&&) noexcept = default;
  ExampleXUnion(const ExampleXUnion& other) noexcept
      : ExampleXUnion(other.CloneStorage_()) {}
  ExampleXUnion& operator=(const ExampleXUnion& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const ExampleXUnion& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const ExampleXUnion& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_placementofattributes::ExampleXUnion::Tag Which() const {
    return ExampleXUnion::IndexToTag(storage_->index());
  }
  static ExampleXUnion WithVariant(uint32_t val) {
    return ExampleXUnion(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> variant() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> variant() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_placementofattributes::ExampleXUnion>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit ExampleXUnion(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_placementofattributes::ExampleXUnion::Tag tag) {
    switch (tag) {
      case ::test_placementofattributes::ExampleXUnion::Tag::kVariant:
        return 1;
      case ::test_placementofattributes::ExampleXUnion::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_placementofattributes::ExampleXUnion::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_placementofattributes::ExampleXUnion::Tag::kVariant;
      default:
        return ::test_placementofattributes::ExampleXUnion::Tag::kUnknown;
    }
  }
};

extern "C" const fidl_type_t test_placementofattributes_ExampleUnionTable;

class ExampleUnion final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, uint32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kVariant = 1,  // 0x1
  };

  // Create an unknown value of this union.
  ExampleUnion() : storage_(std::make_shared<Storage_>()) {}

  ExampleUnion(ExampleUnion&&) noexcept = default;
  ExampleUnion& operator=(ExampleUnion&&) noexcept = default;
  ExampleUnion(const ExampleUnion& other) noexcept
      : ExampleUnion(other.CloneStorage_()) {}
  ExampleUnion& operator=(const ExampleUnion& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const ExampleUnion& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const ExampleUnion& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_placementofattributes::ExampleUnion::Tag Which() const {
    return ExampleUnion::IndexToTag(storage_->index());
  }
  static ExampleUnion WithVariant(uint32_t val) {
    return ExampleUnion(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> variant() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> variant() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_placementofattributes::ExampleUnion>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit ExampleUnion(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_placementofattributes::ExampleUnion::Tag tag) {
    switch (tag) {
      case ::test_placementofattributes::ExampleUnion::Tag::kVariant:
        return 1;
    }
  }

  static constexpr ::test_placementofattributes::ExampleUnion::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_placementofattributes::ExampleUnion::Tag::kVariant;
      // TODO: what's the right thing to do here?
      default:
        return ::test_placementofattributes::ExampleUnion::Tag::kVariant;
    }
  }
};

extern "C" const fidl_type_t test_placementofattributes_ExampleTableTable;

class ExampleTable final {
 private:
  struct Storage_;

 public:
  ExampleTable(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ExampleTable() noexcept = default;
  ExampleTable(ExampleTable&&) noexcept = default;
  ExampleTable& operator=(ExampleTable&&) noexcept = default;
  ExampleTable(const ExampleTable& other) noexcept
      : ExampleTable(other.CloneStorage_()) {}
  ExampleTable& operator=(const ExampleTable& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const ExampleTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_placementofattributes::ExampleTable>::Equal(this, &other);
  }
  bool operator!=(const ExampleTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_placementofattributes::ExampleTable>::Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.member.has_value()); }

  const cpp17::optional<uint32_t>& member() const { return storage_.member; }
  ::cpp17::optional<uint32_t>& member() { return storage_.member; }

 private:
  struct Storage_ final {
    ::cpp17::optional<uint32_t> member{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_placementofattributes::ExampleTable>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_placementofattributes::ExampleTable>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, uint32_t>{
          1, &Storage_::member});
};

extern "C" const fidl_type_t test_placementofattributes_ExampleStructTable;

class ExampleStruct final {
 private:
  struct Storage_;

 public:
  ExampleStruct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ExampleStruct(uint32_t member) noexcept
      : storage_({.member = std::move(member)}) {}
  ExampleStruct() : ExampleStruct(Storage_{}) {}

  ExampleStruct(ExampleStruct&&) noexcept = default;
  ExampleStruct& operator=(ExampleStruct&&) noexcept = default;
  ExampleStruct(const ExampleStruct& other) noexcept
      : ExampleStruct(other.CloneStorage_()) {}
  ExampleStruct& operator=(const ExampleStruct& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const ExampleStruct& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_placementofattributes::ExampleStruct, 4, 4>::Equal(this, &other);
  }
  bool operator!=(const ExampleStruct& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_placementofattributes::ExampleStruct, 4, 4>::Equal(this, &other);
  }

  uint32_t member() const { return storage_.member; }

  uint32_t& member() { return storage_.member; }

 private:
  struct Storage_ final {
    uint32_t member{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_placementofattributes::ExampleStruct, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_placementofattributes::ExampleStruct>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, uint32_t>{
          &Storage_::member, 0, 0});
};

extern "C" const fidl_type_t
    test_placementofattributes_ExampleProtocolMethodRequestTable;

class ExampleProtocolMethodRequest final {
 private:
  struct Storage_;

 public:
  ExampleProtocolMethodRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ExampleProtocolMethodRequest(::test_exampleusing::Empty arg) noexcept
      : storage_({.arg = std::move(arg)}) {}
  ExampleProtocolMethodRequest() : ExampleProtocolMethodRequest(Storage_{}) {}

  ExampleProtocolMethodRequest(ExampleProtocolMethodRequest&&) noexcept =
      default;
  ExampleProtocolMethodRequest& operator=(
      ExampleProtocolMethodRequest&&) noexcept = default;
  ExampleProtocolMethodRequest(
      const ExampleProtocolMethodRequest& other) noexcept
      : ExampleProtocolMethodRequest(other.CloneStorage_()) {}
  ExampleProtocolMethodRequest& operator=(
      const ExampleProtocolMethodRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const ExampleProtocolMethodRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_placementofattributes::ExampleProtocolMethodRequest, 1,
        1>::Equal(this, &other);
  }
  bool operator!=(const ExampleProtocolMethodRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_placementofattributes::ExampleProtocolMethodRequest, 1,
        1>::Equal(this, &other);
  }

  const ::test_exampleusing::Empty& arg() const { return storage_.arg; }

  ::test_exampleusing::Empty& arg() { return storage_.arg; }

 private:
  struct Storage_ final {
    ::test_exampleusing::Empty arg{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_placementofattributes::ExampleProtocolMethodRequest, 1, 1>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_placementofattributes::ExampleProtocolMethodRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::test_exampleusing::Empty>{
          &Storage_::arg, 0, 0});
};

constexpr uint32_t EXAMPLE_CONST = 0u;

}  // namespace test_placementofattributes
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_placementofattributes_ExampleStructTable;

template <>
struct IsFidlType<::test_placementofattributes::ExampleStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_placementofattributes::ExampleStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_placementofattributes_ExampleStructTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_placementofattributes::ExampleStruct>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_placementofattributes::ExampleStruct, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_placementofattributes::ExampleStruct>
    : public internal::BoolConstant<
          !HasPadding<::test_placementofattributes::ExampleStruct>::value &&
          internal::NaturalIsMemcpyCompatible<uint32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t
    test_placementofattributes_ExampleProtocolMethodRequestTable;

template <>
struct IsFidlType<::test_placementofattributes::ExampleProtocolMethodRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_placementofattributes::ExampleProtocolMethodRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_placementofattributes_ExampleProtocolMethodRequestTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_placementofattributes::ExampleProtocolMethodRequest>
    final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_placementofattributes::ExampleProtocolMethodRequest, 1, 1> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_placementofattributes::ExampleProtocolMethodRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_placementofattributes::
                          ExampleProtocolMethodRequest>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::test_exampleusing::Empty>::value> {};

#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_placementofattributes::ExampleTable>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_placementofattributes::ExampleTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_placementofattributes::ExampleTable> {};

template <>
struct IsFidlType<::test_placementofattributes::ExampleXUnion>
    : public std::true_type {};
template <>
struct IsUnion<::test_placementofattributes::ExampleXUnion>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<
    ::test_placementofattributes::ExampleXUnion>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_placementofattributes::ExampleXUnion> {};

template <>
struct IsFidlType<::test_placementofattributes::ExampleUnion>
    : public std::true_type {};
template <>
struct IsUnion<::test_placementofattributes::ExampleUnion>
    : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_placementofattributes::ExampleUnion>
    final : public ::fidl::internal::NaturalUnionCodingTraits<
                ::test_placementofattributes::ExampleUnion> {};

template <>
struct internal::NaturalCodingTraits<
    ::test_placementofattributes::ExampleBits> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_placementofattributes::ExampleBits* value,
                     size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_placementofattributes::ExampleBits>(
        offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_placementofattributes::ExampleBits* value,
                     size_t offset) {
    *value =
        *decoder->template GetPtr<::test_placementofattributes::ExampleBits>(
            offset);
  }
};

template <>
struct internal::NaturalCodingTraits<
    ::test_placementofattributes::ExampleEnum> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_placementofattributes::ExampleEnum* value,
                     size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_placementofattributes::ExampleEnum>(
        offset) = *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_placementofattributes::ExampleEnum* value,
                     size_t offset) {
    *value =
        *decoder->template GetPtr<::test_placementofattributes::ExampleEnum>(
            offset);
  }
};

}  // namespace fidl
