// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.emptystruct/cpp/markers.h>
#include <fidl/test.emptystruct/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace test_emptystruct {
class EmptyProtocol;

__LOCAL extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendRequestTable;

__LOCAL extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolReceiveRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable;
}  // namespace test_emptystruct
template <>
struct ::fidl::internal::WireOrdinal<::test_emptystruct::EmptyProtocol::Send>
    final {
  static constexpr uint64_t value = 1378773277029173000lu;
};
template <>
struct ::fidl::internal::WireOrdinal<::test_emptystruct::EmptyProtocol::Receive>
    final {
  static constexpr uint64_t value = 2301564782476583487lu;
};
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    final {
  static constexpr uint64_t value = 534401212734647530lu;
};

namespace test_emptystruct {}  // namespace test_emptystruct
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<::test_emptystruct::EmptyProtocol> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<::test_emptystruct::EmptyProtocol>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::test_emptystruct::EmptyProtocol>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::test_emptystruct::EmptyProtocol>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send> final {
  FIDL_ALIGNDECL
  ::test_emptystruct::wire::Empty e;

  explicit WireRequest(const ::test_emptystruct::wire::Empty& e) : e(e) {}
  WireRequest() = default;
};

template <>
struct ::fidl::internal::TransactionalRequest<
    ::test_emptystruct::EmptyProtocol::Send>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send> body;
  explicit TransactionalRequest(const ::test_emptystruct::wire::Empty& e)
      : body(::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send>(e)) {
    _InitHeader();
  }
  TransactionalRequest() { _InitHeader(); }

 private:
  void _InitHeader();
};

template <>
struct ::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive> final {
  FIDL_ALIGNDECL
  ::test_emptystruct::wire::Empty e;

  explicit WireEvent(const ::test_emptystruct::wire::Empty& e) : e(e) {}
  WireEvent() = default;
};

template <>
struct ::fidl::internal::TransactionalEvent<
    ::test_emptystruct::EmptyProtocol::Receive>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive> body;
  explicit TransactionalEvent(const ::test_emptystruct::wire::Empty& e)
      : body(::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive>(e)) {
    _InitHeader();
  }
  TransactionalEvent() { _InitHeader(); }

 private:
  void _InitHeader();
};

template <>
struct ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::SendAndReceive>
    final {
  FIDL_ALIGNDECL
  ::test_emptystruct::wire::Empty e;

  explicit WireRequest(const ::test_emptystruct::wire::Empty& e) : e(e) {}
  WireRequest() = default;
  using ResponseType =
      ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>;
};

template <>
struct ::fidl::internal::TransactionalRequest<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::SendAndReceive> body;
  explicit TransactionalRequest(const ::test_emptystruct::wire::Empty& e)
      : body(::fidl::WireRequest<
             ::test_emptystruct::EmptyProtocol::SendAndReceive>(e)) {
    _InitHeader();
  }
  TransactionalRequest() { _InitHeader(); }
  using ResponseType = ::fidl::internal::TransactionalResponse<
      ::test_emptystruct::EmptyProtocol::SendAndReceive>;

 private:
  void _InitHeader();
};

template <>
struct ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>
    final {
  FIDL_ALIGNDECL
  ::test_emptystruct::wire::Empty e;

  explicit WireResponse(const ::test_emptystruct::wire::Empty& e) : e(e) {}
  WireResponse() = default;
};

template <>
struct ::fidl::internal::TransactionalResponse<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive> body;
  explicit TransactionalResponse(const ::test_emptystruct::wire::Empty& e)
      : body(::fidl::WireResponse<
             ::test_emptystruct::EmptyProtocol::SendAndReceive>(e)) {
    _InitHeader();
  }
  TransactionalResponse() { _InitHeader(); }

 private:
  void _InitHeader();
};

namespace fidl {

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<
    ::test_emptystruct::EmptyProtocol::Send>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<
    ::test_emptystruct::EmptyProtocol::Send>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send>>
    : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<
    ::test_emptystruct::EmptyProtocol::Send>> {
  static constexpr const fidl_type_t* kType =
      &::test_emptystruct::test_emptystruct_EmptyProtocolSendRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(1 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(1 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(sizeof(::fidl::internal::TransactionalRequest<
                     ::test_emptystruct::EmptyProtocol::Send>) ==
              TypeTraits<::fidl::internal::TransactionalRequest<
                  ::test_emptystruct::EmptyProtocol::Send>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_emptystruct::EmptyProtocol::Send>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_emptystruct::EmptyProtocol::Send>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<
    ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send>> {
  static constexpr const fidl_type_t* kType =
      &::test_emptystruct::test_emptystruct_EmptyProtocolSendRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(1);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(1);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};
static_assert(
    sizeof(::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send>) ==
    TypeTraits<::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send>>::
        kPrimarySize);
static_assert(
    offsetof(::fidl::WireRequest<::test_emptystruct::EmptyProtocol::Send>, e) ==
    0);

template <>
struct IsFidlType<::fidl::internal::TransactionalEvent<
    ::test_emptystruct::EmptyProtocol::Receive>> : public std::true_type {};
template <>
struct IsFidlType<::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalEvent<
    ::test_emptystruct::EmptyProtocol::Receive>> : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive>>
    : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalEvent<
    ::test_emptystruct::EmptyProtocol::Receive>> {
  static constexpr const fidl_type_t* kType =
      &::test_emptystruct::test_emptystruct_EmptyProtocolReceiveRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(1 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(1 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(sizeof(::fidl::internal::TransactionalEvent<
                     ::test_emptystruct::EmptyProtocol::Receive>) ==
              TypeTraits<::fidl::internal::TransactionalEvent<
                  ::test_emptystruct::EmptyProtocol::Receive>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalEvent<
                           ::test_emptystruct::EmptyProtocol::Receive>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalEvent<
                           ::test_emptystruct::EmptyProtocol::Receive>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<
    ::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive>> {
  static constexpr const fidl_type_t* kType =
      &::test_emptystruct::test_emptystruct_EmptyProtocolReceiveRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(1);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(1);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(
    sizeof(::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive>) ==
    TypeTraits<::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive>>::
        kPrimarySize);
static_assert(
    offsetof(::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive>,
             e) == 0);

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>>
    : public std::true_type {};
template <>
struct IsFidlType<
    ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::SendAndReceive>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::SendAndReceive>>
    : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>> {
  static constexpr const fidl_type_t* kType =
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(1 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(1 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(
    sizeof(::fidl::internal::TransactionalRequest<
           ::test_emptystruct::EmptyProtocol::SendAndReceive>) ==
    TypeTraits<::fidl::internal::TransactionalRequest<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_emptystruct::EmptyProtocol::SendAndReceive>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_emptystruct::EmptyProtocol::SendAndReceive>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<
    ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::SendAndReceive>> {
  static constexpr const fidl_type_t* kType =
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveRequestTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(1);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(1);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};
static_assert(
    sizeof(::fidl::WireRequest<
           ::test_emptystruct::EmptyProtocol::SendAndReceive>) ==
    TypeTraits<::fidl::WireRequest<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>>::kPrimarySize);
static_assert(
    offsetof(
        ::fidl::WireRequest<::test_emptystruct::EmptyProtocol::SendAndReceive>,
        e) == 0);

template <>
struct IsFidlType<::fidl::internal::TransactionalResponse<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>>
    : public std::true_type {};
template <>
struct IsFidlType<
    ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalResponse<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>>
    : public std::false_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalResponse<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>> {
  static constexpr const fidl_type_t* kType =
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(1 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(1 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};

static_assert(
    sizeof(::fidl::internal::TransactionalResponse<
           ::test_emptystruct::EmptyProtocol::SendAndReceive>) ==
    TypeTraits<::fidl::internal::TransactionalResponse<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalResponse<
                           ::test_emptystruct::EmptyProtocol::SendAndReceive>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalResponse<
                           ::test_emptystruct::EmptyProtocol::SendAndReceive>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<
    ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>> {
  static constexpr const fidl_type_t* kType =
      &::test_emptystruct::
          test_emptystruct_EmptyProtocolSendAndReceiveTopResponseTable;
  static constexpr uint32_t kMaxNumHandles = 0;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(1);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(1);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kResponse;
};
static_assert(
    sizeof(::fidl::WireResponse<
           ::test_emptystruct::EmptyProtocol::SendAndReceive>) ==
    TypeTraits<::fidl::WireResponse<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>>::kPrimarySize);
static_assert(
    offsetof(
        ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>,
        e) == 0);

}  // namespace fidl
namespace test_emptystruct {
#ifdef __Fuchsia__
}  // namespace test_emptystruct
template <>
class ::fidl::WireResult<::test_emptystruct::EmptyProtocol::Send> final
    : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> client,
             ::fidl::internal::TransactionalRequest<
                 ::test_emptystruct::EmptyProtocol::Send>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<::test_emptystruct::EmptyProtocol::Send> final
    : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::internal::TransactionalRequest<
          ::test_emptystruct::EmptyProtocol::Send>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::WireResult<::test_emptystruct::EmptyProtocol::SendAndReceive>
    final : public ::fidl::Result {
 public:
  WireResult(::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> client,
             ::fidl::internal::TransactionalRequest<
                 ::test_emptystruct::EmptyProtocol::SendAndReceive>* request);
  WireResult(::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> client,
             ::fidl::internal::TransactionalRequest<
                 ::test_emptystruct::EmptyProtocol::SendAndReceive>* request,
             zx_time_t _deadline);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;
  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<::fidl::WireResponse<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>*>(
        bytes_.data() + sizeof(fidl_message_header_t));
  }
  const ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return reinterpret_cast<const ::fidl::WireResponse<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>*>(
        bytes_.data() + sizeof(fidl_message_header_t));
  }

  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>&
  operator*() const {
    return value();
  }

 private:
  ::fidl::internal::InlineMessageBuffer<24> bytes_;
};
template <>
class ::fidl::WireUnownedResult<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::internal::TransactionalRequest<
          ::test_emptystruct::EmptyProtocol::SendAndReceive>* request);
  explicit WireUnownedResult(
      ::fidl::internal::TransactionalResponse<
          ::test_emptystruct::EmptyProtocol::SendAndReceive>* response)
      : bytes_(reinterpret_cast<uint8_t*>(response)) {}
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  explicit WireUnownedResult(
      ::fidl::unstable::DecodedMessage<::fidl::internal::TransactionalResponse<
          ::test_emptystruct::EmptyProtocol::SendAndReceive>>&& decoded,
      ::fidl::internal::IncomingTransportContext context)
      : ::fidl::Result(decoded) {
    if (decoded.ok()) {
      bytes_ = reinterpret_cast<uint8_t*>(decoded.PrimaryObject());
    } else {
      bytes_ = nullptr;
    }
    decoded.ReleasePrimaryObject();
  }
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>*
  Unwrap() {
    ZX_DEBUG_ASSERT(ok());
    return &(reinterpret_cast<::fidl::internal::TransactionalResponse<
                 ::test_emptystruct::EmptyProtocol::SendAndReceive>*>(bytes_)
                 ->body);
  }
  const ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>*
  Unwrap() const {
    ZX_DEBUG_ASSERT(ok());
    return &(reinterpret_cast<const ::fidl::internal::TransactionalResponse<
                 ::test_emptystruct::EmptyProtocol::SendAndReceive>*>(bytes_)
                 ->body);
  }

  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>&
  value() {
    return *Unwrap();
  }
  const ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>&
  value() const {
    return *Unwrap();
  }

  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>*
  operator->() {
    return &value();
  }
  const ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>*
  operator->() const {
    return &value();
  }

  ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>&
  operator*() {
    return value();
  }
  const ::fidl::WireResponse<::test_emptystruct::EmptyProtocol::SendAndReceive>&
  operator*() const {
    return value();
  }

 private:
  uint8_t* bytes_;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::test_emptystruct::EmptyProtocol> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
  virtual void Receive(
      ::fidl::WireEvent<::test_emptystruct::EmptyProtocol::Receive>* event) {}
};

template <>
class ::fidl::WireAsyncEventHandler<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_emptystruct::EmptyProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_emptystruct::EmptyProtocol> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<::test_emptystruct::EmptyProtocol>
    final
    : public ::fidl::internal::IncomingEventDispatcher<
          ::fidl::WireAsyncEventHandler<::test_emptystruct::EmptyProtocol>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<::test_emptystruct::EmptyProtocol>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a |fidl::ClientEnd<::test_emptystruct::EmptyProtocol>|,
// avoiding setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<::test_emptystruct::EmptyProtocol>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::test_emptystruct::EmptyProtocol>> {
 public:
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_emptystruct::EmptyProtocol::Send> Send(
      const ::test_emptystruct::wire::Empty& e) {
    ::fidl::internal::TransactionalRequest<
        ::test_emptystruct::EmptyProtocol::Send>
        _request{e};
    return ::fidl::WireResult<::test_emptystruct::EmptyProtocol::Send>(
        _client_end(), &_request);
  }

  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_emptystruct::EmptyProtocol::SendAndReceive>
  SendAndReceive(const ::test_emptystruct::wire::Empty& e) {
    ::fidl::internal::TransactionalRequest<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>
        _request{e};
    return ::fidl::WireResult<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>(_client_end(),
                                                           &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::test_emptystruct::EmptyProtocol>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_emptystruct::EmptyProtocol>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_emptystruct::EmptyProtocol::Send> Send(
      const ::test_emptystruct::wire::Empty& e) {
    ::fidl::internal::TransactionalRequest<
        ::test_emptystruct::EmptyProtocol::Send>
        _request{e};
    return ::fidl::WireUnownedResult<::test_emptystruct::EmptyProtocol::Send>(
        _client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_emptystruct::EmptyProtocol::SendAndReceive>
  SendAndReceive(const ::test_emptystruct::wire::Empty& e) {
    ::fidl::internal::TransactionalRequest<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>
        _request{e};
    return ::fidl::WireUnownedResult<
        ::test_emptystruct::EmptyProtocol::SendAndReceive>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol> _client_end()
      const {
    return ::fidl::UnownedClientEnd<::test_emptystruct::EmptyProtocol>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireCompleterImpl<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    : public ::fidl::internal::CompleterImplBase<
          ::test_emptystruct::EmptyProtocol::SendAndReceive> {
 public:
  using CompleterImplBase::CompleterImplBase;

  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.

  ::fidl::Result Reply(const ::test_emptystruct::wire::Empty& e);
};

template <>
class ::fidl::internal::WireBufferCompleterImpl<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    : public ::fidl::internal::BufferCompleterImplBase {
 public:
  using BufferCompleterImplBase::BufferCompleterImplBase;

  // In the following methods, the return value indicates internal errors during
  // the reply, such as encoding or writing to the transport.
  // Note that any error will automatically lead to the destruction of the
  // binding, after which the |on_unbound| callback will be triggered with a
  // detailed reason.
  //
  // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
  //
  // Because the reply status is identical to the unbinding status, it can be
  // safely ignored.

  ::fidl::Result Reply(const ::test_emptystruct::wire::Empty& e);
};

template <>
class ::fidl::internal::WireCompleterBase<
    ::test_emptystruct::EmptyProtocol::SendAndReceive>
    : public ::fidl::CompleterBase,
      public ::fidl::internal::WireCompleterImpl<
          ::test_emptystruct::EmptyProtocol::SendAndReceive> {
 public:
  WireCompleterBase(::fidl::Transaction* transaction, bool owned,
                    bool expects_reply)
      : CompleterBase(transaction, owned, expects_reply),
        WireCompleterImpl(this) {}
  WireCompleterBase(WireCompleterBase&& other) noexcept
      : CompleterBase(std::move(other)), WireCompleterImpl(this) {}
  WireCompleterBase& operator=(WireCompleterBase&& other) noexcept {
    CompleterBase::operator=(std::move(other));
    WireCompleterImpl::_set_core(this);
    return *this;
  }
};

template <>
struct ::fidl::internal::WireMethodTypes<
    ::test_emptystruct::EmptyProtocol::SendAndReceive> {
  using Completer = fidl::Completer<::fidl::internal::WireCompleterBase<
      ::test_emptystruct::EmptyProtocol::SendAndReceive>>;
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_emptystruct::EmptyProtocol;

  using SendCompleter =
      ::fidl::internal::WireCompleter<::test_emptystruct::EmptyProtocol::Send>;
  using SendRequestView = ::fidl::internal::WireRequestView<
      ::test_emptystruct::EmptyProtocol::Send>;

  virtual void Send(SendRequestView request,
                    SendCompleter::Sync& _completer) = 0;

  using SendAndReceiveCompleter = ::fidl::internal::WireCompleter<
      ::test_emptystruct::EmptyProtocol::SendAndReceive>;
  using SendAndReceiveRequestView = ::fidl::internal::WireRequestView<
      ::test_emptystruct::EmptyProtocol::SendAndReceive>;

  virtual void SendAndReceive(SendAndReceiveRequestView request,
                              SendAndReceiveCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
namespace test_emptystruct {
#endif  // __Fuchsia__

}  // namespace test_emptystruct
namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireWeakOnewayClientImpl<
    ::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result Send(const ::test_emptystruct::wire::Empty& e);
};

template <>
class ::fidl::internal::WireWeakAsyncClientImpl<
    ::test_emptystruct::EmptyProtocol>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_emptystruct::EmptyProtocol> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
  // Allocates 24 bytes of request buffer on the stack. The callback is stored
  // on the heap.
  void SendAndReceive(const ::test_emptystruct::wire::Empty& e,
                      ::fidl::WireClientCallback<
                          ::test_emptystruct::EmptyProtocol::SendAndReceive>
                          _cb);
  void SendAndReceive(
      const ::test_emptystruct::wire::Empty& e,
      ::fit::callback<
          void(::fidl::WireResponse<
               ::test_emptystruct::EmptyProtocol::SendAndReceive>* response)>
          _cb);
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;

  // Caller provides the backing storage for FIDL message.
  ::fidl::Result Send(const ::test_emptystruct::wire::Empty& e);
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_emptystruct::EmptyProtocol>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_emptystruct::EmptyProtocol> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;

  // Caller provides the backing storage for FIDL message.
  void SendAndReceive(
      const ::test_emptystruct::wire::Empty& e,
      ::fidl::WireResponseContext<
          ::test_emptystruct::EmptyProtocol::SendAndReceive>* _context);
};
template <>
class ::fidl::internal::WireWeakSyncClientImpl<
    ::test_emptystruct::EmptyProtocol>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_emptystruct::EmptyProtocol> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;

  // Allocates 48 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_emptystruct::EmptyProtocol::SendAndReceive>
  SendAndReceive(const ::test_emptystruct::wire::Empty& e);
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
template <>
class ::fidl::internal::WireWeakEventSender<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;

  fidl::Result Receive(const ::test_emptystruct::wire::Empty& e);
};

template <>
class ::fidl::internal::WireWeakBufferEventSender<
    ::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::WeakBufferEventSenderBase {
 public:
  using WeakBufferEventSenderBase::WeakBufferEventSenderBase;

  fidl::Result Receive(const ::test_emptystruct::wire::Empty& e);
};

template <>
class ::fidl::internal::WireEventSender<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireEventSender<
              ::test_emptystruct::EmptyProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;

  fidl::Result Receive(const ::test_emptystruct::wire::Empty& e);
};

template <>
class ::fidl::internal::WireBufferEventSender<::test_emptystruct::EmptyProtocol>
    : public ::fidl::internal::SyncEndpointBufferVeneer<
          ::fidl::internal::WireBufferEventSender<
              ::test_emptystruct::EmptyProtocol>> {
 public:
  using SyncEndpointBufferVeneer::SyncEndpointBufferVeneer;

  fidl::Result Receive(const ::test_emptystruct::wire::Empty& e);
};
#endif  // __Fuchsia__
