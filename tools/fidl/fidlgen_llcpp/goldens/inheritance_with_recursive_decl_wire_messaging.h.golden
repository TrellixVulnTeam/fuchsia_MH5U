// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.inheritancewithrecursivedecl/cpp/markers.h>
#include <fidl/test.inheritancewithrecursivedecl/cpp/wire_types.h>
#include <lib/fidl/llcpp/wire_messaging.h>

#ifdef __Fuchsia__

#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>

#endif  // __Fuchsia__

namespace test_inheritancewithrecursivedecl {
class Parent;

class Child;

__LOCAL extern "C" const fidl_type_t
    test_inheritancewithrecursivedecl_ParentFirstRequestTable;

}  // namespace test_inheritancewithrecursivedecl
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_inheritancewithrecursivedecl::Parent::First>
    final {
  static constexpr uint64_t value = 3973163707930985819lu;
};

namespace test_inheritancewithrecursivedecl {
}  // namespace test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::test_inheritancewithrecursivedecl::Parent> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::test_inheritancewithrecursivedecl::Parent>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::test_inheritancewithrecursivedecl::Parent>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::test_inheritancewithrecursivedecl::Parent>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Parent::First>
    final {
  FIDL_ALIGNDECL
  ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent> request;

  explicit WireRequest(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request)
      : request(std::move(request)) {}
  WireRequest() = default;
  void _CloseHandles();
};

template <>
struct ::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Parent::First>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Parent::First> body;
  explicit TransactionalRequest(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request)
      : body(::fidl::WireRequest<
             ::test_inheritancewithrecursivedecl::Parent::First>(
            std::move(request))) {
    _InitHeader();
  }
  TransactionalRequest() { _InitHeader(); }
  void _CloseHandles() { body._CloseHandles(); }

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Parent::First>>
    : public std::true_type {};
template <>
struct IsFidlType<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Parent::First>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Parent::First>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Parent::First>>
    : public std::false_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Parent::First>>
    : public std::true_type {};
template <>
struct IsResource<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Parent::First>>
    : public std::true_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Parent::First>> {
  static constexpr const fidl_type_t* kType =
      &::test_inheritancewithrecursivedecl::
          test_inheritancewithrecursivedecl_ParentFirstRequestTable;
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(
    sizeof(::fidl::internal::TransactionalRequest<
           ::test_inheritancewithrecursivedecl::Parent::First>) ==
    TypeTraits<::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Parent::First>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_inheritancewithrecursivedecl::Parent::First>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_inheritancewithrecursivedecl::Parent::First>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Parent::First>> {
  static constexpr const fidl_type_t* kType =
      &::test_inheritancewithrecursivedecl::
          test_inheritancewithrecursivedecl_ParentFirstRequestTable;
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(4);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(4);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};
static_assert(
    sizeof(::fidl::WireRequest<
           ::test_inheritancewithrecursivedecl::Parent::First>) ==
    TypeTraits<::fidl::WireRequest<
        ::test_inheritancewithrecursivedecl::Parent::First>>::kPrimarySize);
static_assert(
    offsetof(
        ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Parent::First>,
        request) == 0);
#endif  // __Fuchsia__

}  // namespace fidl
namespace test_inheritancewithrecursivedecl {
#ifdef __Fuchsia__
}  // namespace test_inheritancewithrecursivedecl
template <>
class ::fidl::WireResult<::test_inheritancewithrecursivedecl::Parent::First>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Parent>
          client,
      ::fidl::internal::TransactionalRequest<
          ::test_inheritancewithrecursivedecl::Parent::First>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<
    ::test_inheritancewithrecursivedecl::Parent::First>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Parent>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::internal::TransactionalRequest<
          ::test_inheritancewithrecursivedecl::Parent::First>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::test_inheritancewithrecursivedecl::Parent> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_inheritancewithrecursivedecl::Parent>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_inheritancewithrecursivedecl::Parent> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Parent>
          client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::WireAsyncEventHandler<
                    ::test_inheritancewithrecursivedecl::Parent>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<
          ::test_inheritancewithrecursivedecl::Parent>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a
// |fidl::ClientEnd<::test_inheritancewithrecursivedecl::Parent>|, avoiding
// setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::test_inheritancewithrecursivedecl::Parent>> {
 public:
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_inheritancewithrecursivedecl::Parent::First> First(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&&
          request) {
    ::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Parent::First>
        _request{std::move(request)};
    return ::fidl::WireResult<
        ::test_inheritancewithrecursivedecl::Parent::First>(_client_end(),
                                                            &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Parent>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::test_inheritancewithrecursivedecl::Parent>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_inheritancewithrecursivedecl::Parent>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_inheritancewithrecursivedecl::Parent::First>
  First(::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&&
            request) {
    ::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Parent::First>
        _request{std::move(request)};
    return ::fidl::WireUnownedResult<
        ::test_inheritancewithrecursivedecl::Parent::First>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Parent>
  _client_end() const {
    return ::fidl::UnownedClientEnd<
        ::test_inheritancewithrecursivedecl::Parent>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_inheritancewithrecursivedecl::Parent;

  using FirstCompleter = ::fidl::internal::WireCompleter<
      ::test_inheritancewithrecursivedecl::Parent::First>;
  using FirstRequestView = ::fidl::internal::WireRequestView<
      ::test_inheritancewithrecursivedecl::Parent::First>;

  virtual void First(FirstRequestView request,
                     FirstCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
namespace test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

__LOCAL extern "C" const fidl_type_t
    test_inheritancewithrecursivedecl_ChildSecondRequestTable;

}  // namespace test_inheritancewithrecursivedecl
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_inheritancewithrecursivedecl::Child::First>
    final {
  static constexpr uint64_t value = 3973163707930985819lu;
};
template <>
struct ::fidl::internal::WireOrdinal<
    ::test_inheritancewithrecursivedecl::Child::Second>
    final {
  static constexpr uint64_t value = 2545123272820824165lu;
};

namespace test_inheritancewithrecursivedecl {
}  // namespace test_inheritancewithrecursivedecl
#ifdef __Fuchsia__

template <>
struct ::fidl::internal::ProtocolDetails<
    ::test_inheritancewithrecursivedecl::Child> {};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::WireServerDispatcher<
    ::test_inheritancewithrecursivedecl::Child>
    final {
  WireServerDispatcher() = delete;
  static ::fidl::DispatchResult TryDispatch(
      ::fidl::WireServer<::test_inheritancewithrecursivedecl::Child>* impl,
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);
  static void Dispatch(
      ::fidl::WireServer<::test_inheritancewithrecursivedecl::Child>* impl,
      ::fidl::IncomingMessage&& msg,
      internal::IncomingTransportContext transport_context,
      ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::First>
    final {
  FIDL_ALIGNDECL
  ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent> request;

  explicit WireRequest(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request)
      : request(std::move(request)) {}
  WireRequest() = default;
  void _CloseHandles();
};

template <>
struct ::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::First>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::First> body;
  explicit TransactionalRequest(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request)
      : body(::fidl::WireRequest<
             ::test_inheritancewithrecursivedecl::Child::First>(
            std::move(request))) {
    _InitHeader();
  }
  TransactionalRequest() { _InitHeader(); }
  void _CloseHandles() { body._CloseHandles(); }

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
struct ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::Second>
    final {
  FIDL_ALIGNDECL
  ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent> request;

  explicit WireRequest(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request)
      : request(std::move(request)) {}
  WireRequest() = default;
  void _CloseHandles();
};

template <>
struct ::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::Second>
    final {
  FIDL_ALIGNDECL
  fidl_message_header_t header;

  ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::Second> body;
  explicit TransactionalRequest(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request)
      : body(::fidl::WireRequest<
             ::test_inheritancewithrecursivedecl::Child::Second>(
            std::move(request))) {
    _InitHeader();
  }
  TransactionalRequest() { _InitHeader(); }
  void _CloseHandles() { body._CloseHandles(); }

 private:
  void _InitHeader();
};
#endif  // __Fuchsia__

namespace fidl {

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::First>>
    : public std::true_type {};
template <>
struct IsFidlType<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::First>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::First>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::First>>
    : public std::false_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::First>>
    : public std::true_type {};
template <>
struct IsResource<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::First>>
    : public std::true_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::First>> {
  static constexpr const fidl_type_t* kType =
      &::test_inheritancewithrecursivedecl::
          test_inheritancewithrecursivedecl_ParentFirstRequestTable;
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(
    sizeof(::fidl::internal::TransactionalRequest<
           ::test_inheritancewithrecursivedecl::Child::First>) ==
    TypeTraits<::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Child::First>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_inheritancewithrecursivedecl::Child::First>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_inheritancewithrecursivedecl::Child::First>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::First>> {
  static constexpr const fidl_type_t* kType =
      &::test_inheritancewithrecursivedecl::
          test_inheritancewithrecursivedecl_ParentFirstRequestTable;
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(4);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(4);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};
static_assert(
    sizeof(::fidl::WireRequest<
           ::test_inheritancewithrecursivedecl::Child::First>) ==
    TypeTraits<::fidl::WireRequest<
        ::test_inheritancewithrecursivedecl::Child::First>>::kPrimarySize);
static_assert(
    offsetof(
        ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::First>,
        request) == 0);
#endif  // __Fuchsia__

template <>
struct IsFidlType<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::Second>>
    : public std::true_type {};
template <>
struct IsFidlType<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::Second>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::Second>>
    : public std::true_type {};
template <>
struct IsFidlTransactionalMessage<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::Second>>
    : public std::false_type {};
#ifdef __Fuchsia__
template <>
struct IsResource<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::Second>>
    : public std::true_type {};
template <>
struct IsResource<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::Second>>
    : public std::true_type {};

template <>
struct TypeTraits<::fidl::internal::TransactionalRequest<
    ::test_inheritancewithrecursivedecl::Child::Second>> {
  static constexpr const fidl_type_t* kType =
      &::test_inheritancewithrecursivedecl::
          test_inheritancewithrecursivedecl_ChildSecondRequestTable;
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kPrimarySize =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kPrimarySizeV1 =
      FIDL_ALIGN(4 + sizeof(fidl_message_header_t));
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};

static_assert(
    sizeof(::fidl::internal::TransactionalRequest<
           ::test_inheritancewithrecursivedecl::Child::Second>) ==
    TypeTraits<::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Child::Second>>::kPrimarySize);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_inheritancewithrecursivedecl::Child::Second>,
                       header) == 0);
static_assert(offsetof(::fidl::internal::TransactionalRequest<
                           ::test_inheritancewithrecursivedecl::Child::Second>,
                       body) == sizeof(fidl_message_header_t));

template <>
struct TypeTraits<
    ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::Second>> {
  static constexpr const fidl_type_t* kType =
      &::test_inheritancewithrecursivedecl::
          test_inheritancewithrecursivedecl_ChildSecondRequestTable;
  static constexpr uint32_t kMaxNumHandles = 1;
  static constexpr uint32_t kPrimarySize = FIDL_ALIGN(4);
  static constexpr uint32_t kPrimarySizeV1 = FIDL_ALIGN(4);
  static constexpr uint32_t kMaxOutOfLine = 0;
  static constexpr uint32_t kMaxOutOfLineV1 = 0;
  static constexpr bool kHasFlexibleEnvelope = false;
  static constexpr bool kHasPointer = false;
  static constexpr ::fidl::internal::TransactionalMessageKind kMessageKind =
      ::fidl::internal::TransactionalMessageKind::kRequest;
};
static_assert(
    sizeof(::fidl::WireRequest<
           ::test_inheritancewithrecursivedecl::Child::Second>) ==
    TypeTraits<::fidl::WireRequest<
        ::test_inheritancewithrecursivedecl::Child::Second>>::kPrimarySize);
static_assert(
    offsetof(
        ::fidl::WireRequest<::test_inheritancewithrecursivedecl::Child::Second>,
        request) == 0);
#endif  // __Fuchsia__

}  // namespace fidl
namespace test_inheritancewithrecursivedecl {
#ifdef __Fuchsia__
}  // namespace test_inheritancewithrecursivedecl
template <>
class ::fidl::WireResult<::test_inheritancewithrecursivedecl::Child::First>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>
          client,
      ::fidl::internal::TransactionalRequest<
          ::test_inheritancewithrecursivedecl::Child::First>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<
    ::test_inheritancewithrecursivedecl::Child::First>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::internal::TransactionalRequest<
          ::test_inheritancewithrecursivedecl::Child::First>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::WireResult<::test_inheritancewithrecursivedecl::Child::Second>
    final : public ::fidl::Result {
 public:
  WireResult(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>
          client,
      ::fidl::internal::TransactionalRequest<
          ::test_inheritancewithrecursivedecl::Child::Second>* request);
  explicit WireResult(const ::fidl::Result& result) : ::fidl::Result(result) {}
  WireResult(WireResult&&) = delete;
  WireResult(const WireResult&) = delete;
  WireResult* operator=(WireResult&&) = delete;
  WireResult* operator=(const WireResult&) = delete;
  ~WireResult() = default;

 private:
};
template <>
class ::fidl::WireUnownedResult<
    ::test_inheritancewithrecursivedecl::Child::Second>
    final : public ::fidl::Result {
 public:
  explicit WireUnownedResult(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>
          client_end,
      ::fidl::internal::AnyBufferAllocator& allocator,
      ::fidl::internal::TransactionalRequest<
          ::test_inheritancewithrecursivedecl::Child::Second>* request);
  explicit WireUnownedResult(const ::fidl::Result& result)
      : ::fidl::Result(result) {}
  WireUnownedResult(WireUnownedResult&&) = delete;
  WireUnownedResult(const WireUnownedResult&) = delete;
  WireUnownedResult* operator=(WireUnownedResult&&) = delete;
  WireUnownedResult* operator=(const WireUnownedResult&) = delete;
  ~WireUnownedResult() = default;
};
template <>
class ::fidl::internal::WireEventHandlerInterface<
    ::test_inheritancewithrecursivedecl::Child> {
 public:
  WireEventHandlerInterface() = default;
  virtual ~WireEventHandlerInterface() = default;
};

template <>
class ::fidl::WireAsyncEventHandler<::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_inheritancewithrecursivedecl::Child>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  WireAsyncEventHandler() = default;
};

template <>
class ::fidl::WireSyncEventHandler<::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::WireEventHandlerInterface<
          ::test_inheritancewithrecursivedecl::Child> {
 public:
  WireSyncEventHandler() = default;

  // Method called when an unknown event is found. This methods gives the status
  // which, in this case, is returned by HandleOneEvent.
  virtual zx_status_t Unknown() = 0;

  // Handle all possible events defined in this protocol.
  // Blocks to consume exactly one message from the channel, then call the
  // corresponding virtual method.
  ::fidl::Result HandleOneEvent(
      ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>
          client_end);
};

template <>
class ::fidl::internal::WireEventDispatcher<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::WireAsyncEventHandler<
                    ::test_inheritancewithrecursivedecl::Child>> {
 public:
  explicit WireEventDispatcher(
      ::fidl::WireAsyncEventHandler<::test_inheritancewithrecursivedecl::Child>*
          event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      ::fidl::internal::IncomingTransportContext transport_context) override;
};

// Methods to make a sync FIDL call directly on an unowned handle or a
// const reference to a
// |fidl::ClientEnd<::test_inheritancewithrecursivedecl::Child>|, avoiding
// setting up a client.
template <>
class ::fidl::internal::WireSyncClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::SyncEndpointManagedVeneer<
                ::fidl::internal::WireSyncClientImpl<
                    ::test_inheritancewithrecursivedecl::Child>> {
 public:
  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_inheritancewithrecursivedecl::Child::First> First(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&&
          request) {
    ::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Child::First>
        _request{std::move(request)};
    return ::fidl::WireResult<
        ::test_inheritancewithrecursivedecl::Child::First>(_client_end(),
                                                           &_request);
  }

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::WireResult<::test_inheritancewithrecursivedecl::Child::Second> Second(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&&
          request) {
    ::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Child::Second>
        _request{std::move(request)};
    return ::fidl::WireResult<
        ::test_inheritancewithrecursivedecl::Child::Second>(_client_end(),
                                                            &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>
  _client_end() const {
    return ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

template <>
class ::fidl::internal::WireSyncBufferClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::SyncEndpointBufferVeneer<
                ::fidl::internal::WireSyncBufferClientImpl<
                    ::test_inheritancewithrecursivedecl::Child>> {
 public:
  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_inheritancewithrecursivedecl::Child::First>
  First(::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&&
            request) {
    ::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Child::First>
        _request{std::move(request)};
    return ::fidl::WireUnownedResult<
        ::test_inheritancewithrecursivedecl::Child::First>(
        _client_end(), _allocator(), &_request);
  }

  // Caller provides the backing storage for FIDL message via an argument to
  // `.buffer()`.
  ::fidl::WireUnownedResult<::test_inheritancewithrecursivedecl::Child::Second>
  Second(::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&&
             request) {
    ::fidl::internal::TransactionalRequest<
        ::test_inheritancewithrecursivedecl::Child::Second>
        _request{std::move(request)};
    return ::fidl::WireUnownedResult<
        ::test_inheritancewithrecursivedecl::Child::Second>(
        _client_end(), _allocator(), &_request);
  }

 private:
  ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>
  _client_end() const {
    return ::fidl::UnownedClientEnd<::test_inheritancewithrecursivedecl::Child>(
        _transport().get<::fidl::internal::ChannelTransport>());
  }
};

// Pure-virtual interface to be implemented by a server.
// This interface uses typed channels (i.e. |fidl::ClientEnd<SomeProtocol>|
// and |fidl::ServerEnd<SomeProtocol>|).
template <>
class ::fidl::WireServer<::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  WireServer() = default;
  virtual ~WireServer() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_inheritancewithrecursivedecl::Child;

  using FirstCompleter = ::fidl::internal::WireCompleter<
      ::test_inheritancewithrecursivedecl::Child::First>;
  using FirstRequestView = ::fidl::internal::WireRequestView<
      ::test_inheritancewithrecursivedecl::Child::First>;

  virtual void First(FirstRequestView request,
                     FirstCompleter::Sync& _completer) = 0;

  using SecondCompleter = ::fidl::internal::WireCompleter<
      ::test_inheritancewithrecursivedecl::Child::Second>;
  using SecondRequestView = ::fidl::internal::WireRequestView<
      ::test_inheritancewithrecursivedecl::Child::Second>;

  virtual void Second(SecondRequestView request,
                      SecondCompleter::Sync& _completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};
namespace test_inheritancewithrecursivedecl {
#endif  // __Fuchsia__

}  // namespace test_inheritancewithrecursivedecl
namespace fidl {

#ifdef __Fuchsia__
}  // namespace fidl
template <>
class ::fidl::internal::WireWeakOnewayClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result First(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request);
};

template <>
class ::fidl::internal::WireWeakAsyncClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_inheritancewithrecursivedecl::Parent> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;

  // Caller provides the backing storage for FIDL message.
  ::fidl::Result First(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request);
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_inheritancewithrecursivedecl::Parent> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;
};
template <>
class ::fidl::internal::WireWeakSyncClientImpl<
    ::test_inheritancewithrecursivedecl::Parent>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_inheritancewithrecursivedecl::Parent> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
};
namespace fidl {
#endif  // __Fuchsia__

}  // namespace fidl
#ifdef __Fuchsia__
template <>
class ::fidl::internal::WireWeakEventSender<
    ::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::WireWeakBufferEventSender<
    ::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::WeakBufferEventSenderBase {
 public:
  using WeakBufferEventSenderBase::WeakBufferEventSenderBase;
};

template <>
class ::fidl::internal::WireEventSender<
    ::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireEventSender<
              ::test_inheritancewithrecursivedecl::Parent>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};

template <>
class ::fidl::internal::WireBufferEventSender<
    ::test_inheritancewithrecursivedecl::Parent>
    : public ::fidl::internal::SyncEndpointBufferVeneer<
          ::fidl::internal::WireBufferEventSender<
              ::test_inheritancewithrecursivedecl::Parent>> {
 public:
  using SyncEndpointBufferVeneer::SyncEndpointBufferVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::internal::WireWeakOnewayClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::ClientImplBase {
 public:
  using ClientImplBase::ClientImplBase;

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result First(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request);

  // Allocates 40 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result Second(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request);
};

template <>
class ::fidl::internal::WireWeakAsyncClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_inheritancewithrecursivedecl::Child> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
};

template <>
class ::fidl::internal::WireWeakOnewayBufferClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::BufferClientImplBase {
 public:
  using BufferClientImplBase::BufferClientImplBase;

  // Caller provides the backing storage for FIDL message.
  ::fidl::Result First(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request);

  // Caller provides the backing storage for FIDL message.
  ::fidl::Result Second(
      ::fidl::ServerEnd<::test_inheritancewithrecursivedecl::Parent>&& request);
};

template <>
class ::fidl::internal::WireWeakAsyncBufferClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::WireWeakOnewayBufferClientImpl<
                ::test_inheritancewithrecursivedecl::Child> {
 public:
  using WireWeakOnewayBufferClientImpl::WireWeakOnewayBufferClientImpl;
};
template <>
class ::fidl::internal::WireWeakSyncClientImpl<
    ::test_inheritancewithrecursivedecl::Child>
    final : public ::fidl::internal::WireWeakOnewayClientImpl<
                ::test_inheritancewithrecursivedecl::Child> {
 public:
  using WireWeakOnewayClientImpl::WireWeakOnewayClientImpl;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::WireWeakEventSender<
    ::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::WireWeakBufferEventSender<
    ::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::WeakBufferEventSenderBase {
 public:
  using WeakBufferEventSenderBase::WeakBufferEventSenderBase;
};

template <>
class ::fidl::internal::WireEventSender<
    ::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::WireEventSender<
              ::test_inheritancewithrecursivedecl::Child>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};

template <>
class ::fidl::internal::WireBufferEventSender<
    ::test_inheritancewithrecursivedecl::Child>
    : public ::fidl::internal::SyncEndpointBufferVeneer<
          ::fidl::internal::WireBufferEventSender<
              ::test_inheritancewithrecursivedecl::Child>> {
 public:
  using SyncEndpointBufferVeneer::SyncEndpointBufferVeneer;
};
#endif  // __Fuchsia__
