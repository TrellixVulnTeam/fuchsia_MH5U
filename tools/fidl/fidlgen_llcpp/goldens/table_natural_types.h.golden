// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.table/cpp/common_types.h>
#include <fidl/test.table/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#endif  // __Fuchsia__

namespace test_table {

class TableWithAttributes;

class SimpleTable;

class ReverseOrdinalTable;

class OlderSimpleTable;

class NewerSimpleTable;

class ExtensionTable;

class SixtyFourOrdinalTable;

class EmptyTable;

extern "C" const fidl_type_t test_table_TableWithAttributesTable;

class TableWithAttributes final {
 private:
  struct Storage_;

 public:
  TableWithAttributes(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  TableWithAttributes() noexcept = default;
  TableWithAttributes(TableWithAttributes&&) noexcept = default;
  TableWithAttributes& operator=(TableWithAttributes&&) noexcept = default;
  TableWithAttributes(const TableWithAttributes& other) noexcept
      : TableWithAttributes(other.CloneStorage_()) {}
  TableWithAttributes& operator=(const TableWithAttributes& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const TableWithAttributes& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_table::TableWithAttributes>::Equal(this, &other);
  }
  bool operator!=(const TableWithAttributes& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_table::TableWithAttributes>::Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.x.has_value()); }

  const cpp17::optional<int64_t>& x() const { return storage_.x; }
  ::cpp17::optional<int64_t>& x() { return storage_.x; }

 private:
  struct Storage_ final {
    ::cpp17::optional<int64_t> x{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_table::TableWithAttributes>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_table::TableWithAttributes>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{1, &Storage_::x});
};

extern "C" const fidl_type_t test_table_SimpleTableTable;

class SimpleTable final {
 private:
  struct Storage_;

 public:
  SimpleTable(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  SimpleTable() noexcept = default;
  SimpleTable(SimpleTable&&) noexcept = default;
  SimpleTable& operator=(SimpleTable&&) noexcept = default;
  SimpleTable(const SimpleTable& other) noexcept
      : SimpleTable(other.CloneStorage_()) {}
  SimpleTable& operator=(const SimpleTable& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const SimpleTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_table::SimpleTable>::Equal(this, &other);
  }
  bool operator!=(const SimpleTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_table::SimpleTable>::Equal(this, &other);
  }

  bool IsEmpty() const {
    return !(storage_.x.has_value() || storage_.y.has_value());
  }

  const cpp17::optional<int64_t>& x() const { return storage_.x; }
  ::cpp17::optional<int64_t>& x() { return storage_.x; }

  const cpp17::optional<int64_t>& y() const { return storage_.y; }
  ::cpp17::optional<int64_t>& y() { return storage_.y; }

 private:
  struct Storage_ final {
    ::cpp17::optional<int64_t> x{};
    ::cpp17::optional<int64_t> y{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_table::SimpleTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::SimpleTable>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{1, &Storage_::x},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{5, &Storage_::y});
};

extern "C" const fidl_type_t test_table_ReverseOrdinalTableTable;

class ReverseOrdinalTable final {
 private:
  struct Storage_;

 public:
  ReverseOrdinalTable(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  ReverseOrdinalTable() noexcept = default;
  ReverseOrdinalTable(ReverseOrdinalTable&&) noexcept = default;
  ReverseOrdinalTable& operator=(ReverseOrdinalTable&&) noexcept = default;
  ReverseOrdinalTable(const ReverseOrdinalTable& other) noexcept
      : ReverseOrdinalTable(other.CloneStorage_()) {}
  ReverseOrdinalTable& operator=(const ReverseOrdinalTable& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const ReverseOrdinalTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_table::ReverseOrdinalTable>::Equal(this, &other);
  }
  bool operator!=(const ReverseOrdinalTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_table::ReverseOrdinalTable>::Equal(this, &other);
  }

  bool IsEmpty() const {
    return !(storage_.z.has_value() || storage_.y.has_value() ||
             storage_.x.has_value());
  }

  const cpp17::optional<int64_t>& z() const { return storage_.z; }
  ::cpp17::optional<int64_t>& z() { return storage_.z; }

  const cpp17::optional<int64_t>& y() const { return storage_.y; }
  ::cpp17::optional<int64_t>& y() { return storage_.y; }

  const cpp17::optional<int64_t>& x() const { return storage_.x; }
  ::cpp17::optional<int64_t>& x() { return storage_.x; }

 private:
  struct Storage_ final {
    ::cpp17::optional<int64_t> z{};
    ::cpp17::optional<int64_t> y{};
    ::cpp17::optional<int64_t> x{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_table::ReverseOrdinalTable>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_table::ReverseOrdinalTable>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{1, &Storage_::z},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{2, &Storage_::y},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{3, &Storage_::x});
};

extern "C" const fidl_type_t test_table_OlderSimpleTableTable;

class OlderSimpleTable final {
 private:
  struct Storage_;

 public:
  OlderSimpleTable(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  OlderSimpleTable() noexcept = default;
  OlderSimpleTable(OlderSimpleTable&&) noexcept = default;
  OlderSimpleTable& operator=(OlderSimpleTable&&) noexcept = default;
  OlderSimpleTable(const OlderSimpleTable& other) noexcept
      : OlderSimpleTable(other.CloneStorage_()) {}
  OlderSimpleTable& operator=(const OlderSimpleTable& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const OlderSimpleTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_table::OlderSimpleTable>::Equal(this, &other);
  }
  bool operator!=(const OlderSimpleTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_table::OlderSimpleTable>::Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.x.has_value()); }

  const cpp17::optional<int64_t>& x() const { return storage_.x; }
  ::cpp17::optional<int64_t>& x() { return storage_.x; }

 private:
  struct Storage_ final {
    ::cpp17::optional<int64_t> x{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_table::OlderSimpleTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::OlderSimpleTable>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{1, &Storage_::x});
};

extern "C" const fidl_type_t test_table_NewerSimpleTableTable;

class NewerSimpleTable final {
 private:
  struct Storage_;

 public:
  NewerSimpleTable(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  NewerSimpleTable() noexcept = default;
  NewerSimpleTable(NewerSimpleTable&&) noexcept = default;
  NewerSimpleTable& operator=(NewerSimpleTable&&) noexcept = default;
  NewerSimpleTable(const NewerSimpleTable& other) noexcept
      : NewerSimpleTable(other.CloneStorage_()) {}
  NewerSimpleTable& operator=(const NewerSimpleTable& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const NewerSimpleTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_table::NewerSimpleTable>::Equal(this, &other);
  }
  bool operator!=(const NewerSimpleTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_table::NewerSimpleTable>::Equal(this, &other);
  }

  bool IsEmpty() const {
    return !(storage_.x.has_value() || storage_.y.has_value() ||
             storage_.z.has_value());
  }

  const cpp17::optional<int64_t>& x() const { return storage_.x; }
  ::cpp17::optional<int64_t>& x() { return storage_.x; }

  const cpp17::optional<int64_t>& y() const { return storage_.y; }
  ::cpp17::optional<int64_t>& y() { return storage_.y; }

  const cpp17::optional<int64_t>& z() const { return storage_.z; }
  ::cpp17::optional<int64_t>& z() { return storage_.z; }

 private:
  struct Storage_ final {
    ::cpp17::optional<int64_t> x{};
    ::cpp17::optional<int64_t> y{};
    ::cpp17::optional<int64_t> z{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_table::NewerSimpleTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::NewerSimpleTable>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{1, &Storage_::x},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{5, &Storage_::y},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{6, &Storage_::z});
};

extern "C" const fidl_type_t test_table_ExtensionTableTable;

class ExtensionTable final {
 private:
  struct Storage_;

 public:
  ExtensionTable(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  ExtensionTable() noexcept = default;
  ExtensionTable(ExtensionTable&&) noexcept = default;
  ExtensionTable& operator=(ExtensionTable&&) noexcept = default;
  ExtensionTable(const ExtensionTable& other) noexcept
      : ExtensionTable(other.CloneStorage_()) {}
  ExtensionTable& operator=(const ExtensionTable& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const ExtensionTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_table::ExtensionTable>::Equal(this, &other);
  }
  bool operator!=(const ExtensionTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_table::ExtensionTable>::Equal(this, &other);
  }

  bool IsEmpty() const { return true; }

 private:
  struct Storage_ final {};

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_table::ExtensionTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::ExtensionTable>;
  static constexpr auto kMembers = std::make_tuple();
};

extern "C" const fidl_type_t test_table_SixtyFourOrdinalTableTable;

class SixtyFourOrdinalTable final {
 private:
  struct Storage_;

 public:
  SixtyFourOrdinalTable(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SixtyFourOrdinalTable() noexcept = default;
  SixtyFourOrdinalTable(SixtyFourOrdinalTable&&) noexcept = default;
  SixtyFourOrdinalTable& operator=(SixtyFourOrdinalTable&&) noexcept = default;
  SixtyFourOrdinalTable(const SixtyFourOrdinalTable& other) noexcept
      : SixtyFourOrdinalTable(other.CloneStorage_()) {}
  SixtyFourOrdinalTable& operator=(
      const SixtyFourOrdinalTable& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const SixtyFourOrdinalTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_table::SixtyFourOrdinalTable>::Equal(this, &other);
  }
  bool operator!=(const SixtyFourOrdinalTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_table::SixtyFourOrdinalTable>::Equal(this, &other);
  }

  bool IsEmpty() const {
    return !(storage_.v1.has_value() || storage_.v2.has_value() ||
             storage_.v3.has_value() || storage_.v4.has_value() ||
             storage_.v5.has_value() || storage_.v6.has_value() ||
             storage_.v7.has_value() || storage_.v8.has_value() ||
             storage_.v9.has_value() || storage_.v10.has_value() ||
             storage_.v11.has_value() || storage_.v12.has_value() ||
             storage_.v13.has_value() || storage_.v14.has_value() ||
             storage_.v15.has_value() || storage_.v16.has_value() ||
             storage_.v17.has_value() || storage_.v18.has_value() ||
             storage_.v19.has_value() || storage_.v20.has_value() ||
             storage_.v21.has_value() || storage_.v22.has_value() ||
             storage_.v23.has_value() || storage_.v24.has_value() ||
             storage_.v25.has_value() || storage_.v26.has_value() ||
             storage_.v27.has_value() || storage_.v28.has_value() ||
             storage_.v29.has_value() || storage_.v30.has_value() ||
             storage_.v31.has_value() || storage_.v32.has_value() ||
             storage_.v33.has_value() || storage_.v34.has_value() ||
             storage_.v35.has_value() || storage_.v36.has_value() ||
             storage_.v37.has_value() || storage_.v38.has_value() ||
             storage_.v39.has_value() || storage_.v40.has_value() ||
             storage_.v41.has_value() || storage_.v42.has_value() ||
             storage_.v43.has_value() || storage_.v44.has_value() ||
             storage_.v45.has_value() || storage_.v46.has_value() ||
             storage_.v47.has_value() || storage_.v48.has_value() ||
             storage_.v49.has_value() || storage_.v50.has_value() ||
             storage_.v51.has_value() || storage_.v52.has_value() ||
             storage_.v53.has_value() || storage_.v54.has_value() ||
             storage_.v55.has_value() || storage_.v56.has_value() ||
             storage_.v57.has_value() || storage_.v58.has_value() ||
             storage_.v59.has_value() || storage_.v60.has_value() ||
             storage_.v61.has_value() || storage_.v62.has_value() ||
             storage_.v63.has_value() || storage_.v64.has_value());
  }

  const cpp17::optional<int64_t>& v1() const { return storage_.v1; }
  ::cpp17::optional<int64_t>& v1() { return storage_.v1; }

  const cpp17::optional<int64_t>& v2() const { return storage_.v2; }
  ::cpp17::optional<int64_t>& v2() { return storage_.v2; }

  const cpp17::optional<int64_t>& v3() const { return storage_.v3; }
  ::cpp17::optional<int64_t>& v3() { return storage_.v3; }

  const cpp17::optional<int64_t>& v4() const { return storage_.v4; }
  ::cpp17::optional<int64_t>& v4() { return storage_.v4; }

  const cpp17::optional<int64_t>& v5() const { return storage_.v5; }
  ::cpp17::optional<int64_t>& v5() { return storage_.v5; }

  const cpp17::optional<int64_t>& v6() const { return storage_.v6; }
  ::cpp17::optional<int64_t>& v6() { return storage_.v6; }

  const cpp17::optional<int64_t>& v7() const { return storage_.v7; }
  ::cpp17::optional<int64_t>& v7() { return storage_.v7; }

  const cpp17::optional<int64_t>& v8() const { return storage_.v8; }
  ::cpp17::optional<int64_t>& v8() { return storage_.v8; }

  const cpp17::optional<int64_t>& v9() const { return storage_.v9; }
  ::cpp17::optional<int64_t>& v9() { return storage_.v9; }

  const cpp17::optional<int64_t>& v10() const { return storage_.v10; }
  ::cpp17::optional<int64_t>& v10() { return storage_.v10; }

  const cpp17::optional<int64_t>& v11() const { return storage_.v11; }
  ::cpp17::optional<int64_t>& v11() { return storage_.v11; }

  const cpp17::optional<int64_t>& v12() const { return storage_.v12; }
  ::cpp17::optional<int64_t>& v12() { return storage_.v12; }

  const cpp17::optional<int64_t>& v13() const { return storage_.v13; }
  ::cpp17::optional<int64_t>& v13() { return storage_.v13; }

  const cpp17::optional<int64_t>& v14() const { return storage_.v14; }
  ::cpp17::optional<int64_t>& v14() { return storage_.v14; }

  const cpp17::optional<int64_t>& v15() const { return storage_.v15; }
  ::cpp17::optional<int64_t>& v15() { return storage_.v15; }

  const cpp17::optional<int64_t>& v16() const { return storage_.v16; }
  ::cpp17::optional<int64_t>& v16() { return storage_.v16; }

  const cpp17::optional<int64_t>& v17() const { return storage_.v17; }
  ::cpp17::optional<int64_t>& v17() { return storage_.v17; }

  const cpp17::optional<int64_t>& v18() const { return storage_.v18; }
  ::cpp17::optional<int64_t>& v18() { return storage_.v18; }

  const cpp17::optional<int64_t>& v19() const { return storage_.v19; }
  ::cpp17::optional<int64_t>& v19() { return storage_.v19; }

  const cpp17::optional<int64_t>& v20() const { return storage_.v20; }
  ::cpp17::optional<int64_t>& v20() { return storage_.v20; }

  const cpp17::optional<int64_t>& v21() const { return storage_.v21; }
  ::cpp17::optional<int64_t>& v21() { return storage_.v21; }

  const cpp17::optional<int64_t>& v22() const { return storage_.v22; }
  ::cpp17::optional<int64_t>& v22() { return storage_.v22; }

  const cpp17::optional<int64_t>& v23() const { return storage_.v23; }
  ::cpp17::optional<int64_t>& v23() { return storage_.v23; }

  const cpp17::optional<int64_t>& v24() const { return storage_.v24; }
  ::cpp17::optional<int64_t>& v24() { return storage_.v24; }

  const cpp17::optional<int64_t>& v25() const { return storage_.v25; }
  ::cpp17::optional<int64_t>& v25() { return storage_.v25; }

  const cpp17::optional<int64_t>& v26() const { return storage_.v26; }
  ::cpp17::optional<int64_t>& v26() { return storage_.v26; }

  const cpp17::optional<int64_t>& v27() const { return storage_.v27; }
  ::cpp17::optional<int64_t>& v27() { return storage_.v27; }

  const cpp17::optional<int64_t>& v28() const { return storage_.v28; }
  ::cpp17::optional<int64_t>& v28() { return storage_.v28; }

  const cpp17::optional<int64_t>& v29() const { return storage_.v29; }
  ::cpp17::optional<int64_t>& v29() { return storage_.v29; }

  const cpp17::optional<int64_t>& v30() const { return storage_.v30; }
  ::cpp17::optional<int64_t>& v30() { return storage_.v30; }

  const cpp17::optional<int64_t>& v31() const { return storage_.v31; }
  ::cpp17::optional<int64_t>& v31() { return storage_.v31; }

  const cpp17::optional<int64_t>& v32() const { return storage_.v32; }
  ::cpp17::optional<int64_t>& v32() { return storage_.v32; }

  const cpp17::optional<int64_t>& v33() const { return storage_.v33; }
  ::cpp17::optional<int64_t>& v33() { return storage_.v33; }

  const cpp17::optional<int64_t>& v34() const { return storage_.v34; }
  ::cpp17::optional<int64_t>& v34() { return storage_.v34; }

  const cpp17::optional<int64_t>& v35() const { return storage_.v35; }
  ::cpp17::optional<int64_t>& v35() { return storage_.v35; }

  const cpp17::optional<int64_t>& v36() const { return storage_.v36; }
  ::cpp17::optional<int64_t>& v36() { return storage_.v36; }

  const cpp17::optional<int64_t>& v37() const { return storage_.v37; }
  ::cpp17::optional<int64_t>& v37() { return storage_.v37; }

  const cpp17::optional<int64_t>& v38() const { return storage_.v38; }
  ::cpp17::optional<int64_t>& v38() { return storage_.v38; }

  const cpp17::optional<int64_t>& v39() const { return storage_.v39; }
  ::cpp17::optional<int64_t>& v39() { return storage_.v39; }

  const cpp17::optional<int64_t>& v40() const { return storage_.v40; }
  ::cpp17::optional<int64_t>& v40() { return storage_.v40; }

  const cpp17::optional<int64_t>& v41() const { return storage_.v41; }
  ::cpp17::optional<int64_t>& v41() { return storage_.v41; }

  const cpp17::optional<int64_t>& v42() const { return storage_.v42; }
  ::cpp17::optional<int64_t>& v42() { return storage_.v42; }

  const cpp17::optional<int64_t>& v43() const { return storage_.v43; }
  ::cpp17::optional<int64_t>& v43() { return storage_.v43; }

  const cpp17::optional<int64_t>& v44() const { return storage_.v44; }
  ::cpp17::optional<int64_t>& v44() { return storage_.v44; }

  const cpp17::optional<int64_t>& v45() const { return storage_.v45; }
  ::cpp17::optional<int64_t>& v45() { return storage_.v45; }

  const cpp17::optional<int64_t>& v46() const { return storage_.v46; }
  ::cpp17::optional<int64_t>& v46() { return storage_.v46; }

  const cpp17::optional<int64_t>& v47() const { return storage_.v47; }
  ::cpp17::optional<int64_t>& v47() { return storage_.v47; }

  const cpp17::optional<int64_t>& v48() const { return storage_.v48; }
  ::cpp17::optional<int64_t>& v48() { return storage_.v48; }

  const cpp17::optional<int64_t>& v49() const { return storage_.v49; }
  ::cpp17::optional<int64_t>& v49() { return storage_.v49; }

  const cpp17::optional<int64_t>& v50() const { return storage_.v50; }
  ::cpp17::optional<int64_t>& v50() { return storage_.v50; }

  const cpp17::optional<int64_t>& v51() const { return storage_.v51; }
  ::cpp17::optional<int64_t>& v51() { return storage_.v51; }

  const cpp17::optional<int64_t>& v52() const { return storage_.v52; }
  ::cpp17::optional<int64_t>& v52() { return storage_.v52; }

  const cpp17::optional<int64_t>& v53() const { return storage_.v53; }
  ::cpp17::optional<int64_t>& v53() { return storage_.v53; }

  const cpp17::optional<int64_t>& v54() const { return storage_.v54; }
  ::cpp17::optional<int64_t>& v54() { return storage_.v54; }

  const cpp17::optional<int64_t>& v55() const { return storage_.v55; }
  ::cpp17::optional<int64_t>& v55() { return storage_.v55; }

  const cpp17::optional<int64_t>& v56() const { return storage_.v56; }
  ::cpp17::optional<int64_t>& v56() { return storage_.v56; }

  const cpp17::optional<int64_t>& v57() const { return storage_.v57; }
  ::cpp17::optional<int64_t>& v57() { return storage_.v57; }

  const cpp17::optional<int64_t>& v58() const { return storage_.v58; }
  ::cpp17::optional<int64_t>& v58() { return storage_.v58; }

  const cpp17::optional<int64_t>& v59() const { return storage_.v59; }
  ::cpp17::optional<int64_t>& v59() { return storage_.v59; }

  const cpp17::optional<int64_t>& v60() const { return storage_.v60; }
  ::cpp17::optional<int64_t>& v60() { return storage_.v60; }

  const cpp17::optional<int64_t>& v61() const { return storage_.v61; }
  ::cpp17::optional<int64_t>& v61() { return storage_.v61; }

  const cpp17::optional<int64_t>& v62() const { return storage_.v62; }
  ::cpp17::optional<int64_t>& v62() { return storage_.v62; }

  const cpp17::optional<int64_t>& v63() const { return storage_.v63; }
  ::cpp17::optional<int64_t>& v63() { return storage_.v63; }

  const cpp17::optional<::test_table::ExtensionTable>& v64() const {
    return storage_.v64;
  }
  ::cpp17::optional<::test_table::ExtensionTable>& v64() {
    return storage_.v64;
  }

 private:
  struct Storage_ final {
    ::cpp17::optional<int64_t> v1{};
    ::cpp17::optional<int64_t> v2{};
    ::cpp17::optional<int64_t> v3{};
    ::cpp17::optional<int64_t> v4{};
    ::cpp17::optional<int64_t> v5{};
    ::cpp17::optional<int64_t> v6{};
    ::cpp17::optional<int64_t> v7{};
    ::cpp17::optional<int64_t> v8{};
    ::cpp17::optional<int64_t> v9{};
    ::cpp17::optional<int64_t> v10{};
    ::cpp17::optional<int64_t> v11{};
    ::cpp17::optional<int64_t> v12{};
    ::cpp17::optional<int64_t> v13{};
    ::cpp17::optional<int64_t> v14{};
    ::cpp17::optional<int64_t> v15{};
    ::cpp17::optional<int64_t> v16{};
    ::cpp17::optional<int64_t> v17{};
    ::cpp17::optional<int64_t> v18{};
    ::cpp17::optional<int64_t> v19{};
    ::cpp17::optional<int64_t> v20{};
    ::cpp17::optional<int64_t> v21{};
    ::cpp17::optional<int64_t> v22{};
    ::cpp17::optional<int64_t> v23{};
    ::cpp17::optional<int64_t> v24{};
    ::cpp17::optional<int64_t> v25{};
    ::cpp17::optional<int64_t> v26{};
    ::cpp17::optional<int64_t> v27{};
    ::cpp17::optional<int64_t> v28{};
    ::cpp17::optional<int64_t> v29{};
    ::cpp17::optional<int64_t> v30{};
    ::cpp17::optional<int64_t> v31{};
    ::cpp17::optional<int64_t> v32{};
    ::cpp17::optional<int64_t> v33{};
    ::cpp17::optional<int64_t> v34{};
    ::cpp17::optional<int64_t> v35{};
    ::cpp17::optional<int64_t> v36{};
    ::cpp17::optional<int64_t> v37{};
    ::cpp17::optional<int64_t> v38{};
    ::cpp17::optional<int64_t> v39{};
    ::cpp17::optional<int64_t> v40{};
    ::cpp17::optional<int64_t> v41{};
    ::cpp17::optional<int64_t> v42{};
    ::cpp17::optional<int64_t> v43{};
    ::cpp17::optional<int64_t> v44{};
    ::cpp17::optional<int64_t> v45{};
    ::cpp17::optional<int64_t> v46{};
    ::cpp17::optional<int64_t> v47{};
    ::cpp17::optional<int64_t> v48{};
    ::cpp17::optional<int64_t> v49{};
    ::cpp17::optional<int64_t> v50{};
    ::cpp17::optional<int64_t> v51{};
    ::cpp17::optional<int64_t> v52{};
    ::cpp17::optional<int64_t> v53{};
    ::cpp17::optional<int64_t> v54{};
    ::cpp17::optional<int64_t> v55{};
    ::cpp17::optional<int64_t> v56{};
    ::cpp17::optional<int64_t> v57{};
    ::cpp17::optional<int64_t> v58{};
    ::cpp17::optional<int64_t> v59{};
    ::cpp17::optional<int64_t> v60{};
    ::cpp17::optional<int64_t> v61{};
    ::cpp17::optional<int64_t> v62{};
    ::cpp17::optional<int64_t> v63{};
    ::cpp17::optional<::test_table::ExtensionTable> v64{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_table::SixtyFourOrdinalTable>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_table::SixtyFourOrdinalTable>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{1, &Storage_::v1},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{2, &Storage_::v2},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{3, &Storage_::v3},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{4, &Storage_::v4},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{5, &Storage_::v5},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{6, &Storage_::v6},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{7, &Storage_::v7},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{8, &Storage_::v8},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{9, &Storage_::v9},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{10,
                                                              &Storage_::v10},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{11,
                                                              &Storage_::v11},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{12,
                                                              &Storage_::v12},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{13,
                                                              &Storage_::v13},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{14,
                                                              &Storage_::v14},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{15,
                                                              &Storage_::v15},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{16,
                                                              &Storage_::v16},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{17,
                                                              &Storage_::v17},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{18,
                                                              &Storage_::v18},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{19,
                                                              &Storage_::v19},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{20,
                                                              &Storage_::v20},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{21,
                                                              &Storage_::v21},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{22,
                                                              &Storage_::v22},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{23,
                                                              &Storage_::v23},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{24,
                                                              &Storage_::v24},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{25,
                                                              &Storage_::v25},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{26,
                                                              &Storage_::v26},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{27,
                                                              &Storage_::v27},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{28,
                                                              &Storage_::v28},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{29,
                                                              &Storage_::v29},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{30,
                                                              &Storage_::v30},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{31,
                                                              &Storage_::v31},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{32,
                                                              &Storage_::v32},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{33,
                                                              &Storage_::v33},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{34,
                                                              &Storage_::v34},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{35,
                                                              &Storage_::v35},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{36,
                                                              &Storage_::v36},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{37,
                                                              &Storage_::v37},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{38,
                                                              &Storage_::v38},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{39,
                                                              &Storage_::v39},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{40,
                                                              &Storage_::v40},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{41,
                                                              &Storage_::v41},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{42,
                                                              &Storage_::v42},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{43,
                                                              &Storage_::v43},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{44,
                                                              &Storage_::v44},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{45,
                                                              &Storage_::v45},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{46,
                                                              &Storage_::v46},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{47,
                                                              &Storage_::v47},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{48,
                                                              &Storage_::v48},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{49,
                                                              &Storage_::v49},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{50,
                                                              &Storage_::v50},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{51,
                                                              &Storage_::v51},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{52,
                                                              &Storage_::v52},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{53,
                                                              &Storage_::v53},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{54,
                                                              &Storage_::v54},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{55,
                                                              &Storage_::v55},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{56,
                                                              &Storage_::v56},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{57,
                                                              &Storage_::v57},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{58,
                                                              &Storage_::v58},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{59,
                                                              &Storage_::v59},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{60,
                                                              &Storage_::v60},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{61,
                                                              &Storage_::v61},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{62,
                                                              &Storage_::v62},
      ::fidl::internal::NaturalTableMember<Storage_, int64_t>{63,
                                                              &Storage_::v63},
      ::fidl::internal::NaturalTableMember<Storage_,
                                           ::test_table::ExtensionTable>{
          64, &Storage_::v64});
};

extern "C" const fidl_type_t test_table_EmptyTableTable;

class EmptyTable final {
 private:
  struct Storage_;

 public:
  EmptyTable(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  EmptyTable() noexcept = default;
  EmptyTable(EmptyTable&&) noexcept = default;
  EmptyTable& operator=(EmptyTable&&) noexcept = default;
  EmptyTable(const EmptyTable& other) noexcept
      : EmptyTable(other.CloneStorage_()) {}
  EmptyTable& operator=(const EmptyTable& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const EmptyTable& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_table::EmptyTable>::Equal(this, &other);
  }
  bool operator!=(const EmptyTable& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_table::EmptyTable>::Equal(this, &other);
  }

  bool IsEmpty() const { return true; }

 private:
  struct Storage_ final {};

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_table::EmptyTable>;
  friend struct ::fidl::internal::MemberVisitor<::test_table::EmptyTable>;
  static constexpr auto kMembers = std::make_tuple();
};

}  // namespace test_table
namespace fidl {

template <>
struct IsFidlType<::test_table::TableWithAttributes> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::TableWithAttributes>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_table::TableWithAttributes> {};

template <>
struct IsFidlType<::test_table::SimpleTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::SimpleTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_table::SimpleTable> {};

template <>
struct IsFidlType<::test_table::ReverseOrdinalTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::ReverseOrdinalTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_table::ReverseOrdinalTable> {};

template <>
struct IsFidlType<::test_table::OlderSimpleTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::OlderSimpleTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_table::OlderSimpleTable> {};

template <>
struct IsFidlType<::test_table::NewerSimpleTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::NewerSimpleTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_table::NewerSimpleTable> {};

template <>
struct IsFidlType<::test_table::ExtensionTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::ExtensionTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_table::ExtensionTable> {};

template <>
struct IsFidlType<::test_table::SixtyFourOrdinalTable> : public std::true_type {
};

template <>
struct internal::NaturalCodingTraits<::test_table::SixtyFourOrdinalTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_table::SixtyFourOrdinalTable> {};

template <>
struct IsFidlType<::test_table::EmptyTable> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_table::EmptyTable>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_table::EmptyTable> {};

}  // namespace fidl
