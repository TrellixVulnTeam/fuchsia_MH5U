// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.nullable/cpp/common_types.h>
#include <fidl/test.nullable/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>

#endif  // __Fuchsia__

namespace test_nullable {
class StructWithNullableVector;

class StructWithNullableUnion;

class StructWithNullableStruct;

class StructWithNullableString;

class StructWithNullableRequest;

class StructWithNullableProtocol;

class StructWithNullableHandle;

class SimpleProtocolAddTopResponse;

class SimpleProtocolAddRequest;

class Int32Wrapper;

class SimpleUnion;

extern "C" const fidl_type_t test_nullable_StructWithNullableVectorTable;

class StructWithNullableVector final {
 private:
  struct Storage_;

 public:
  StructWithNullableVector(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableVector(
      ::cpp17::optional<::std::vector<int32_t>> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableVector() : StructWithNullableVector(Storage_{}) {}

  StructWithNullableVector(StructWithNullableVector&&) noexcept = default;
  StructWithNullableVector& operator=(StructWithNullableVector&&) noexcept =
      default;
  StructWithNullableVector(const StructWithNullableVector& other) noexcept
      : StructWithNullableVector(other.CloneStorage_()) {}
  StructWithNullableVector& operator=(
      const StructWithNullableVector& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const StructWithNullableVector& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::StructWithNullableVector, 16, 16>::Equal(this, &other);
  }
  bool operator!=(const StructWithNullableVector& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::StructWithNullableVector, 16, 16>::Equal(this, &other);
  }

  const ::cpp17::optional<::std::vector<int32_t>>& val() const {
    return storage_.val;
  }

  ::cpp17::optional<::std::vector<int32_t>>& val() { return storage_.val; }

 private:
  struct Storage_ final {
    ::cpp17::optional<::std::vector<int32_t>> val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::StructWithNullableVector, 16, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::StructWithNullableVector>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalStructMember<
                      Storage_, ::cpp17::optional<::std::vector<int32_t>>>{
          &Storage_::val, 0, 0});
};

extern "C" const fidl_type_t test_nullable_StructWithNullableUnionTable;

class StructWithNullableUnion final {
 private:
  struct Storage_;

 public:
  StructWithNullableUnion(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableUnion(
      ::std::unique_ptr<::test_nullable::SimpleUnion> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableUnion() : StructWithNullableUnion(Storage_{}) {}

  StructWithNullableUnion(StructWithNullableUnion&&) noexcept = default;
  StructWithNullableUnion& operator=(StructWithNullableUnion&&) noexcept =
      default;
  StructWithNullableUnion(const StructWithNullableUnion& other) noexcept
      : StructWithNullableUnion(other.CloneStorage_()) {}
  StructWithNullableUnion& operator=(
      const StructWithNullableUnion& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const StructWithNullableUnion& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::StructWithNullableUnion, 24, 16>::Equal(this, &other);
  }
  bool operator!=(const StructWithNullableUnion& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::StructWithNullableUnion, 24, 16>::Equal(this, &other);
  }

  const ::std::unique_ptr<::test_nullable::SimpleUnion>& val() const {
    return storage_.val;
  }

  ::std::unique_ptr<::test_nullable::SimpleUnion>& val() {
    return storage_.val;
  }

 private:
  struct Storage_ final {
    ::std::unique_ptr<::test_nullable::SimpleUnion> val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::StructWithNullableUnion, 24, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::StructWithNullableUnion>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::std::unique_ptr<::test_nullable::SimpleUnion>>{
          &Storage_::val, 0, 0});
};

extern "C" const fidl_type_t test_nullable_StructWithNullableStructTable;

class StructWithNullableStruct final {
 private:
  struct Storage_;

 public:
  StructWithNullableStruct(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableStruct(
      ::std::unique_ptr<::test_nullable::Int32Wrapper> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableStruct() : StructWithNullableStruct(Storage_{}) {}

  StructWithNullableStruct(StructWithNullableStruct&&) noexcept = default;
  StructWithNullableStruct& operator=(StructWithNullableStruct&&) noexcept =
      default;
  StructWithNullableStruct(const StructWithNullableStruct& other) noexcept
      : StructWithNullableStruct(other.CloneStorage_()) {}
  StructWithNullableStruct& operator=(
      const StructWithNullableStruct& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const StructWithNullableStruct& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::StructWithNullableStruct, 8, 8>::Equal(this, &other);
  }
  bool operator!=(const StructWithNullableStruct& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::StructWithNullableStruct, 8, 8>::Equal(this, &other);
  }

  const ::std::unique_ptr<::test_nullable::Int32Wrapper>& val() const {
    return storage_.val;
  }

  ::std::unique_ptr<::test_nullable::Int32Wrapper>& val() {
    return storage_.val;
  }

 private:
  struct Storage_ final {
    ::std::unique_ptr<::test_nullable::Int32Wrapper> val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::StructWithNullableStruct, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::StructWithNullableStruct>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::std::unique_ptr<::test_nullable::Int32Wrapper>>{
          &Storage_::val, 0, 0});
};

extern "C" const fidl_type_t test_nullable_StructWithNullableStringTable;

class StructWithNullableString final {
 private:
  struct Storage_;

 public:
  StructWithNullableString(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableString(::cpp17::optional<::std::string> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableString() : StructWithNullableString(Storage_{}) {}

  StructWithNullableString(StructWithNullableString&&) noexcept = default;
  StructWithNullableString& operator=(StructWithNullableString&&) noexcept =
      default;
  StructWithNullableString(const StructWithNullableString& other) noexcept
      : StructWithNullableString(other.CloneStorage_()) {}
  StructWithNullableString& operator=(
      const StructWithNullableString& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const StructWithNullableString& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::StructWithNullableString, 16, 16>::Equal(this, &other);
  }
  bool operator!=(const StructWithNullableString& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::StructWithNullableString, 16, 16>::Equal(this, &other);
  }

  const ::cpp17::optional<::std::string>& val() const { return storage_.val; }

  ::cpp17::optional<::std::string>& val() { return storage_.val; }

 private:
  struct Storage_ final {
    ::cpp17::optional<::std::string> val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::StructWithNullableString, 16, 16>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::StructWithNullableString>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_,
                                            ::cpp17::optional<::std::string>>{
          &Storage_::val, 0, 0});
};

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_nullable_StructWithNullableRequestTable;

class StructWithNullableRequest final {
 private:
  struct Storage_;

 public:
  StructWithNullableRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableRequest(
      ::fidl::ServerEnd<::test_nullable::SimpleProtocol> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableRequest() : StructWithNullableRequest(Storage_{}) {}

  StructWithNullableRequest(StructWithNullableRequest&&) noexcept = default;
  StructWithNullableRequest& operator=(StructWithNullableRequest&&) noexcept =
      default;

  const ::fidl::ServerEnd<::test_nullable::SimpleProtocol>& val() const {
    return storage_.val;
  }

  ::fidl::ServerEnd<::test_nullable::SimpleProtocol>& val() {
    return storage_.val;
  }

 private:
  struct Storage_ final {
    ::fidl::ServerEnd<::test_nullable::SimpleProtocol> val{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::StructWithNullableRequest, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::StructWithNullableRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::fidl::ServerEnd<::test_nullable::SimpleProtocol>>{
          &Storage_::val, 0, 0,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_CHANNEL,
               .rights = ZX_DEFAULT_CHANNEL_RIGHTS})});
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_nullable_StructWithNullableProtocolTable;

class StructWithNullableProtocol final {
 private:
  struct Storage_;

 public:
  StructWithNullableProtocol(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableProtocol(
      ::fidl::ClientEnd<::test_nullable::SimpleProtocol> val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableProtocol() : StructWithNullableProtocol(Storage_{}) {}

  StructWithNullableProtocol(StructWithNullableProtocol&&) noexcept = default;
  StructWithNullableProtocol& operator=(StructWithNullableProtocol&&) noexcept =
      default;

  const ::fidl::ClientEnd<::test_nullable::SimpleProtocol>& val() const {
    return storage_.val;
  }

  ::fidl::ClientEnd<::test_nullable::SimpleProtocol>& val() {
    return storage_.val;
  }

 private:
  struct Storage_ final {
    ::fidl::ClientEnd<::test_nullable::SimpleProtocol> val{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::StructWithNullableProtocol, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::StructWithNullableProtocol>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<
          Storage_, ::fidl::ClientEnd<::test_nullable::SimpleProtocol>>{
          &Storage_::val, 0, 0,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_CHANNEL,
               .rights = ZX_DEFAULT_CHANNEL_RIGHTS})});
};

#endif  // __Fuchsia__

#ifdef __Fuchsia__

extern "C" const fidl_type_t test_nullable_StructWithNullableHandleTable;

class StructWithNullableHandle final {
 private:
  struct Storage_;

 public:
  StructWithNullableHandle(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  StructWithNullableHandle(::zx::vmo val) noexcept
      : storage_({.val = std::move(val)}) {}
  StructWithNullableHandle() : StructWithNullableHandle(Storage_{}) {}

  StructWithNullableHandle(StructWithNullableHandle&&) noexcept = default;
  StructWithNullableHandle& operator=(StructWithNullableHandle&&) noexcept =
      default;

  const ::zx::vmo& val() const { return storage_.val; }

  ::zx::vmo& val() { return storage_.val; }

 private:
  struct Storage_ final {
    ::zx::vmo val{};
  };

  Storage_ storage_;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::StructWithNullableHandle, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::StructWithNullableHandle>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, ::zx::vmo>{
          &Storage_::val, 0, 0,
          std::make_optional<::fidl::internal::NaturalHandleInformation>(
              {.object_type = ZX_OBJ_TYPE_VMO, .rights = 0x80000000})});
};

#endif  // __Fuchsia__

extern "C" const fidl_type_t test_nullable_SimpleUnionTable;

class SimpleUnion final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, int32_t, float>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kA = 1,  // 0x1
    kB = 2,  // 0x2
  };

  // Create an unknown value of this union.
  SimpleUnion() : storage_(std::make_shared<Storage_>()) {}

  SimpleUnion(SimpleUnion&&) noexcept = default;
  SimpleUnion& operator=(SimpleUnion&&) noexcept = default;
  SimpleUnion(const SimpleUnion& other) noexcept
      : SimpleUnion(other.CloneStorage_()) {}
  SimpleUnion& operator=(const SimpleUnion& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SimpleUnion& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const SimpleUnion& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_nullable::SimpleUnion::Tag Which() const {
    return SimpleUnion::IndexToTag(storage_->index());
  }
  static SimpleUnion WithA(int32_t val) {
    return SimpleUnion(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> a() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> a() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  static SimpleUnion WithB(float val) {
    return SimpleUnion(
        std::make_shared<Storage_>(std::in_place_index_t<2>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<2, Storage_> b() const {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<2, Storage_> b() {
    return ::fidl::internal::UnionMemberView<2, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_nullable::SimpleUnion>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 3>
      kMembers = {std::nullopt, std::nullopt, std::nullopt};

  explicit SimpleUnion(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::test_nullable::SimpleUnion::Tag tag) {
    switch (tag) {
      case ::test_nullable::SimpleUnion::Tag::kA:
        return 1;
      case ::test_nullable::SimpleUnion::Tag::kB:
        return 2;
    }
  }

  static constexpr ::test_nullable::SimpleUnion::Tag IndexToTag(size_t index) {
    switch (index) {
      case 1:
        return ::test_nullable::SimpleUnion::Tag::kA;
      case 2:
        return ::test_nullable::SimpleUnion::Tag::kB;
      // TODO: what's the right thing to do here?
      default:
        return ::test_nullable::SimpleUnion::Tag::kA;
    }
  }
};

extern "C" const fidl_type_t test_nullable_SimpleProtocolAddTopResponseTable;

class SimpleProtocolAddTopResponse final {
 private:
  struct Storage_;

 public:
  SimpleProtocolAddTopResponse(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SimpleProtocolAddTopResponse(int32_t sum) noexcept
      : storage_({.sum = std::move(sum)}) {}
  SimpleProtocolAddTopResponse() : SimpleProtocolAddTopResponse(Storage_{}) {}

  SimpleProtocolAddTopResponse(SimpleProtocolAddTopResponse&&) noexcept =
      default;
  SimpleProtocolAddTopResponse& operator=(
      SimpleProtocolAddTopResponse&&) noexcept = default;
  SimpleProtocolAddTopResponse(
      const SimpleProtocolAddTopResponse& other) noexcept
      : SimpleProtocolAddTopResponse(other.CloneStorage_()) {}
  SimpleProtocolAddTopResponse& operator=(
      const SimpleProtocolAddTopResponse& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SimpleProtocolAddTopResponse& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::SimpleProtocolAddTopResponse, 4, 4>::Equal(this,
                                                                    &other);
  }
  bool operator!=(const SimpleProtocolAddTopResponse& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::SimpleProtocolAddTopResponse, 4, 4>::Equal(this,
                                                                    &other);
  }

  int32_t sum() const { return storage_.sum; }

  int32_t& sum() { return storage_.sum; }

 private:
  struct Storage_ final {
    int32_t sum{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::SimpleProtocolAddTopResponse, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::SimpleProtocolAddTopResponse>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, int32_t>{
          &Storage_::sum, 0, 0});
};

extern "C" const fidl_type_t test_nullable_SimpleProtocolAddRequestTable;

class SimpleProtocolAddRequest final {
 private:
  struct Storage_;

 public:
  SimpleProtocolAddRequest(Storage_ storage) noexcept
      : storage_(std::move(storage)) {}
  SimpleProtocolAddRequest(int32_t a, int32_t b) noexcept
      : storage_({.a = std::move(a), .b = std::move(b)}) {}
  SimpleProtocolAddRequest() : SimpleProtocolAddRequest(Storage_{}) {}

  SimpleProtocolAddRequest(SimpleProtocolAddRequest&&) noexcept = default;
  SimpleProtocolAddRequest& operator=(SimpleProtocolAddRequest&&) noexcept =
      default;
  SimpleProtocolAddRequest(const SimpleProtocolAddRequest& other) noexcept
      : SimpleProtocolAddRequest(other.CloneStorage_()) {}
  SimpleProtocolAddRequest& operator=(
      const SimpleProtocolAddRequest& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const SimpleProtocolAddRequest& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::SimpleProtocolAddRequest, 8, 8>::Equal(this, &other);
  }
  bool operator!=(const SimpleProtocolAddRequest& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::SimpleProtocolAddRequest, 8, 8>::Equal(this, &other);
  }

  int32_t a() const { return storage_.a; }

  int32_t& a() { return storage_.a; }

  int32_t b() const { return storage_.b; }

  int32_t& b() { return storage_.b; }

 private:
  struct Storage_ final {
    int32_t a{};
    int32_t b{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::SimpleProtocolAddRequest, 8, 8>;
  friend struct ::fidl::internal::MemberVisitor<
      ::test_nullable::SimpleProtocolAddRequest>;
  static constexpr auto kMembers = std::make_tuple(
      ::fidl::internal::NaturalStructMember<Storage_, int32_t>{&Storage_::a, 0,
                                                               0},
      ::fidl::internal::NaturalStructMember<Storage_, int32_t>{&Storage_::b, 4,
                                                               4});
};

extern "C" const fidl_type_t test_nullable_Int32WrapperTable;

class Int32Wrapper final {
 private:
  struct Storage_;

 public:
  Int32Wrapper(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Int32Wrapper(int32_t val) noexcept : storage_({.val = std::move(val)}) {}
  Int32Wrapper() : Int32Wrapper(Storage_{}) {}

  Int32Wrapper(Int32Wrapper&&) noexcept = default;
  Int32Wrapper& operator=(Int32Wrapper&&) noexcept = default;
  Int32Wrapper(const Int32Wrapper& other) noexcept
      : Int32Wrapper(other.CloneStorage_()) {}
  Int32Wrapper& operator=(const Int32Wrapper& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const Int32Wrapper& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::Int32Wrapper, 4, 4>::Equal(this, &other);
  }
  bool operator!=(const Int32Wrapper& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_nullable::Int32Wrapper, 4, 4>::Equal(this, &other);
  }

  int32_t val() const { return storage_.val; }

  int32_t& val() { return storage_.val; }

 private:
  struct Storage_ final {
    int32_t val{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_nullable::Int32Wrapper, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<::test_nullable::Int32Wrapper>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, int32_t>{
          &Storage_::val, 0, 0});
};

}  // namespace test_nullable
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableVectorTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableVector>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableVector>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableVectorTable;
};

template <>
struct internal::NaturalCodingTraits<::test_nullable::StructWithNullableVector>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::StructWithNullableVector, 16, 16> {};

template <>
struct HasPadding<::test_nullable::StructWithNullableVector>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::StructWithNullableVector>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::StructWithNullableVector>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::cpp17::optional<::std::vector<int32_t>>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableUnionTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableUnion>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableUnion>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableUnionTable;
};

template <>
struct internal::NaturalCodingTraits<::test_nullable::StructWithNullableUnion>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::StructWithNullableUnion, 24, 16> {};

template <>
struct HasPadding<::test_nullable::StructWithNullableUnion>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::StructWithNullableUnion>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::StructWithNullableUnion>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::unique_ptr<::test_nullable::SimpleUnion>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableStructTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableStruct>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableStruct>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableStructTable;
};

template <>
struct internal::NaturalCodingTraits<::test_nullable::StructWithNullableStruct>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::StructWithNullableStruct, 8, 8> {};

template <>
struct HasPadding<::test_nullable::StructWithNullableStruct>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::StructWithNullableStruct>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::StructWithNullableStruct>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::std::unique_ptr<::test_nullable::Int32Wrapper>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableStringTable;

template <>
struct IsFidlType<::test_nullable::StructWithNullableString>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableString>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableStringTable;
};

template <>
struct internal::NaturalCodingTraits<::test_nullable::StructWithNullableString>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::StructWithNullableString, 16, 16> {};

template <>
struct HasPadding<::test_nullable::StructWithNullableString>
    : public std::true_type {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::StructWithNullableString>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::StructWithNullableString>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::cpp17::optional<::std::string>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableRequestTable;

template <>
struct IsResource<::test_nullable::StructWithNullableRequest>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableRequestTable;
};

template <>
struct internal::NaturalCodingTraits<::test_nullable::StructWithNullableRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::StructWithNullableRequest, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::StructWithNullableRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::StructWithNullableRequest>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::fidl::ServerEnd<::test_nullable::SimpleProtocol>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableProtocolTable;

template <>
struct IsResource<::test_nullable::StructWithNullableProtocol>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableProtocol>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableProtocol>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableProtocolTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_nullable::StructWithNullableProtocol>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::StructWithNullableProtocol, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::StructWithNullableProtocol>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::StructWithNullableProtocol>::value &&
          internal::NaturalIsMemcpyCompatible<
              ::fidl::ClientEnd<::test_nullable::SimpleProtocol>>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_StructWithNullableHandleTable;

template <>
struct IsResource<::test_nullable::StructWithNullableHandle>
    : public std::true_type {};
template <>
struct IsFidlType<::test_nullable::StructWithNullableHandle>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::StructWithNullableHandle>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_StructWithNullableHandleTable;
};

template <>
struct internal::NaturalCodingTraits<::test_nullable::StructWithNullableHandle>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::StructWithNullableHandle, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::StructWithNullableHandle>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::StructWithNullableHandle>::value &&
          internal::NaturalIsMemcpyCompatible<::zx::vmo>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_SimpleProtocolAddTopResponseTable;

template <>
struct IsFidlType<::test_nullable::SimpleProtocolAddTopResponse>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<
    ::test_nullable::SimpleProtocolAddTopResponse>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_SimpleProtocolAddTopResponseTable;
};

template <>
struct internal::NaturalCodingTraits<
    ::test_nullable::SimpleProtocolAddTopResponse>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::SimpleProtocolAddTopResponse, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::SimpleProtocolAddTopResponse>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::SimpleProtocolAddTopResponse>::value &&
          internal::NaturalIsMemcpyCompatible<int32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_SimpleProtocolAddRequestTable;

template <>
struct IsFidlType<::test_nullable::SimpleProtocolAddRequest>
    : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::SimpleProtocolAddRequest>
    final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_SimpleProtocolAddRequestTable;
};

template <>
struct internal::NaturalCodingTraits<::test_nullable::SimpleProtocolAddRequest>
    final : public ::fidl::internal::NaturalStructCodingTraits<
                ::test_nullable::SimpleProtocolAddRequest, 8, 8> {};

template <>
struct internal::NaturalIsMemcpyCompatible<
    ::test_nullable::SimpleProtocolAddRequest>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::SimpleProtocolAddRequest>::value &&
          internal::NaturalIsMemcpyCompatible<int32_t>::value> {};

#endif  // __Fuchsia__

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_nullable_Int32WrapperTable;

template <>
struct IsFidlType<::test_nullable::Int32Wrapper> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_nullable::Int32Wrapper> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_nullable_Int32WrapperTable;
};

template <>
struct internal::NaturalCodingTraits<::test_nullable::Int32Wrapper> final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_nullable::Int32Wrapper, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<::test_nullable::Int32Wrapper>
    : public internal::BoolConstant<
          !HasPadding<::test_nullable::Int32Wrapper>::value &&
          internal::NaturalIsMemcpyCompatible<int32_t>::value> {};

#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_nullable::SimpleUnion> : public std::true_type {};
template <>
struct IsUnion<::test_nullable::SimpleUnion> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_nullable::SimpleUnion> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_nullable::SimpleUnion> {};

}  // namespace fidl
