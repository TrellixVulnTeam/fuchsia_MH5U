// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test.doccomments/cpp/common_types.h>
#include <fidl/test.doccomments/cpp/markers.h>
#include <lib/fidl/cpp/coding_traits.h>
#include <lib/fidl/cpp/unified_messaging.h>

#include <cinttypes>
#include <string>

#ifdef __Fuchsia__

#include <lib/zx/channel.h>

#endif  // __Fuchsia__

namespace test_doccomments {
class Struct;

class Table;

class StrictUnion;

class FlexibleUnion;

extern "C" const fidl_type_t test_doccomments_TableTable;

/// table comment #1
///
/// table comment #3
class Table final {
 private:
  struct Storage_;

 public:
  Table(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Table() noexcept = default;
  Table(Table&&) noexcept = default;
  Table& operator=(Table&&) noexcept = default;
  Table(const Table& other) noexcept : Table(other.CloneStorage_()) {}
  Table& operator=(const Table& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }
  bool operator==(const Table& other) const noexcept {
    return ::fidl::internal::NaturalTableCodingTraits<
        ::test_doccomments::Table>::Equal(this, &other);
  }
  bool operator!=(const Table& other) const noexcept {
    return !::fidl::internal::NaturalTableCodingTraits<
        ::test_doccomments::Table>::Equal(this, &other);
  }

  bool IsEmpty() const { return !(storage_.field.has_value()); }

  /// table field comment #1
  ///
  /// table field comment #3
  const cpp17::optional<int32_t>& field() const { return storage_.field; }
  /// table field comment #1
  ///
  /// table field comment #3
  ::cpp17::optional<int32_t>& field() { return storage_.field; }

 private:
  struct Storage_ final {
    /// table field comment #1
    ///
    /// table field comment #3
    ::cpp17::optional<int32_t> field{};
  };

  // TODO(https://fxbug.dev/91252): Box the storage.
  Storage_ storage_;
  Storage_ CloneStorage_() const;
  friend struct ::fidl::internal::NaturalTableCodingTraits<
      ::test_doccomments::Table>;
  friend struct ::fidl::internal::MemberVisitor<::test_doccomments::Table>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalTableMember<Storage_, int32_t>{
          1, &Storage_::field});
};

extern "C" const fidl_type_t test_doccomments_StructTable;

/// struct comment #1
///
/// struct comment #3
class Struct final {
 private:
  struct Storage_;

 public:
  Struct(Storage_ storage) noexcept : storage_(std::move(storage)) {}
  Struct(int32_t field) noexcept : storage_({.field = std::move(field)}) {}
  Struct() : Struct(Storage_{}) {}

  Struct(Struct&&) noexcept = default;
  Struct& operator=(Struct&&) noexcept = default;
  Struct(const Struct& other) noexcept : Struct(other.CloneStorage_()) {}
  Struct& operator=(const Struct& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const Struct& other) const noexcept {
    return ::fidl::internal::NaturalStructCodingTraits<
        ::test_doccomments::Struct, 4, 4>::Equal(this, &other);
  }
  bool operator!=(const Struct& other) const noexcept {
    return !::fidl::internal::NaturalStructCodingTraits<
        ::test_doccomments::Struct, 4, 4>::Equal(this, &other);
  }

  /// struct member comment #1
  ///
  /// struct member comment #3
  int32_t field() const { return storage_.field; }

  /// struct member comment #1
  ///
  /// struct member comment #3
  int32_t& field() { return storage_.field; }

 private:
  struct Storage_ final {
    /// struct member comment #1
    ///
    /// struct member comment #3
    int32_t field{};
  };

  Storage_ storage_;
  Storage_ CloneStorage_() const;

  friend struct ::fidl::internal::NaturalStructCodingTraits<
      ::test_doccomments::Struct, 4, 4>;
  friend struct ::fidl::internal::MemberVisitor<::test_doccomments::Struct>;
  static constexpr auto kMembers =
      std::make_tuple(::fidl::internal::NaturalStructMember<Storage_, int32_t>{
          &Storage_::field, 0, 0});
};

extern "C" const fidl_type_t test_doccomments_StrictUnionTable;

/// strict union comment #1
///
/// strict union comment #3
class StrictUnion final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, int32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kField = 1,  // 0x1
  };

  // Create an unknown value of this union.
  StrictUnion() : storage_(std::make_shared<Storage_>()) {}

  StrictUnion(StrictUnion&&) noexcept = default;
  StrictUnion& operator=(StrictUnion&&) noexcept = default;
  StrictUnion(const StrictUnion& other) noexcept
      : StrictUnion(other.CloneStorage_()) {}
  StrictUnion& operator=(const StrictUnion& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const StrictUnion& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const StrictUnion& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_doccomments::StrictUnion::Tag Which() const {
    return StrictUnion::IndexToTag(storage_->index());
  }
  static StrictUnion WithField(int32_t val) {
    return StrictUnion(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> field() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> field() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_doccomments::StrictUnion>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit StrictUnion(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(::test_doccomments::StrictUnion::Tag tag) {
    switch (tag) {
      case ::test_doccomments::StrictUnion::Tag::kField:
        return 1;
    }
  }

  static constexpr ::test_doccomments::StrictUnion::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_doccomments::StrictUnion::Tag::kField;
      // TODO: what's the right thing to do here?
      default:
        return ::test_doccomments::StrictUnion::Tag::kField;
    }
  }
};

extern "C" const fidl_type_t test_doccomments_FlexibleUnionTable;

/// flexible union comment #1
///
/// flexible union comment #3
class FlexibleUnion final {
 private:
  using Storage_ = cpp17::variant<cpp17::monostate, int32_t>;

 public:
  // TODO: share union tag types between wire & natural.
  enum class Tag : fidl_union_tag_t {
    kField = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  // Create an unknown value of this union.
  FlexibleUnion() : storage_(std::make_shared<Storage_>()) {}

  FlexibleUnion(FlexibleUnion&&) noexcept = default;
  FlexibleUnion& operator=(FlexibleUnion&&) noexcept = default;
  FlexibleUnion(const FlexibleUnion& other) noexcept
      : FlexibleUnion(other.CloneStorage_()) {}
  FlexibleUnion& operator=(const FlexibleUnion& other) noexcept {
    storage_ = other.CloneStorage_();
    return *this;
  }

  bool operator==(const FlexibleUnion& other) const noexcept {
    return *storage_ == *other.storage_;
  }
  bool operator!=(const FlexibleUnion& other) const noexcept {
    return *storage_ != *other.storage_;
  }

  constexpr ::test_doccomments::FlexibleUnion::Tag Which() const {
    return FlexibleUnion::IndexToTag(storage_->index());
  }
  static FlexibleUnion WithField(int32_t val) {
    return FlexibleUnion(
        std::make_shared<Storage_>(std::in_place_index_t<1>{}, std::move(val)));
  }

  const ::fidl::internal::UnionMemberView<1, Storage_> field() const {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }
  ::fidl::internal::UnionMemberView<1, Storage_> field() {
    return ::fidl::internal::UnionMemberView<1, Storage_>(storage_);
  }

 private:
  std::shared_ptr<Storage_> storage_;
  std::shared_ptr<Storage_> CloneStorage_() const;
  friend struct ::fidl::internal::NaturalUnionCodingTraits<
      ::test_doccomments::FlexibleUnion>;
  static constexpr std::array<
      std::optional<::fidl::internal::NaturalHandleInformation>, 2>
      kMembers = {std::nullopt, std::nullopt};

  explicit FlexibleUnion(std::shared_ptr<Storage_> storage)
      : storage_(std::move(storage)) {}

  static constexpr size_t TagToIndex(
      ::test_doccomments::FlexibleUnion::Tag tag) {
    switch (tag) {
      case ::test_doccomments::FlexibleUnion::Tag::kField:
        return 1;
      case ::test_doccomments::FlexibleUnion::Tag::kUnknown:
        return 0;
    }
  }

  static constexpr ::test_doccomments::FlexibleUnion::Tag IndexToTag(
      size_t index) {
    switch (index) {
      case 1:
        return ::test_doccomments::FlexibleUnion::Tag::kField;
      default:
        return ::test_doccomments::FlexibleUnion::Tag::kUnknown;
    }
  }
};

/// const comment #1
///
/// const comment #3
constexpr int32_t C = 4u;

}  // namespace test_doccomments
namespace fidl {

#ifdef __Fuchsia__
extern "C" const fidl_type_t test_doccomments_StructTable;

template <>
struct IsFidlType<::test_doccomments::Struct> : public std::true_type {};

template <>
struct ::fidl::internal::TypeTraits<::test_doccomments::Struct> final {
 public:
  static constexpr const fidl_type_t* kCodingTable =
      &test_doccomments_StructTable;
};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::Struct> final
    : public ::fidl::internal::NaturalStructCodingTraits<
          ::test_doccomments::Struct, 4, 4> {};

template <>
struct internal::NaturalIsMemcpyCompatible<::test_doccomments::Struct>
    : public internal::BoolConstant<
          !HasPadding<::test_doccomments::Struct>::value &&
          internal::NaturalIsMemcpyCompatible<int32_t>::value> {};

#endif  // __Fuchsia__

template <>
struct IsFidlType<::test_doccomments::Table> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::Table>
    : public ::fidl::internal::NaturalTableCodingTraits<
          ::test_doccomments::Table> {};

template <>
struct IsFidlType<::test_doccomments::StrictUnion> : public std::true_type {};
template <>
struct IsUnion<::test_doccomments::StrictUnion> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::StrictUnion> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_doccomments::StrictUnion> {};

template <>
struct IsFidlType<::test_doccomments::FlexibleUnion> : public std::true_type {};
template <>
struct IsUnion<::test_doccomments::FlexibleUnion> : public std::true_type {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::FlexibleUnion> final
    : public ::fidl::internal::NaturalUnionCodingTraits<
          ::test_doccomments::FlexibleUnion> {};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::MyStrictBits> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_doccomments::MyStrictBits* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_doccomments::MyStrictBits>(offset) =
        *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_doccomments::MyStrictBits* value, size_t offset) {
    *value =
        *decoder->template GetPtr<::test_doccomments::MyStrictBits>(offset);
  }
};
template <>
struct internal::NaturalCodingTraits<::test_doccomments::MyFlexibleBits> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_doccomments::MyFlexibleBits* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_doccomments::MyFlexibleBits>(offset) =
        *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_doccomments::MyFlexibleBits* value, size_t offset) {
    *value =
        *decoder->template GetPtr<::test_doccomments::MyFlexibleBits>(offset);
  }
};

template <>
struct internal::NaturalCodingTraits<::test_doccomments::MyStrictEnum> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_doccomments::MyStrictEnum* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_doccomments::MyStrictEnum>(offset) =
        *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_doccomments::MyStrictEnum* value, size_t offset) {
    *value =
        *decoder->template GetPtr<::test_doccomments::MyStrictEnum>(offset);
  }
};
template <>
struct internal::NaturalCodingTraits<::test_doccomments::MyFlexibleEnum> {
  static constexpr size_t inline_size_v1_no_ee = sizeof(uint32_t);
  static constexpr size_t inline_size_v2 = sizeof(uint32_t);

  static void Encode(internal::NaturalEncoder* encoder,
                     ::test_doccomments::MyFlexibleEnum* value, size_t offset,
                     cpp17::optional<NaturalHandleInformation>
                         maybe_handle_info = cpp17::nullopt) {
    ZX_DEBUG_ASSERT(maybe_handle_info == cpp17::nullopt);
    *encoder->template GetPtr<::test_doccomments::MyFlexibleEnum>(offset) =
        *value;
  }
  static void Decode(internal::NaturalDecoder* decoder,
                     ::test_doccomments::MyFlexibleEnum* value, size_t offset) {
    *value =
        *decoder->template GetPtr<::test_doccomments::MyFlexibleEnum>(offset);
  }
};

}  // namespace fidl
