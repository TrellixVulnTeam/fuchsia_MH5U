// WARNING: This file is machine generated by fidlgen_llcpp.

#pragma once

#include <fidl/test.nullable/cpp/markers.h>
#include <fidl/test.nullable/cpp/natural_types.h>
#include <lib/fidl/cpp/channel.h>
#include <lib/fidl/cpp/client.h>
#include <lib/fidl/cpp/internal/message_extensions.h>
#include <lib/fidl/cpp/internal/natural_client_messenger.h>
#include <lib/fidl/cpp/internal/natural_server_messenger.h>
#include <lib/fidl/cpp/natural_types.h>
#include <lib/fidl/cpp/unified_messaging.h>

namespace fidl {}  // namespace fidl
namespace test_nullable {
__LOCAL extern "C" const fidl_type_t
    test_nullable_SimpleProtocolAddRequestTable;
__LOCAL extern "C" const fidl_type_t
    test_nullable_SimpleProtocolAddTopResponseTable;

#ifdef __Fuchsia__
}  // namespace test_nullable

template <>
class ::fidl::Response<::test_nullable::SimpleProtocol::Add> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Response<::test_nullable::SimpleProtocol::Add>> {
 public:
  Response() = default;
  ~Response() = default;
  Response(Response&&) noexcept = default;
  Response& operator=(Response&&) noexcept = default;
  Response(::test_nullable::SimpleProtocolAddTopResponse payload)
      : payload_(std::move(payload)) {}
  ::test_nullable::SimpleProtocolAddTopResponse* operator->() {
    return &payload_;
  }
  const ::test_nullable::SimpleProtocolAddTopResponse* operator->() const {
    return &payload_;
  }
  ::test_nullable::SimpleProtocolAddTopResponse& operator*() {
    return payload_;
  }
  const ::test_nullable::SimpleProtocolAddTopResponse& operator*() const {
    return payload_;
  }

 private:
  ::test_nullable::SimpleProtocolAddTopResponse payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Response<::test_nullable::SimpleProtocol::Add>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_nullable::SimpleProtocolAddTopResponse;
};
namespace test_nullable {}  // namespace test_nullable
template <>
class ::fidl::internal::ClientCallbackTraits<
    ::test_nullable::SimpleProtocol::Add>
    final {
 public:
  ClientCallbackTraits() = delete;
  using ResultCallback = ::fit::callback<void(
      ::fitx::result<::fidl::Error,
                     ::fidl::Response<::test_nullable::SimpleProtocol::Add>>&)>;
  using ResponseCallback = ::fit::callback<void(
      ::fidl::Response<::test_nullable::SimpleProtocol::Add>&)>;
};

template <>
class ::fidl::internal::NaturalClientImpl<::test_nullable::SimpleProtocol> final
    : public ::fidl::internal::NaturalClientBase {
 public:
  using NaturalClientBase::NaturalClientBase;
  void Add(::test_nullable::SimpleProtocolAddRequest&& payload,
           ::fidl::ClientCallback<::test_nullable::SimpleProtocol::Add>&&
               _callback) const;

  void Add(
      ::test_nullable::SimpleProtocolAddRequest&& payload,
      ::fidl::ClientResponseCallback<::test_nullable::SimpleProtocol::Add>&&
          _callback) const;
};
namespace test_nullable {
#endif  // __Fuchsia__

}  // namespace test_nullable
#ifdef __Fuchsia__

template <>
class ::fidl::internal::NaturalEventHandlerInterface<
    ::test_nullable::SimpleProtocol> {
 public:
  NaturalEventHandlerInterface() = default;
  virtual ~NaturalEventHandlerInterface() = default;
};

template <>
class ::fidl::AsyncEventHandler<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::NaturalEventHandlerInterface<
          ::test_nullable::SimpleProtocol>,
      public ::fidl::internal::AsyncEventHandler {
 public:
  AsyncEventHandler() = default;
};

template <>
class ::fidl::internal::NaturalEventDispatcher<::test_nullable::SimpleProtocol>
    final : public ::fidl::internal::IncomingEventDispatcher<
                ::fidl::AsyncEventHandler<::test_nullable::SimpleProtocol>> {
 public:
  explicit NaturalEventDispatcher(
      ::fidl::AsyncEventHandler<::test_nullable::SimpleProtocol>* event_handler)
      : IncomingEventDispatcher(event_handler) {}

 private:
  std::optional<::fidl::UnbindInfo> DispatchEvent(
      ::fidl::IncomingMessage& msg,
      internal::IncomingTransportContext transport_context) override;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__
template <>
class ::fidl::internal::NaturalWeakEventSender<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::WeakEventSenderBase {
 public:
  using WeakEventSenderBase::WeakEventSenderBase;
};

template <>
class ::fidl::internal::NaturalEventSender<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::SyncEndpointManagedVeneer<
          ::fidl::internal::NaturalEventSender<
              ::test_nullable::SimpleProtocol>> {
 public:
  using SyncEndpointManagedVeneer::SyncEndpointManagedVeneer;
};
#endif  // __Fuchsia__

#ifdef __Fuchsia__

template <>
class ::fidl::Request<::test_nullable::SimpleProtocol::Add> final
    : public ::fidl::internal::MessageBase<
          ::fidl::Request<::test_nullable::SimpleProtocol::Add>> {
 public:
  Request() = default;
  ~Request() = default;
  Request(Request&&) noexcept = default;
  Request& operator=(Request&&) noexcept = default;
  Request(::test_nullable::SimpleProtocolAddRequest payload)
      : payload_(std::move(payload)) {}
  ::test_nullable::SimpleProtocolAddRequest* operator->() { return &payload_; }
  const ::test_nullable::SimpleProtocolAddRequest* operator->() const {
    return &payload_;
  }
  ::test_nullable::SimpleProtocolAddRequest& operator*() { return payload_; }
  const ::test_nullable::SimpleProtocolAddRequest& operator*() const {
    return payload_;
  }

 private:
  ::test_nullable::SimpleProtocolAddRequest payload_;
};

template <>
struct ::fidl::internal::MessageTraits<
    ::fidl::Request<::test_nullable::SimpleProtocol::Add>>
    final {
 public:
  static constexpr bool kHasPayload = true;
  using Payload = ::test_nullable::SimpleProtocolAddRequest;
};
#endif  // __Fuchsia__

template <>
class ::fidl::internal::NaturalCompleterBase<
    ::test_nullable::SimpleProtocol::Add> : public ::fidl::CompleterBase {
 public:
  void Reply(::test_nullable::SimpleProtocolAddTopResponse&& payload);

 protected:
  using ::fidl::CompleterBase::CompleterBase;
};

template <>
struct ::fidl::internal::MethodTypes<::test_nullable::SimpleProtocol::Add> {
  using Completer = fidl::Completer<::fidl::internal::NaturalCompleterBase<
      ::test_nullable::SimpleProtocol::Add>>;
};

template <>
class ::fidl::Server<::test_nullable::SimpleProtocol>
    : public ::fidl::internal::IncomingMessageDispatcher {
 public:
  Server() = default;
  virtual ~Server() = default;

  // The FIDL protocol type that is implemented by this server.
  using _EnclosingProtocol = ::test_nullable::SimpleProtocol;

  using AddRequest = ::fidl::Request<::test_nullable::SimpleProtocol::Add>;
  using AddCompleter =
      ::fidl::internal::NaturalCompleter<::test_nullable::SimpleProtocol::Add>;

  virtual void Add(AddRequest& request, AddCompleter::Sync& completer) = 0;

 private:
  void dispatch_message(
      ::fidl::IncomingMessage&& msg, ::fidl::Transaction* txn,
      ::fidl::internal::IncomingTransportContext transport_context) final;
};

#ifdef __Fuchsia__

template <>
struct ::fidl::internal::NaturalServerDispatcher<
    ::test_nullable::SimpleProtocol>
    final {
  NaturalServerDispatcher() = delete;
  static void Dispatch(::fidl::Server<::test_nullable::SimpleProtocol>* impl,
                       ::fidl::IncomingMessage&& msg,
                       internal::IncomingTransportContext transport_context,
                       ::fidl::Transaction* txn);

 private:
  static const ::fidl::internal::MethodEntry entries_[];
  static const ::fidl::internal::MethodEntry* entries_end_;
};
#endif  // __Fuchsia__
