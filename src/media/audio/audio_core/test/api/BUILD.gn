# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/testing/environments.gni")
import("//src/media/audio/audio_core/test/api/api_test_component.gni")
import("//src/media/audio/audio_core_package.gni")
import("//src/media/audio/hardware.gni")

loadable_module("audio-core-api-test-effects") {
  sources = [ "effects.cc" ]

  deps = [
    "//sdk/lib/media/audio/effects",
    "//sdk/lib/syslog/cpp",
    "//third_party/rapidjson",
    "//zircon/system/ulib/fzl",
  ]
}

audio_core_test_package("audio-core-with-test-effects") {
  effects = {
    target = "//src/media/audio/audio_core/test/api:audio-core-api-test-effects"
    name = "audio-core-api-test-effects.so"
  }
}

resource("audio-core-config-48k") {
  sources = [ "testdata/audio_core_config_48k.json" ]
  outputs = [ "data/audio-core-config-48k/audio_core_config.json" ]
}

resource("audio-core-config-96k") {
  sources = [ "testdata/audio_core_config_96k.json" ]
  outputs = [ "data/audio-core-config-96k/audio_core_config.json" ]
}

resource("audio-core-config-48k-96k") {
  sources = [ "testdata/audio_core_config_48k_96k.json" ]
  outputs = [ "data/audio-core-config-48k-96k/audio_core_config.json" ]
}

resource("audio-core-config-with-gain-limits") {
  sources = [ "testdata/audio_core_config_with_gain_limits.json" ]
  outputs = [ "data/audio-core-config-with-gain-limits/audio_core_config.json" ]
}

resource("audio-core-config-with-inversion-filter") {
  sources = [ "testdata/audio_core_config_with_inversion_filter.json" ]
  outputs =
      [ "data/audio-core-config-with-inversion-filter/audio_core_config.json" ]
}

resource("audio-core-config-with-inversion-filter-v2") {
  sources = [ "testdata/audio_core_config_with_inversion_filter_v2.json" ]
  outputs = [
    "data/audio-core-config-with-inversion-filter-v2/audio_core_config.json",
  ]
}

resource("audio-core-config-with-sleeper-filter") {
  sources = [ "testdata/audio_core_config_with_sleeper_filter.json" ]
  outputs =
      [ "data/audio-core-config-with-sleeper-filter/audio_core_config.json" ]
}

resource("audio-core-config-with-sw-gain") {
  sources = [ "testdata/audio_core_config_with_sw_gain.json" ]
  outputs = [ "data/audio-core-config-with-sw-gain/audio_core_config.json" ]
}

resource("audio-core-config-with-ultrasound") {
  sources = [ "testdata/ultrasound_audio_core_config.json" ]
  outputs = [ "data/ultrasound/audio_core_config.json" ]
}

source_set("fidelity_results") {
  testonly = true
  sources = [
    "fidelity_results.cc",
    "fidelity_results.h",
  ]
  deps = [ "//src/media/audio/lib/test:hermetic_pipeline_test" ]
}

audio_core_api_test_component("activity-reporter-test") {
  source = "activity_reporter_test.cc"
  executable_deps = []
}

audio_core_api_test_component("audio-capturer-test") {
  source = "audio_capturer_test.cc"
  executable_deps = [
    "//sdk/lib/media/audio/cpp",
    "//src/media/audio/lib/clock",
    "//src/media/audio/lib/clock/testing",
  ]
}

audio_core_api_test_component("audio-capturer-pipeline-test") {
  source = "audio_capturer_pipeline_test.cc"
  executable_deps = [ "//sdk/lib/media/audio/cpp" ]
  component_deps = [ ":audio-core-config-with-sw-gain" ]
}

audio_core_api_test_component("audio-clock-pipeline-test") {
  source = "audio_clock_pipeline_test.cc"
  executable_deps = [
    "//sdk/lib/media/audio/cpp",
    "//sdk/lib/stdcompat",
    "//src/media/audio/audio_core/mixer",
  ]
}

audio_core_api_test_component("audio-core-fidelity-test") {
  source = "audio_core_fidelity_test.cc"
  executable_deps = [
    ":fidelity_results",
    "//src/media/audio/audio_core/mixer:coefficient_table",
    "//src/media/audio/lib/analysis",
    "//src/media/audio/lib/test:hermetic_pipeline_test",
  ]
  component_deps = [
    ":audio-core-config-48k",
    ":audio-core-config-48k-96k",
    ":audio-core-config-96k",
  ]
}

audio_core_api_test_component("audio-device-enumerator-test") {
  source = "audio_device_enumerator_test.cc"
  executable_deps = [ "//src/media/audio/audio_core/testing" ]
}

audio_core_api_test_component("audio-policy-pipeline-test") {
  source = "audio_policy_pipeline_test.cc"
  executable_deps = [ "//src/lib/fxl" ]
}

audio_core_api_test_component("audio-renderer-test") {
  source = "audio_renderer_test.cc"
  executable_deps = [
    "//sdk/lib/media/audio/cpp",
    "//src/media/audio/lib/clock",
    "//src/media/audio/lib/clock/testing",
  ]
}

audio_core_api_test_component("audio-renderer-pipeline-test") {
  source = "audio_renderer_pipeline_test.cc"
  executable_deps = [
    "//src/media/audio/audio_core/mixer",
    "//src/media/audio/lib/analysis",
  ]
  component_deps = [
    ":audio-core-config-with-gain-limits",
    ":audio-core-config-with-inversion-filter",
    ":audio-core-config-with-inversion-filter-v2",
    ":audio-core-config-with-sleeper-filter",
    ":audio-core-with-test-effects",
  ]
}

audio_core_api_test_component("audio-test") {
  source = "audio_test.cc"
  executable_deps = [ "//sdk/fidl/fuchsia.media" ]
}

audio_core_api_test_component("audio-tuner-test") {
  source = "audio_tuner_test.cc"
  executable_deps = [ "//sdk/fidl/fuchsia.media.tuning" ]
}

audio_core_api_test_component("gain-control-test") {
  source = "gain_control_test.cc"
  executable_deps = []
}

audio_core_api_test_component("ultrasound-test") {
  source = "ultrasound_test.cc"
  executable_deps = [
    "//src/media/audio/lib/clock",
    "//src/media/audio/lib/clock/testing",
  ]
  component_deps = [ ":audio-core-config-with-ultrasound" ]
}

audio_core_api_test_component("usage-gain-reporter-test") {
  source = "usage_gain_reporter_test.cc"
  executable_deps = [ "//sdk/fidl/fuchsia.media.audio" ]
}

audio_core_api_test_component("usage-reporter-test") {
  source = "usage_reporter_test.cc"
  executable_deps = []
}

audio_core_api_test_component("volume-control-test") {
  source = "volume_control_test.cc"
  executable_deps = []
}

# These tests can run anywhere, including in emulators.
fuchsia_test_package("audio-core-api-tests") {
  package_deps_for_infra_only = [
    "//garnet/bin/trace_manager:trace_manager",
    "//src/media/audio/audio_core",
    "//src/media/audio/audio_core:audio-core-for-test",
    "//src/media/audio/audio_core:audio_core",
    "//src/media/audio/virtual_audio_service:virtual-audio-service-for-test",
    "//src/power/testing/thermal-test-control:thermal-test-control",
  ]
  test_components = [
    ":activity-reporter-test",
    ":audio-capturer-test",
    ":audio-device-enumerator-test",
    ":audio-renderer-test",
    ":audio-test",
    ":audio-tuner-test",
    ":gain-control-test",
    ":ultrasound-test",
    ":usage-gain-reporter-test",
    ":usage-reporter-test",
    ":volume-control-test",
  ]
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
  deps = [ "//src/media/audio/lib/audio_test_devmgr:audio-test-devmgr" ]
}

# These tests must run on real hardware because they have hard real-time restraints.
# Emulators are too slow.
fuchsia_test_package("audio-core-api-pipeline-tests") {
  test_components = [
    ":audio-capturer-pipeline-test",
    ":audio-clock-pipeline-test",
    ":audio-core-fidelity-test",
    ":audio-policy-pipeline-test",
    ":audio-renderer-pipeline-test",
  ]
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
    environments = hardware_envs
  }
  deps = [ "//src/media/audio/lib/audio_test_devmgr:audio-test-devmgr" ]
}
