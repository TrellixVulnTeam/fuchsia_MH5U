// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
#include <fuchsia/security/codelabsmartdoor/cpp/fidl.h>

#include "lib/sys/cpp/component_context.h"
#include "src/lib/testing/loop_fixture/test_loop_fixture.h"

namespace securitycodelab {

using fuchsia::security::codelabsmartdoor::AccessResetSyncPtr;
using fuchsia::security::codelabsmartdoor::AccessSyncPtr;
using fuchsia::security::codelabsmartdoor::MemoryResetSyncPtr;
using fuchsia::security::codelabsmartdoor::MemorySyncPtr;

class SecurityCodelab : public gtest::TestLoopFixture {
 protected:
  void SetUp() override {
    TestLoopFixture::SetUp();
    auto context = sys::ComponentContext::CreateAndServeOutgoingDirectory();
    context->svc()->Connect(smart_door_.NewRequest());
    context->svc()->Connect(smart_door_memory_.NewRequest());

    // Reset the components to their initial state for each test.
    AccessResetSyncPtr smart_door_reset;
    context->svc()->Connect(smart_door_reset.NewRequest());
    smart_door_reset->Reset();
    MemoryResetSyncPtr smart_door_memory_;
    context->svc()->Connect(smart_door_memory_.NewRequest());
    smart_door_memory_->Reset();
  }

  void TearDown() override { TestLoopFixture::TearDown(); }
  AccessSyncPtr smart_door_;
  MemorySyncPtr smart_door_memory_;
};

TEST_F(SecurityCodelab, Practice1) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice2) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice3) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice4) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice5) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice6) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice7) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice8) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice9) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

TEST_F(SecurityCodelab, Practice10) {
  // TODO: fill in this function.
  EXPECT_TRUE(true);
}

}  // namespace securitycodelab
