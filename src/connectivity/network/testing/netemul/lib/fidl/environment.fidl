// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.netemul.environment;

using fuchsia.logger;
using fuchsia.netemul.network;
using fuchsia.sys;
using zx;

/// A single service to be launched in managed environment.
type LaunchService = struct {
    /// Service name.
    name string:MAX;
    /// Service launch url (fuchsia component url).
    url string:MAX;
    /// Service launch arguments
    arguments vector<string:MAX>:MAX;
};

/// A single virtual device to make available for child processes.
/// Virtual devices are mounted on /vdev.
type VirtualDevice = resource struct {
    /// Relative path to /vdev.
    path string:MAX;
    /// Virtual device server.
    device client_end:fuchsia.netemul.network.DeviceProxy;
};

/// Logger specific options for a created environment
type LoggerOptions = table {
    /// Enable printing logs.
    1: enabled bool;
    /// Enable kernel logs (no effect if `enabled` is false).
    2: klogs_enabled bool;
    /// LogFilter Options straight from fuchsia.logger.LogFilter.
    /// The LogFilterOptions will be passed directly to the `Listen`
    /// function of the fuchsia.logger.Log service without any
    /// modification. If none provided, assume null. See `Listen` of
    /// fuchsia.logger.Log for more information.
    3: filter_options fuchsia.logger.LogFilterOptions;
    /// Use the parent environment's syslog for output, only enriching
    /// tags with environment names. If false or not provided,
    /// environment logs are printed to stdout.
    4: syslog_output bool;
};

/// Options used to create environment.
type EnvironmentOptions = resource table {
    /// Environment name, for debugging purposes.
    /// If none provided, a random name will be generated.
    1: name string:MAX;
    /// Services to register on environment.
    /// If none provided, no additional services will be registered.
    /// However, a ManagedEnvironment may still register some default
    /// services.
    2: services vector<LaunchService>:MAX;
    /// Devices to make available.
    /// If none provided, no devices will be made available.
    3: devices vector<VirtualDevice>:MAX;
    /// Whether to inherit service launch options from parent environment.
    /// If none provided, assume false.
    4: inherit_parent_launch_services bool;
    /// Logger Options.
    /// If none provided, log printing is disabled by default.
    5: logger_options LoggerOptions;
};

/// Managed environment is made available on netemul runners.
/// Typically this interface will be used by the root runner
/// to setup the testing environment.
@discoverable
protocol ManagedEnvironment {
    /// Gets the managed launcher for the environment.
    GetLauncher(resource struct {
        launcher server_end:fuchsia.sys.Launcher;
    });
    /// Creates a nested managed environment.
    CreateChildEnvironment(resource struct {
        child_env server_end:ManagedEnvironment;
        options EnvironmentOptions;
    });
    /// Connects to a service named `name` provided by this environment.
    ConnectToService(resource struct {
        name string:MAX;
        req zx.handle:CHANNEL;
    });
    /// Exposes new virtual device `device` for all components within this environment
    AddDevice(resource struct {
        device VirtualDevice;
    });
    /// Removes virtual device mounted at `path` (relative to /vdev)
    RemoveDevice(struct {
        path string:MAX;
    });
};
