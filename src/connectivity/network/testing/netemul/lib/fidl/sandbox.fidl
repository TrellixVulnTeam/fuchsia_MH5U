// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.netemul.sandbox;

using fuchsia.netemul.environment;
using fuchsia.netemul.network;
using fuchsia.netemul.sync;

/// Every connection to `Sandbox` represents a self-contained
/// context where ManagedEnvironments can be created. The
/// NetworkContext and SyncManager instances offered by it are
/// the same that are exposed to any ManagedEnvironment created
/// by the Sandbox.
/// The lifetime of the created environments (and the context
/// services) is bound to the connection to the Sandbox service.
/// If the channel is closed, all the environments and the
/// components created within them will be terminated.
@discoverable
protocol Sandbox {
    /// Creates a new empty environment `root_env` configured by `options`.
    CreateEnvironment(resource struct {
        root_env server_end:fuchsia.netemul.environment.ManagedEnvironment;
        options fuchsia.netemul.environment.EnvironmentOptions;
    });
    /// Gets this sandbox's NetworkContext.
    GetNetworkContext(resource struct {
        network_context server_end:fuchsia.netemul.network.NetworkContext;
    });
    /// Gets this sandbox's SyncManager.
    GetSyncManager(resource struct {
        sync_manager server_end:fuchsia.netemul.sync.SyncManager;
    });
};
