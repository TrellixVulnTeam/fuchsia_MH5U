# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/config.gni")
import("//build/fuzzing/fuzzer.gni")
import("//build/test.gni")

declare_args() {
  # Enables the tracing feature of mdns, which can be turned on using
  # "mdns-util verbose".
  enable_mdns_trace = false
}

group("service") {
  testonly = true
  deps = [
    ":mdns",
    ":source_set",
  ]
}

executable("bin") {
  output_name = "mdns"

  sources = [ "main.cc" ]

  deps = [
    ":source_set",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

source_set("source_set") {
  sources = [
    "agents/address_prober.cc",
    "agents/address_prober.h",
    "agents/address_responder.cc",
    "agents/address_responder.h",
    "agents/host_name_resolver.cc",
    "agents/host_name_resolver.h",
    "agents/instance_prober.cc",
    "agents/instance_prober.h",
    "agents/instance_requestor.cc",
    "agents/instance_requestor.h",
    "agents/instance_responder.cc",
    "agents/instance_responder.h",
    "agents/mdns_agent.h",
    "agents/prober.cc",
    "agents/prober.h",
    "agents/resource_renewer.cc",
    "agents/resource_renewer.h",
    "agents/service_instance_resolver.cc",
    "agents/service_instance_resolver.h",
    "common/mdns_addresses.cc",
    "common/mdns_addresses.h",
    "common/mdns_fidl_util.cc",
    "common/mdns_fidl_util.h",
    "common/mdns_names.cc",
    "common/mdns_names.h",
    "common/reply_address.cc",
    "common/reply_address.h",
    "config.cc",
    "config.h",
    "encoding/dns_formatting.cc",
    "encoding/dns_formatting.h",
    "encoding/dns_message.cc",
    "encoding/dns_message.h",
    "encoding/dns_reading.cc",
    "encoding/dns_reading.h",
    "encoding/dns_writing.cc",
    "encoding/dns_writing.h",
    "encoding/packet_reader.cc",
    "encoding/packet_reader.h",
    "encoding/packet_writer.cc",
    "encoding/packet_writer.h",
    "mdns.cc",
    "mdns.h",
    "services/mdns_deprecated_service_impl.cc",
    "services/mdns_deprecated_service_impl.h",
    "services/mdns_service_impl.cc",
    "services/mdns_service_impl.h",
    "transport/mdns_interface_transceiver.cc",
    "transport/mdns_interface_transceiver.h",
    "transport/mdns_interface_transceiver_v4.cc",
    "transport/mdns_interface_transceiver_v4.h",
    "transport/mdns_interface_transceiver_v6.cc",
    "transport/mdns_interface_transceiver_v6.h",
    "transport/mdns_transceiver.cc",
    "transport/mdns_transceiver.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.device",
    "//sdk/fidl/fuchsia.net",
    "//sdk/fidl/fuchsia.net.interfaces",
    "//sdk/fidl/fuchsia.net.mdns",
    "//sdk/fidl/fuchsia.sys",
    "//sdk/lib/fit",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/syslog/cpp",
    "//src/connectivity/network/lib/net_interfaces/cpp",
    "//src/lib/fostr",
    "//src/lib/fsl",
    "//src/lib/inet",
    "//src/lib/json_parser",
    "//src/lib/json_parser",
    "//third_party/rapidjson",
  ]

  if (enable_mdns_trace) {
    defines = [ "MDNS_TRACE" ]
  }
}

test("mdns_test") {
  sources = [
    "test/address_responder_test.cc",
    "test/agent_test.cc",
    "test/agent_test.h",
    "test/config_test.cc",
    "test/dns_names_test.cc",
    "test/dns_reading_test.cc",
    "test/instance_responder_test.cc",
    "test/interface_transceiver_test.cc",
    "test/mdns_transceiver_test.cc",
    "test/mdns_unit_tests.cc",
    "test/responder_publisher_test.cc",
  ]

  deps = [
    ":source_set",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//src/lib/testing/predicates",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]

  if (enable_mdns_trace) {
    defines = [ "MDNS_TRACE" ]
  }
}

# TODO(https://fxbug.dev/90433): remove once integration tests no longer rely on
# the legacy MDNS component.
fuchsia_component("component-legacy") {
  component_name = "mdns"
  deps = [ ":bin" ]
  manifest = "meta/mdns.cmx"
}

fuchsia_component("component") {
  component_name = "mdns"
  deps = [ ":bin" ]
  manifest = "meta/mdns.cml"
}

fuchsia_package("mdns") {
  deps = [ ":component" ]
}

config_data("mdns_fuchsia_udp_config") {
  for_pkg = "mdns"
  sources = [ rebase_path("config/fuchsia_udp.config") ]

  # Ensure exclusion from production builds.
  deps = [ "//build/validate:non_production_tag" ]
}

group("tests") {
  testonly = true
  deps = [
    ":mdns-fuzzers",
    ":mdns-netemul-tests",
    ":mdns-tests",
    "//src/connectivity/network/testing/netemul/runner/runner:netemul-runner",
  ]
}

fuchsia_unittest_package("mdns-tests") {
  deps = [ ":mdns_test" ]
  manifest = "meta/mdns_test.cml"
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
  }
}

fuzzer("packet_reader_fuzzer") {
  sources = [
    "encoding/dns_message.cc",
    "encoding/dns_message.h",
    "encoding/dns_reading.cc",
    "encoding/dns_reading.h",
    "encoding/packet_reader.cc",
    "encoding/packet_reader.h",
    "encoding/packet_reader_fuzzer.cc",
  ]
  deps = [
    "//sdk/lib/syslog/cpp",
    "//src/lib/inet",
  ]
}

fuzzers_package("mdns-fuzzers") {
  fuzzers = [ ":packet_reader_fuzzer" ]
}

executable("mdns_netemul_test_agent") {
  testonly = true

  sources = [ "test/mdns_netemul_test_agent.cc" ]

  deps = [
    "//sdk/fidl/fuchsia.net.mdns",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/syslog/cpp",
    "//src/lib/fostr/fidl/fuchsia.net",
    "//src/lib/fostr/fidl/fuchsia.net.mdns",
    "//src/lib/fsl",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

fuchsia_component("mdns_netemul_test_agent_component") {
  testonly = true
  component_name = "mdns_netemul_test_agent"
  deps = [ ":mdns_netemul_test_agent" ]
  manifest = "meta/mdns_netemul_test_agent.cmx"
}

fuchsia_unittest_component("mdns_netemul_test") {
  deps = [ ":mdns_netemul_test_agent_component" ]
  manifest = "meta/mdns_netemul_test.cmx"
}

fuchsia_unittest_component("mdns_netemul_v6_test") {
  deps = [ ":mdns_netemul_test_agent_component" ]
  manifest = "meta/mdns_netemul_v6_test.cmx"
}

executable("mdns_netemul_multi_network_test_agent") {
  testonly = true

  sources = [ "test/mdns_netemul_multi_network_test_agent.cc" ]

  deps = [
    ":source_set",
    "//sdk/fidl/fuchsia.net",
    "//sdk/lib/sys/cpp",
    "//src/connectivity/network/testing/netemul/lib/fidl:sync",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

fuchsia_component("mdns_netemul_multi_network_test_agent_component") {
  testonly = true
  component_name = "mdns_netemul_multi_network_test_agent"
  deps = [ ":mdns_netemul_multi_network_test_agent" ]
  manifest = "meta/mdns_netemul_multi_network_test_agent.cmx"
}

fuchsia_unittest_component("mdns_netemul_multi_network_test") {
  deps = [ ":mdns_netemul_multi_network_test_agent_component" ]
  manifest = "meta/mdns_netemul_multi_network_test.cmx"
}

fuchsia_test_package("mdns-netemul-tests") {
  package_deps_for_infra_only = [
    "//src/connectivity/network/testing/netemul/runner:netemul-sandbox",
    "//src/connectivity/network/testing/netemul/runner/runner:netemul-runner",
    "//src/diagnostics/archivist:archivist-for-embedding",
  ]
  test_components = [
    ":mdns_netemul_test",
    ":mdns_netemul_v6_test",
    ":mdns_netemul_multi_network_test",
  ]
  deps = [
    ":component-legacy",
    "//src/connectivity/network/netstack:component-debug-legacy",
    "//src/connectivity/network/testing/netemul/runner:netstack-cfg",
    "//src/connectivity/network/tests:device_name_provider",
  ]
}
