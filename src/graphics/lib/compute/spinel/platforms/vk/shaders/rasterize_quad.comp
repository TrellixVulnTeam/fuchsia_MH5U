// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#version 460

#extension GL_GOOGLE_include_directive : require

//
// Define macros
//

// clang-format off
#define SPN_RASTERIZE_PATH_PRIM_TYPE         SPN_RAST_TYPE_QUAD
#define SPN_RASTERIZE_PATH_PRIM_XY_EXPAND()  SPN_EXPAND_3()
#define SPN_RASTERIZE_PATH_PRIM_W_EXPAND()   SPN_EXPAND_0()
#define SPN_RASTERIZE_PATH_PRIM_END()        }
// clang-format on

//
// Define the transformation
//

#define SPN_RASTERIZE_PATH_PRIM_TRANSFORM()                                                        \
  /* affine */                                                                                     \
  const vec2 p0 = a0 * t_a + t_b[0];                                                               \
  const vec2 p1 = a1 * t_a + t_b[0];                                                               \
  const vec2 p2 = a2 * t_a + t_b[0];

//
// P0, P1, P2 are 2D control points.
//
// Precompute quadratic polynomial coefficients from control cage so we
// can shuffle them in on each iteration of the outer loop and then
// evaluate the polynomial in Horner form.
//
//       |  1  0  0  | | P0 |   |      P0               |
//       |           | |    |   |                       |
//   B = | -2  2  0  | | P1 | = | -2 * P0 + 2 * P1      |
//       |           | |    |   |                       |
//       |  1 -2  1  | | P2 |   |      P0 - 2 * P1 + P2 |
//
// The Cartesian curve point C(t) is calculated with 3 FMAs per
// coordinate:
//
//   C(t) = [ 1 t^1 t^2 ] * B = (B[2] * t + B[1]) * t + B[0]
//
// NOTE(allanmac): We want this to always be true so that points shared
// by path segments remain equal under transformation:
//
//   P2 = (B2 * 1.0 + B1) * 1.0 + B0
//

#define SPN_RASTERIZE_PATH_PRIM_BEGIN()                                                            \
                                                                                                   \
  const float s_segs_f = spn_segment_quad(p0, p1, p2);                                             \
  const float s_denom  = 1.0f / s_segs_f;                                                          \
  const int   s_segs   = int(s_segs_f);                                                            \
                                                                                                   \
  int                      s_inc = subgroupInclusiveAdd(s_segs);                                   \
  SPN_SUBGROUP_UNIFORM int s_rem = subgroupBroadcast(s_inc, SPN_RASTERIZE_SUBGROUP_SIZE - 1);      \
                                                                                                   \
  if (s_rem == 0)                                                                                  \
    return;                                                                                        \
                                                                                                   \
  if (s_segs == 0)                                                                                 \
    s_inc = 0;                                                                                     \
                                                                                                   \
  int s_exc = s_inc - s_segs;                                                                      \
                                                                                                   \
  const vec2 b1 = 2.0f * p1 - 2.0f * p0;                                                           \
  const vec2 b2 = p0 - 2.0f * p1 + p2;                                                             \
                                                                                                   \
  SPN_SUBGROUP_UNIFORM vec2 c1_prev = { 0.0f, 0.0f };                                              \
                                                                                                   \
  while (s_rem > 0)                                                                                \
    {                                                                                              \
      const uint s_src = spn_scan_max(s_inc, s_exc);                                               \
                                                                                                   \
      /* NOTE: highp = 1 + mediump - highp */                                                      \
      const uint s_delta = 1 + gl_SubgroupInvocationID - subgroupShuffle(s_exc, s_src);            \
      const uint s_count = subgroupShuffle(s_segs, s_src);                                         \
                                                                                                   \
      const bool is_s_first = (s_delta == 1);                                                      \
      const bool is_s_last  = (s_delta >= s_count);                                                \
                                                                                                   \
      const float s_t = subgroupShuffle(s_denom, s_src) * float(s_delta);                          \
                                                                                                   \
      s_inc -= SPN_RASTERIZE_SUBGROUP_SIZE;                                                        \
      s_exc -= SPN_RASTERIZE_SUBGROUP_SIZE;                                                        \
      s_rem -= SPN_RASTERIZE_SUBGROUP_SIZE;                                                        \
                                                                                                   \
      /* FIXME(allanmac): use extended subgroup types */                                           \
      const vec2 s0 = { subgroupShuffle(p0.x, s_src), subgroupShuffle(p0.y, s_src) };              \
      const vec2 s1 = { subgroupShuffle(b1.x, s_src), subgroupShuffle(b1.y, s_src) };              \
      const vec2 s2 = { subgroupShuffle(b2.x, s_src), subgroupShuffle(b2.y, s_src) };              \
      const vec2 sn = { subgroupShuffle(p2.x, s_src), subgroupShuffle(p2.y, s_src) };              \
                                                                                                   \
      vec2 c1 = (s2 * s_t + s1) * s_t + s0;                                                        \
                                                                                                   \
      if (is_s_last)                                                                               \
        c1 = sn;                                                                                   \
                                                                                                   \
      /* FIXME(allanmac): use extended subgroup types */                                           \
      vec2 c0 = { subgroupShuffleUp(c1.x, 1), subgroupShuffleUp(c1.y, 1) };                        \
                                                                                                   \
      /* FIXME(allanmac): use Intel shuffle-up */                                                  \
      if (gl_SubgroupInvocationID == 0)                                                            \
        c0 = c1_prev;                                                                              \
                                                                                                   \
      /* FIXME(allanmac): use extended subgroup types */                                           \
      c1_prev.x = subgroupBroadcast(c1.x, SPN_RASTERIZE_SUBGROUP_SIZE - 1);                        \
      c1_prev.y = subgroupBroadcast(c1.y, SPN_RASTERIZE_SUBGROUP_SIZE - 1);                        \
                                                                                                   \
      if (is_s_first)                                                                              \
        c0 = s0;                                                                                   \
                                                                                                   \
      c0 = round(c0);                                                                              \
      c1 = round(c1);

//
//
//

#include "rasterize.comp"

//
//
//
