// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#version 460

//
// SEGMENT TTRK
//
// FIXME(allanmac): The OpenCL and CUDA versions of this kernel are more
// sophisticated but let's see how this performs.  Optimize this later
// using CUDA & OpenCL techniques.
//
// FIXME(allanmac): Transition to a split lo/hi sort.
//
// FIXME(allanmac): Add a "SKIP" bit to the TTRK.
//

#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_shuffle_relative : require
#extension GL_EXT_shader_explicit_arithmetic_types : require

//
// NOTE THAT THE SEGMENT_TTRK KERNEL IS ENTIRELY DEPENDENT ON THE
// LAYOUT OF THE TTRK KEY.
//
// IF THE TTRK KEY IS ALTERED THEN THIS KERNEL WILL NEED TO BE
// UPDATED.
//

#include "spn_config.h"
#include "vk_layouts.h"

//
// This shader expects uvec2 keys
//

#undef HS_ENABLE_SHUFFLE_64

#include "hs_config.h"
#include "hs_glsl_macros_config.h"

//
// overridable specialization constants
//

layout(local_size_x = HS_SLAB_THREADS) in;

//
// NOTE: THIS DESCRIPTOR IS COMPATIBLE WITH HOTSORT
//

SPN_VK_GLSL_DECL_KERNEL_SEGMENT_TTRK();

//
// clang-format off
//

//
// HOTSORT configuration
//

#undef  HS_KV_OUT
#define HS_KV_OUT                ttrks_keys

#undef  HS_KV_OUT_LOAD
#define HS_KV_OUT_LOAD(idx)      HS_KV_OUT[idx]

#undef  HS_KV_OUT_STORE
#define HS_KV_OUT_STORE(idx, kv) HS_KV_OUT[idx] = kv

//
// MACROS
//

#define SPN_HS_IS_NOT_MAX(row_)         (r##row_ != HS_KEY_VAL_MAX)

#define SPN_HS_TTRK_IS_BLOCK(row_)      SPN_BLOCK_ID_IS_BLOCK(r##row_[0])

#define SPN_HS_TTRK_IS_NEW_XY(xy_xor_)  (xy_xor_ != 0)

#define SPN_HS_TTRK_IS_NEW_X(xy_xor_)   ((xy_xor_ - 1) < SPN_GLSL_BITS_TO_MASK(SPN_TTRK_LO_HI_BITS_X))

//
// clang-format on
//

uint
spn_hs_ttrk_get_xy_xor(const uvec2 curr, const uvec2 prev)
{
  const uvec2 c    = curr ^ prev;
  const uint  d_lo = SPN_BITFIELD_EXTRACT(c[0], SPN_TTRK_LO_OFFSET_X, SPN_TTRK_LO_BITS_X);
  const uint  d_hi = SPN_BITFIELD_EXTRACT(c[1], 0, SPN_TTRK_HI_BITS_XY);
  const uint  d    = d_lo | (d_hi << SPN_TTRK_LO_BITS_X);

  return d;
}

//
//
//

void
main()
{
  //
  // Unlike the external HotSort shaders, this shader is compiled
  // against the Spinel layout structures and therefore doesn't
  // require use of an opaque "offset" to properly address the sorted
  // keys.
  //
  HS_SLAB_GLOBAL_IDX();

  const uint gmem_out_idx = gmem_idx;
  const uint linear_idx   = gmem_base + gmem_offset * HS_SLAB_HEIGHT;

  //
  // LOAD ALL THE ROWS
  //
#undef HS_SLAB_ROW
#define HS_SLAB_ROW(row, prev) HS_KEY_TYPE r##row = HS_SLAB_GLOBAL_LOAD_OUT(prev);

  HS_SLAB_ROWS();

  //
  // Shuffle up the last TTRK key from the column to the left.
  //
  // Slab 0 and loading the last key from the previous slab are
  // special cases.
  //
  HS_KEY_TYPE r0 = HS_SUBGROUP_SHUFFLE_UP(HS_REG_LAST(r), 1);

  const bool is_first_lane = (gl_SubgroupInvocationID == 0);

  if (is_first_lane)
    {
      if (gmem_base > 0)
        {
          //
          // If this is the first key in any slab other the first then
          // broadcast load the last key in the previous slab.
          //
          // Note why this works: the last element in the previous
          // slab is "stationary" in the extent -- it remains in the
          // same location both before and after the slab transpose.
          //
          r0 = HS_KV_OUT_LOAD(gmem_base - 1);
        }
      else
        {
          //
          // This is the first slab and first lane so we want to force
          // recording of a new y in order to clear the prefix
          // accumulator.
          //
          // Note that we do not have to trigger detection of a new
          // cohort id because the `rk_off` extent has already been
          // zeroed.
          //
          r0[0] = r1[0];
          r0[1] = r1[1] ^ SPN_TTRK_HI_MASK_Y;
        }
    }

  //
  // FOR ALL VALID KEYS IN SLAB: GATHER META STATS
  //
  uint c      = SPN_UINT_MAX;  // start with impossible value for cohort id
  uint c_prev = SPN_TTRK_HI_GET_COHORT(r0[1]);
  uint blocks = 0;
  uint pk     = 0;
  uint rk     = 0;

//
// FIXME(allanmac): the logic of setting NEW_X/Y bits can be
// streamlined a little.
//
#undef HS_SLAB_ROW
#define HS_SLAB_ROW(row, prev)                                                                     \
  if (SPN_HS_IS_NOT_MAX(row))                                                                      \
    {                                                                                              \
      c = SPN_TTRK_HI_GET_COHORT(r##row[1]);                                                       \
                                                                                                   \
      if (c != c_prev)                                                                             \
        {                                                                                          \
          ttrks_meta.rk_off[c] = linear_idx + prev;                                                \
                                                                                                   \
          SPN_TTRK_SET_NEW_Y(r##row, 1);                                                           \
                                                                                                   \
          if (blocks > 0)                                                                          \
            {                                                                                      \
              atomicAdd(ttrks_meta.blocks[c_prev], blocks);                                        \
              blocks = 0;                                                                          \
            }                                                                                      \
                                                                                                   \
          if (pk > 0)                                                                              \
            {                                                                                      \
              atomicAdd(ttrks_meta.ttpks[c_prev], pk);                                             \
              pk = 0;                                                                              \
            }                                                                                      \
                                                                                                   \
          if (rk > 0)                                                                              \
            {                                                                                      \
              atomicAdd(ttrks_meta.ttrks[c_prev], rk);                                             \
              rk = 0;                                                                              \
            }                                                                                      \
                                                                                                   \
          c_prev = c;                                                                              \
        }                                                                                          \
      else                                                                                         \
        {                                                                                          \
          const uint xy_xor           = spn_hs_ttrk_get_xy_xor(r##row, r##prev);                   \
          const bool is_new_x         = SPN_HS_TTRK_IS_NEW_X(xy_xor);                              \
          const bool is_new_xy        = SPN_HS_TTRK_IS_NEW_XY(xy_xor);                             \
          const uint new_xy_mask_test = is_new_x ? SPN_TTRK_NEW_X : SPN_TTRK_NEW_Y;                \
          const uint new_xy_mask      = is_new_xy ? new_xy_mask_test : 0;                          \
                                                                                                   \
          SPN_TTRK_SET_NEW_XY(r##row, new_xy_mask);                                                \
                                                                                                   \
          pk += (new_xy_mask == SPN_TTRK_NEW_X) ? 1 : 0;                                           \
        }                                                                                          \
                                                                                                   \
      if (SPN_HS_TTRK_IS_BLOCK(row))                                                               \
        {                                                                                          \
          blocks += 1;                                                                             \
        }                                                                                          \
                                                                                                   \
      rk += 1;                                                                                     \
    }

  HS_SLAB_ROWS();

  //
  // IF THERE ARE STRAGGLERS THEN ADD THEM
  //
  if (c != SPN_UINT_MAX)
    {
      if (blocks > 0)
        {
          atomicAdd(ttrks_meta.blocks[c], blocks);
        }

      if (pk > 0)
        {
          atomicAdd(ttrks_meta.ttpks[c], pk);
        }

      // rk will always be > 0
      atomicAdd(ttrks_meta.ttrks[c], rk);
    }

  //
  // TRANSPOSE THE SLAB AND STORE IT
  //
  HS_TRANSPOSE_SLAB();
}

//
//
//
