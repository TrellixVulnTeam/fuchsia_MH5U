// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

//
//
//

#version 460

//
//
//

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_control_flow_attributes : require

//
//
//

#include "spn_config.h"
#include "vk_layouts.h"

//
// BLOCK POOL INIT
//

layout(local_size_x = SPN_DEVICE_BLOCK_POOL_INIT_WORKGROUP_SIZE) in;

//
//
//

SPN_VK_GLSL_DECL_KERNEL_BLOCK_POOL_INIT();

//
//
//

#define SPN_BPI_IDS_PER_WORKGROUP                                                                  \
  (SPN_DEVICE_BLOCK_POOL_INIT_WORKGROUP_SIZE * SPN_DEVICE_BLOCK_POOL_INIT_BP_IDS_PER_INVOCATION)

//
//
//

void
main()
{
  uint bp_id = gl_WorkGroupID.x * SPN_BPI_IDS_PER_WORKGROUP + gl_LocalInvocationID.x;

  //
  // initialize atomics to [ 0, bp_size ]
  //
  if (bp_id < 2)
    {
      bp_atomics[bp_id] = bp_id * bp_size;
    }

  //
  // initialize the pool ids
  //
  [[unroll]]

  for (SPN_SUBGROUP_UNIFORM uint ii = 0;  //
       ii < SPN_DEVICE_BLOCK_POOL_INIT_BP_IDS_PER_INVOCATION;
       ii++)
  {
    if (bp_id < bp_size)
      {
        bp_ids[bp_id] = bp_id * SPN_BLOCK_POOL_SUBBLOCKS_PER_BLOCK;
      }

    bp_id += SPN_DEVICE_BLOCK_POOL_INIT_WORKGROUP_SIZE;
  }
}

//
//
//
