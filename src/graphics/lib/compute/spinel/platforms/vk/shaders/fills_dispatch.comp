// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#version 460

//
//
//

#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require

//
//
//

#include "spn_config.h"
#include "vk_layouts.h"

//
// CONSTANTS
//

#define SPN_FILLS_DISPATCH_SUBGROUP_SIZE (1 << SPN_DEVICE_FILLS_DISPATCH_SUBGROUP_SIZE_LOG2)

//
// FILLS DISPATCH
//
// This fixes up the 8 path primitive counts so they can be used by
// vkCmdDispatchIndirect().
//
// It also computes the exclusive prefix sum of the counts so each
// rasterization workgroup type (lines, quads, etc.) knows where to
// begin the cmd_rast[] buffer.
//
// The sum is stored in the 4th element of each quad.
//

layout(local_size_x = SPN_FILLS_DISPATCH_SUBGROUP_SIZE) in;

//
//
//

SPN_VK_GLSL_DECL_KERNEL_FILLS_DISPATCH();

//
//
//

void
main()
{
#if (SPN_FILLS_DISPATCH_SUBGROUP_SIZE == 4)
  //
  // SIMD4 -- ARM Bifrost4 and maybe very small future GPUs
  //
  uvec4 dispatch[2] = { uvec4(0, 1, 1, 0), uvec4(0, 1, 1, 0) };

  //
  // Load 8 primitive counts.
  //
  dispatch[0][0] = fill_scan_counts[0 + gl_SubgroupInvocationID];
  dispatch[1][0] = fill_scan_counts[4 + gl_SubgroupInvocationID];

  //
  // Inclusive scan-add of commands by type.
  //
  dispatch[0][3] = subgroupInclusiveAdd(dispatch[0][0]);
  dispatch[1][3] = subgroupInclusiveAdd(dispatch[1][0]) + subgroupBroadcast(dispatch[0][3], 3);

  //
  // Convert back to exclusive scan-add.
  //
  dispatch[0][3] -= dispatch[0][0];
  dispatch[1][3] -= dispatch[1][0];

  //
  // Store 8 primitive counts;
  //
  fill_scan_dispatch[0 + gl_SubgroupInvocationID] = dispatch[0];
  fill_scan_dispatch[4 + gl_SubgroupInvocationID] = dispatch[1];

#elif (SPN_FILLS_DISPATCH_SUBGROUP_SIZE >= 8)
  //
  // SIMD8+ -- every other GPU I'm aware of...
  //
  uvec4 dispatch = uvec4(0, 1, 1, 0);

  // Is valid lane?
#if (SPN_FILLS_DISPATCH_SUBGROUP_SIZE > 8)
  const bool is_valid = (gl_SubgroupInvocationID < SPN_RAST_TYPE_COUNT);
#endif

  //
  // Load 8 primitive counts.
  //
#if (SPN_FILLS_DISPATCH_SUBGROUP_SIZE > 8)
  if (is_valid)
#endif
    {
      //
      // FIXME(allanmac): This needs to setup the dispatch based on
      // rounded-up workgroup size and not subgroup size.
      //
      dispatch[0] = fill_scan_counts[gl_SubgroupInvocationID];
    }

  //
  // Exclusive scan-add of commands by type.
  //
  // FIXME(allanmac): predicate/cluster this to only 5 lanes?
  //
  dispatch[3] = subgroupExclusiveAdd(dispatch[0]);

  //
  // Store 8 primitive counts.
  //
#if (SPN_FILLS_DISPATCH_SUBGROUP_SIZE > 8)
  if (is_valid)
#endif
    {
      fill_scan_dispatch[gl_SubgroupInvocationID] = dispatch;
    }

#else
#error "Unexpected subgroup size!"
#endif
}

//
//
//
