// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#version 460

//
// IMPORTANT:
//
// Note that the RASTER TTXK keys are already in *sorted* YX order.
//
// This enables some huge future optimizations:
//
//   1. The PLACE kernel can be exited early once TTXK.x >= clip.x1
//
//   2. If the TTXK keys can be stored together then composition
//      high-performance sorting problem becomes a merging problem --
//      this is especially useful for a CPU/SIMD implementation.
//
//   3. Finally, the PLACE kernel can "bin" TTCK keys and
//      significantly shrink the TTCK YX coordinates freeing bits for
//      either an increased address space or layer stack.
//

#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_vote : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_shuffle : require

//
// PLACE KERNEL
//

#include "spn_config.h"
#include "vk_layouts.h"

//
//
//

layout(local_size_x = SPN_DEVICE_PLACE_WORKGROUP_SIZE) in;

//
//
//

SPN_VK_GLSL_DECL_KERNEL_PLACE_TTSK();

//
// CONSTANTS
//

// clang-format off
#define SPN_PLACE_SUBGROUP_SIZE (1 << SPN_DEVICE_PLACE_SUBGROUP_SIZE_LOG2)
#define SPN_PLACE_SUBGROUPS     (SPN_DEVICE_PLACE_WORKGROUP_SIZE / SPN_PLACE_SUBGROUP_SIZE)
// clang-format on

//
// BLOCK EXPANSION
//

#define SPN_PLACE_BLOCK_EXPAND_SIZE (SPN_BLOCK_POOL_BLOCK_QWORDS / SPN_PLACE_SUBGROUP_SIZE)

//
// RUN-TIME PREDICATES
//

#define SPN_PLACE_BROADCAST(E, O, I) subgroupBroadcast(E, O - I * SPN_PLACE_SUBGROUP_SIZE)

//
//
//

#if (SPN_PLACE_BLOCK_EXPAND_SIZE == 1)

#define SPN_PLACE_BLOCK_EXPAND() SPN_EXPAND_1()
#define SPN_PLACE_BLOCK_EXPAND_I_LAST 0

#elif (SPN_PLACE_BLOCK_EXPAND_SIZE == 2)

#define SPN_PLACE_BLOCK_EXPAND() SPN_EXPAND_2()
#define SPN_PLACE_BLOCK_EXPAND_I_LAST 1

#elif (SPN_PLACE_BLOCK_EXPAND_SIZE == 4)

#define SPN_PLACE_BLOCK_EXPAND() SPN_EXPAND_4()
#define SPN_PLACE_BLOCK_EXPAND_I_LAST 3

#elif (SPN_PLACE_BLOCK_EXPAND_SIZE == 8)

#define SPN_PLACE_BLOCK_EXPAND() SPN_EXPAND_8()
#define SPN_PLACE_BLOCK_EXPAND_I_LAST 7

#elif (SPN_PLACE_BLOCK_EXPAND_SIZE == 16)

#define SPN_PLACE_BLOCK_EXPAND() SPN_EXPAND_16()
#define SPN_PLACE_BLOCK_EXPAND_I_LAST 15

#elif (SPN_PLACE_BLOCK_EXPAND_SIZE == 32)

#define SPN_PLACE_BLOCK_EXPAND() SPN_EXPAND_32()
#define SPN_PLACE_BLOCK_EXPAND_I_LAST 31

#else

#error "Define larger expansion!"

#endif

//
// Translate and clip the TTPK key and massage it into a TTIK key.
//
// TTPK v2 ( DEFAULT )
//
//  0                                  63
//  | TTPB_ID |      SPAN     |  X |  Y |
//  +---------+---------------+----+----+
//  |    27   | 13 [+1,+4095] | 12 | 12 |
//
//  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// TTIK
//                              PREFIX_ZERO_TTPK
//  0                      +-------------------------+                 63
//  | PAYLOAD/TTSB/TTPB ID | PREFIX | ZERO | IS_TTPK | SPAN |  X  |  Y  |
//  +----------------------+--------+------+---------+------+-----+-----+
//  |          27          |    1   |   3  |    1    |  15  |  9  |  8  |
//
//  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// TTCK (64-BIT COMPARE) -- DEFAULT
//
//  0                                                           63
//  | PAYLOAD/TTSB/TTPB_ID | PREFIX | ESCAPE | LAYER |  X  |  Y  |
//  +----------------------+--------+--------+-------+-----+-----+
//  |          27          |    1   |    1   |   18  |  9  |  8  |
//

// clang-format off
#define SPN_TTIK_IS_TTPK(t_)                     (SPN_BITFIELD_EXTRACT((t_)[0],31,1) != 0)

#define SPN_TTIK_LO_MASK_PREFIX_ZERO_TTPK_TRUE   0x11
#define SPN_TTIK_LO_MASK_PREFIX_ZERO_TTPK_FALSE  0x00

#define SPN_TTIK_LO_BITS_PREFIX_ZERO_TTPK        5

#define SPN_TTIK_HI_BITS_SPAN                    (32 - SPN_TTIK_HI_BITS_X - SPN_TTIK_HI_BITS_Y)
#define SPN_TTIK_HI_BITS_X                       SPN_TTCK_HI_BITS_X
#define SPN_TTIK_HI_BITS_Y                       SPN_TTCK_HI_BITS_Y

#define SPN_TTIK_HI_OFFSET_X                     SPN_TTCK_HI_OFFSET_X
#define SPN_TTIK_HI_OFFSET_Y                     SPN_TTCK_HI_OFFSET_Y

#define SPN_TTIK_SET_X(t_, x_)                   t_[1] = SPN_BITFIELD_INSERT(t_[1], x_, SPN_TTIK_HI_OFFSET_X, SPN_TTIK_HI_BITS_X)
#define SPN_TTIK_SET_Y(t_, y_)                   t_[1] = SPN_BITFIELD_INSERT(t_[1], y_, SPN_TTIK_HI_OFFSET_Y, SPN_TTIK_HI_BITS_Y)

#define SPN_TTIK_GET_SPAN(t_)                    SPN_BITFIELD_EXTRACT(t_[1],0,SPN_TTIK_HI_BITS_SPAN)
// clang-format on

//
// The PLACE shader only uses a subgroup of dwords
//

struct spn_rasters_prefix_smem
{
  uint buf[SPN_PLACE_SUBGROUP_SIZE];
};

//
//
//

#if (SPN_PLACE_SUBGROUPS == 1)

shared spn_rasters_prefix_smem smem;

#define SPN_SMEM() smem

#else

shared spn_rasters_prefix_smem smem[SPN_PLACE_SUBGROUPS];

#define SPN_SMEM() smem[gl_SubgroupID]

#endif

//
//
//

void
spn_ttpk_translate_and_clip(SPN_SUBGROUP_UNIFORM const spn_cmd_place cmd,
                            inout uvec2                              ttpk,
                            inout uint                               lane_keys)
{
  // we know span is either 0 or [+1,+4095]
  const int span = SPN_TTXK_GET_SPAN(ttpk);

  // is this a pre-clip ttpk?
  bool is_ttpk = (span > 0);

  if (is_ttpk)
    {
      // this will wrap if negative
      const int y = int(SPN_TTXK_GET_Y(ttpk) - SPN_TTXK_TILE_Y_BIAS);

      is_ttpk = (y >= place_clip[1]) && (y < place_clip[3]);

      if (is_ttpk)
        {
          const int x  = int(SPN_TTXK_GET_X(ttpk) - SPN_TTXK_TILE_X_BIAS);
          const int x0 = max(place_clip[0], x);
          const int x1 = min(place_clip[2], x + span);

          is_ttpk = (x0 < x1);

          if (is_ttpk)
            {
              const uint clipped_span = x1 - x0;

              lane_keys += clipped_span;

              ttpk[1] = clipped_span;

              SPN_TTIK_SET_X(ttpk, x0);
              SPN_TTIK_SET_Y(ttpk, y);
            }
        }
    }

  // tag the ttik for fast eval
  const uint one_zero_ttpk =
    is_ttpk ? SPN_TTIK_LO_MASK_PREFIX_ZERO_TTPK_TRUE : SPN_TTIK_LO_MASK_PREFIX_ZERO_TTPK_FALSE;

  // update the one/zero/ttpk bits which implicitly updates the
  // prefix/escape bits
  ttpk[0] = SPN_BITFIELD_INSERT(ttpk[0],
                                one_zero_ttpk,
                                SPN_TTXK_LO_BITS_TTXB_ID,
                                SPN_TTIK_LO_BITS_PREFIX_ZERO_TTPK);
}

//
// There are TTSK keys but no TTPK keys.  There are potentially
// invalid keys as well.
//

void
spn_ttik_append(SPN_SUBGROUP_UNIFORM const spn_cmd_place cmd,
                inout uvec2                              ttik,
                inout SPN_SUBGROUP_UNIFORM uint          ttck_base)
{
  const bool is_ttpk = SPN_TTIK_IS_TTPK(ttik);

  // anything to do?
  if (!subgroupAny(is_ttpk))
    return;

  // get span for teach ttpk
  int span = 0;

  if (is_ttpk)
    {
      // get the TTIK span
      span = int(SPN_TTIK_GET_SPAN(ttik));

      // overwrite -- ttik is now a ttck
      SPN_TTCK_SET_LAYER(ttik, cmd.layer_id);
    }

  // scans
  int span_inc = subgroupInclusiveAdd(span);
  int span_exc = span_inc - span;

  // what is the total?
  SPN_SUBGROUP_UNIFORM uint span_max = subgroupBroadcast(span_inc, SPN_PLACE_SUBGROUP_SIZE - 1);

  // skip empty lanes
  if (span == 0)
    {
      span_inc = 0;
    }

  // expand ttpk keys to ttck keys
  uint ttck_idx = ttck_base + gl_SubgroupInvocationID;

  // increment to its final value
  ttck_base += span_max;

  while (true)
    {
      //
      // FIXME(allanmac): we can potentially accelerate this loop if
      // we determine that we are cooperatively processing a single
      // line that is a multiple of the subgroup size.  Propagating
      // the min span should provide all lanes enough information to
      // make this decision.
      //

      // zero
      SPN_SMEM().buf[gl_SubgroupInvocationID] = 0;

      // which lane's line is next?
      const bool is_src = (span_inc > 0) && (span_exc < SPN_PLACE_SUBGROUP_SIZE);

      // store the source lane at its starting lane
      if (is_src)
        {
          SPN_SMEM().buf[max(0, span_exc)] = gl_SubgroupInvocationID;
        }

      // read-after-write
      subgroupMemoryBarrierShared();

      // propagate lanes to right using max scan
      const uint src_iid  = SPN_SMEM().buf[gl_SubgroupInvocationID];
      const uint src_lane = subgroupInclusiveMax(src_iid);

      // shuffle in ttck
      uvec2 src_ttck = uvec2(subgroupShuffle(ttik[0], src_lane),   //
                             subgroupShuffle(ttik[1], src_lane));  //

      //
      // shuffle in src
      //
      // NOTE: highp = mediump - highp
      //
      const uint delta = gl_SubgroupInvocationID - subgroupShuffle(span_exc, src_lane);

      // adjust ttck.x
      SPN_TTCK_ADD_X(src_ttck, delta);

      if (gl_SubgroupInvocationID < span_max)
        {
          ttcks_keys[ttck_idx] = src_ttck;
        }

      // done?
      if (span_max <= SPN_PLACE_SUBGROUP_SIZE)
        break;

      span_inc -= SPN_PLACE_SUBGROUP_SIZE;
      span_exc -= SPN_PLACE_SUBGROUP_SIZE;
      span_max -= SPN_PLACE_SUBGROUP_SIZE;
      ttck_idx += SPN_PLACE_SUBGROUP_SIZE;
    }
}

//
//
//

void
main()
{
  //
  // Each subgroup is responsible for a command.
  //
  // Test the raster's translated bounds against the composition's tile clip
  //
  // There are 3 cases:
  //
  //   - the raster is completely clipped -> return
  //   - the raster is partially  clipped -> all keys must be clipped
  //   - the raster is not        clipped -> no keys are tested
  //
  // There are at least 4 implementations of place and we want to special-case
  // them as much as possible so that, at the least, the fastpath remains fast.
  //
  //  - implement CLIPPED + TILE     TRANSLATION
  //  - implement CLIPPED + PIXEL    TRANSLATION
  //  - implement CLIPPED + SUBPIXEL TRANSLATION
  //
  // FIXME(allanmac): split scan accumulator into a triple-bin 12:12:8 integer
  // where:
  //
  //  12: ttsk
  //  12: ttpk
  //   8: /dev/null -- clipped or invalid key
  //
  // Three kinds of nodes in a raster's list:
  //
  //  - the head node
  //  - internal nodes
  //  - the final node
  //
#if (SPN_PLACE_SUBGROUPS == 1)

  SPN_SUBGROUP_UNIFORM
  uint cmd_idx = gl_WorkGroupID.x;

#else

  SPN_SUBGROUP_UNIFORM
  uint cmd_idx = gl_WorkGroupID.x * SPN_PLACE_SUBGROUPS + gl_SubgroupID;

  if (cmd_idx >= place_span)
    return;

#endif

  // wrap to ring
  cmd_idx += place_head;

  if (cmd_idx >= place_size)
    cmd_idx -= place_size;

  // load the cmd
  SPN_SUBGROUP_UNIFORM const spn_cmd_place cmd = cmds[cmd_idx];

  // get the device id
  SPN_SUBGROUP_UNIFORM const uint head_id = bp_host_map[cmd.raster_h];

  // where is the raster node in the pool?
  const uint head_idx = head_id * SPN_BLOCK_POOL_SUBBLOCK_DWORDS + gl_SubgroupInvocationID;

  //
  // The layout of a raster node is optimized for reclamation:
  //
  //   union {
  //     uvec2  qwords[block_qwords];
  //     struct {
  //       uint dwords_lo[block_qwords];
  //       uint dwords_hi[block_qwords];
  //     };
  //   };
  //
  // This complicates the PREFIX and PLACE shaders.
  //

  //
  // static assert
  //
#if (SPN_RASTER_HEAD_LO_OFFSET_PKIDX >= 4)
#error "SPN_RASTER_HEAD_LO_OFFSET_PKIDX was expected to be < 4"
#endif

  //
  // load the first 4 dwords of the header -- this will run on all GPUs
  //
  uint header;

  if (gl_SubgroupInvocationID <= SPN_RASTER_HEAD_LO_OFFSET_PKIDX)
    {
      header = bp_blocks[head_idx];
    }

  //
  // pick out the ttpks count
  //
  SPN_SUBGROUP_UNIFORM uint ttpks_rem = subgroupBroadcast(header, SPN_RASTER_HEAD_LO_OFFSET_TTPKS);

  // anything to do?
  if (ttpks_rem == 0)
    return;

  // where are we in the first node of ttpk keys?
  SPN_SUBGROUP_UNIFORM uint ttpks_first =  //
    subgroupBroadcast(header, SPN_RASTER_HEAD_LO_OFFSET_PKIDX);

  // get block base, offset
  SPN_SUBGROUP_UNIFORM uint ttpks_first_base = ttpks_first & ~SPN_BLOCK_POOL_BLOCK_DWORDS_MASK;  //
  SPN_SUBGROUP_UNIFORM uint ttpks_first_off  = ttpks_first & SPN_BLOCK_POOL_BLOCK_DWORDS_MASK;   //

  // max possible remaining
  SPN_SUBGROUP_UNIFORM uint ttpks_span_max = SPN_BLOCK_POOL_BLOCK_QWORDS - ttpks_first_off;

  // clamp to how many we know are available in this block
  SPN_SUBGROUP_UNIFORM uint ttpks_span = min(ttpks_rem, ttpks_span_max);

  // adjust ttpks_rem now
  ttpks_rem -= min(ttpks_rem, ttpks_span_max - 1);

  //
  // load only valid ttpks
  //
  uint ttpks_idx  = ttpks_first_base + gl_SubgroupInvocationID;
  uint ttpks_base = gl_SubgroupInvocationID - ttpks_first_off;  // NOTE: highp = mediump - highp;

#undef SPN_EXPAND_X
#define SPN_EXPAND_X(I, N, P, L)                                                                   \
  uvec2 t##I = SPN_TTXK_INVALID;                                                                   \
  if (ttpks_base + SPN_PLACE_SUBGROUP_SIZE * I < ttpks_span)                                       \
    {                                                                                              \
      t##I =                                                                                       \
        uvec2(bp_blocks[ttpks_idx + SPN_PLACE_SUBGROUP_SIZE * I],                                  \
              bp_blocks[ttpks_idx + SPN_PLACE_SUBGROUP_SIZE * I + SPN_BLOCK_POOL_BLOCK_QWORDS]);   \
    }

  SPN_PLACE_BLOCK_EXPAND();

  {
    //
    // - translate and clip TTPK keys in the head
    // - count total clipped TTPK keys in this slab
    //
    uint f_lane_keys = 0;

#undef SPN_EXPAND_X
#define SPN_EXPAND_X(I, N, P, L) spn_ttpk_translate_and_clip(cmd, t##I, f_lane_keys);

    SPN_PLACE_BLOCK_EXPAND();

    //
    // atomically allocate space for keys in this node
    //
    SPN_SUBGROUP_UNIFORM const uint f_block_keys = subgroupAdd(f_lane_keys);
    uint                            f_ttck_atomic;

    if (gl_SubgroupInvocationID == 0)
      {
        f_ttck_atomic = atomicAdd(ttcks_count[0], f_block_keys);
      }

    SPN_SUBGROUP_UNIFORM uint f_ttck_base = subgroupBroadcast(f_ttck_atomic, 0);

    //
    // dump the keys
    //
#undef SPN_EXPAND_X
#define SPN_EXPAND_X(I, N, P, L) spn_ttik_append(cmd, t##I, f_ttck_base);

    SPN_PLACE_BLOCK_EXPAND();

    //
    // any more ttpk keys?
    //
    if (ttpks_rem == 0)
      return;
  }

  //
  // otherwise, process nodes we know are all ttpk keys
  //
  while (true)
    {
      //
      // jump to next node
      //
      SPN_SUBGROUP_UNIFORM const uint node_id =
        subgroupBroadcast(SPN_GLSL_CONCAT(t, SPN_PLACE_BLOCK_EXPAND_I_LAST)[0],
                          SPN_PLACE_SUBGROUP_SIZE - 1);

      const uint node_idx = node_id * SPN_BLOCK_POOL_SUBBLOCK_DWORDS + gl_SubgroupInvocationID;

      //
      // load node block
      //
#undef SPN_EXPAND_X
#define SPN_EXPAND_X(I, N, P, L)                                                                   \
  t##I = SPN_TTXK_INVALID;                                                                         \
  if (gl_SubgroupInvocationID + I * SPN_PLACE_SUBGROUP_SIZE < ttpks_rem)                           \
    {                                                                                              \
      t##I =                                                                                       \
        uvec2(bp_blocks[node_idx + SPN_PLACE_SUBGROUP_SIZE * I],                                   \
              bp_blocks[node_idx + SPN_PLACE_SUBGROUP_SIZE * I + SPN_BLOCK_POOL_BLOCK_QWORDS]);    \
    }

      SPN_PLACE_BLOCK_EXPAND();

      //
      // - translate and clip TTPK keys in the node
      // - count total clipped TTPK keys in this slab
      //
      uint n_lane_keys = 0;

#undef SPN_EXPAND_X
#define SPN_EXPAND_X(I, N, P, L) spn_ttpk_translate_and_clip(cmd, t##I, n_lane_keys);

      SPN_PLACE_BLOCK_EXPAND();

      //
      // atomically allocate space for keys in this node
      //
      SPN_SUBGROUP_UNIFORM const uint n_block_keys = subgroupAdd(n_lane_keys);
      uint                            n_ttck_atomic;

      if (gl_SubgroupInvocationID == 0)
        {
          n_ttck_atomic = atomicAdd(ttcks_count[0], n_block_keys);
        }

      SPN_SUBGROUP_UNIFORM uint n_ttck_base = subgroupBroadcast(n_ttck_atomic, 0);

      //
      // dump the keys
      //
#undef SPN_EXPAND_X
#define SPN_EXPAND_X(I, N, P, L) spn_ttik_append(cmd, t##I, n_ttck_base);

      SPN_PLACE_BLOCK_EXPAND();

      //
      // any more ttpk keys?
      //
      if (ttpks_rem <= SPN_BLOCK_POOL_BLOCK_QWORDS - 1)
        return;

      //
      // otherwise, keep processing
      //
      ttpks_rem -= SPN_BLOCK_POOL_BLOCK_QWORDS - 1;
    }
}

//
//
//
