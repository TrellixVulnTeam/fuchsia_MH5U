// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SRC_LIB_FASYNC_INCLUDE_LIB_FASYNC_INTERNAL_COMPILER_H_
#define SRC_LIB_FASYNC_INCLUDE_LIB_FASYNC_INTERNAL_COMPILER_H_

#define LIB_FASYNC_CPP20_VERSION 202002L
#define LIB_FASYNC_CPP17_VERSION 201703L
#define LIB_FASYNC_CPP14_VERSION 201402L
#define LIB_FASYNC_CPP11_VERSION 201103L
#define LIB_FASYNC_CPP98_VERSION 199711L

#define LIB_FASYNC_STANDARD_VERSION(standard) LIB_FASYNC_CPP##standard##_VERSION

#define LIB_FASYNC_CPP_STANDARD_SUPPORTED(standard) \
  (__cplusplus >= LIB_FASYNC_STANDARD_VERSION(standard))

#define LIB_FASYNC_CPP20_SUPPORTED LIB_FASYNC_CPP_STANDARD_SUPPORTED(20)
#define LIB_FASYNC_CPP17_SUPPORTED LIB_FASYNC_CPP_STANDARD_SUPPORTED(17)
#define LIB_FASYNC_CPP14_SUPPORTED LIB_FASYNC_CPP_STANDARD_SUPPORTED(14)

// This is so we only have one of these defined at a time for #elif logic.
// Variable-type macros that are undefined in an #if evaluate to 0
#if LIB_FASYNC_CPP20_SUPPORTED
#define LIB_FASYNC_CPP20 1
#elif LIB_FASYNC_CPP17_SUPPORTED
#define LIB_FASYNC_CPP17 1
#elif LIB_FASYNC_CPP14_SUPPORTED
#define LIB_FASYNC_CPP14 1
#endif

static_assert(LIB_FASYNC_CPP14_SUPPORTED, "C++14 is required for fitx.");

// Language features
#define LIB_FASYNC_inline_variables_VERSION 201606L
#define LIB_FASYNC_deduction_guides_VERSION 201703L
#define LIB_FASYNC_consteval_VERSION 201811L
#define LIB_FASYNC_concepts_VERSION 201907L

// Attributes
#define LIB_FASYNC_noreturn_VERSION 200809L
#define LIB_FASYNC_deprecated_VERSION 201309L
#define LIB_FASYNC_fallthrough_VERSION 201603L
#define LIB_FASYNC_nodiscard_VERSION 201603L
#define LIB_FASYNC_maybe_unused_VERSION 201603L
#define LIB_FASYNC_likely_VERSION 201803L
#define LIB_FASYNC_unlikely_VERSION 201803L
#define LIB_FASYNC_no_unique_address_VERSION 201803L

#define LIB_FASYNC_PRAGMA_COMPILER GCC

#define LIB_FASYNC_DIAGNOSTIC_LEVEL_ERROR error
#define LIB_FASYNC_DIAGNOSTIC_LEVEL_WARNING warning
#define LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED ignored
#define LIB_FASYNC_DIAGNOSTIC_LEVEL_FATAL fatal

#define LIB_FASYNC_STRINGIFY(X) #X
#define LIB_FASYNC_STRINGIFY_EXPANDED(X) LIB_FASYNC_STRINGIFY(X)

#define LIB_FASYNC_PRAGMA(arg) _Pragma(LIB_FASYNC_STRINGIFY(arg))

#define LIB_FASYNC_PRAGMA_MESSAGE(msg) LIB_FASYNC_PRAGMA(message(msg))

#define LIB_FASYNC_CPP_FEATURE_MACRO(feature) __cpp_##feature

// TODO(schottm): needed for feature testing macros?
#define LIB_FASYNC_IS_DEFINED(macro) LIB_FASYNC_IS_DEFINED_EXPANDED(macro)
#define LIB_FASYNC_IS_DEFINED_EXPANDED(macro) \
  (#macro[0] == '\0' || (#macro[0] >= '0' && #macro[0] <= '9'))

#define LIB_FASYNC_CPP_FEATURE_VERSION(feature) LIB_FASYNC_##feature##_VERSION

#define LIB_FASYNC_CPP_ATTRIBUTE_VERSION(feature) LIB_FASYNC_CPP_FEATURE_VERSION(feature)

// TODO(schottm): make this work with actual feature testing macros
#define LIB_FASYNC_HAS_CPP_FEATURE(feature) (__cplusplus >= LIB_FASYNC_CPP_FEATURE_VERSION(feature))
#define LIB_FASYNC_HAS_CPP_LIBRARY_FEATURE(feature) LIB_FASYNC_HAS_CPP_FEATURE(lib_##feature)

#ifdef __has_attribute
#define LIB_FASYNC_HAS_ATTRIBUTE(attribute) __has_attribute(attribute)
#else
#define LIB_FASYNC_HAS_ATTRIBUTE(attribute) 0
#endif

#ifdef __has_builtin
#define LIB_FASYNC_HAS_BUILTIN(builtin) __has_builtin(__builtin_##builtin)
#else
#define LIB_FASYNC_HAS_BUILTIN(builtin) 0
#endif

#ifdef __has_cpp_attribute
#define LIB_FASYNC_HAS_CPP_ATTRIBUTE(attribute) \
  (__has_cpp_attribute(attribute) >= LIB_FASYNC_CPP_ATTRIBUTE_VERSION(attribute))
#define LIB_FASYNC_HAS_CUSTOM_ATTRIBUTE(attribute) (__has_cpp_attribute(attribute))
#else
#define LIB_FASYNC_HAS_CPP_ATTRIBUTE(attribute) 0
#define LIB_FASYNC_HAS_CUSTOM_ATTRIBUTE(attribute) 0
#endif

#define LIB_FASYNC_CANONICALIZE_VERSION(MAJOR, MINOR, PATCH) ((MAJOR)*10000 + (MINOR)*100 + (PATCH))
#define LIB_FASYNC_CLANG_VERSION \
  LIB_FASYNC_CANONICALIZE_VERSION(__clang_major__, __clang_minor__, __clang_patchlevel__)
#define LIB_FASYNC_GCC_VERSION \
  LIB_FASYNC_CANONICALIZE_VERSION(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)
#define LIB_FASYNC_COMPILER_VERSION_MEETS_REQUIREMENT(COMPILER, VERSION) \
  (LIB_FASYNC_##COMPILER##_VERSION >= VERSION)
#define LIB_FASYNC_COMPILER_VERSION_MEETS_MINIMUM(COMPILER, MAJOR, MINOR, PATCH) \
  LIB_FASYNC_COMPILER_VERSION_MEETS_REQUIREMENT(                                 \
      COMPILER, LIB_FASYNC_CANONICALIZE_VERSION(MAJOR, MINOR, PATCH))
#define LIB_FASYNC_CLANG_VERSION_MEETS_REQUIREMENT(VERSION) \
  LIB_FASYNC_COMPILER_VERSION_MEETS_REQUIREMENT(CLANG, VERSION)
#define LIB_FASYNC_CLANG_VERSION_MEETS_MINIMUM(MAJOR, MINOR, PATCH) \
  LIB_FASYNC_COMPILER_VERSION_MEETS_MINIMUM(CLANG, MAJOR, MINOR, PATCH)
#define LIB_FASYNC_GCC_VERSION_MEETS_REQUIREMENT(VERSION) \
  LIB_FASYNC_COMPILER_VERSION_MEETS_REQUIREMENT(GCC, VERSION)
#define LIB_FASYNC_GCC_VERSION_MEETS_MINIMUM(MAJOR, MINOR, PATCH) \
  LIB_FASYNC_COMPILER_VERSION_MEETS_MINIMUM(GCC, MAJOR, MINOR, PATCH)

// For the record, clang 3.4.0 and GCC 4.9.0 were the first versions to support C++1y
// https://godbolt.org/z/K5Mnvh8Y6
// But they officially say stable C++14 support came in 6.1
// https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2014

#ifndef LIB_FASYNC_NO_PRAGMA_DIAGNOSTIC
#define LIB_FASYNC_PRAGMA_DIAGNOSTIC(ARG) \
  LIB_FASYNC_PRAGMA(LIB_FASYNC_PRAGMA_COMPILER diagnostic ARG)
#else
#define LIB_FASYNC_PRAGMA_DIAGNOSTIC(ARG)
#endif

// TODO(schottm): add namespaced push/pop
#define LIB_FASYNC_DIAGNOSTIC_PUSH LIB_FASYNC_PRAGMA_DIAGNOSTIC(push)
#define LIB_FASYNC_DIAGNOSTIC_POP LIB_FASYNC_PRAGMA_DIAGNOSTIC(pop)
#define LIB_FASYNC_DIAGNOSTIC(LEVEL, FLAG) LIB_FASYNC_PRAGMA_DIAGNOSTIC(LEVEL FLAG)

#define LIB_FASYNC_DIAGNOSTIC_ERROR(FLAG) \
  LIB_FASYNC_PRAGMA_DIAGNOSTIC(LIB_FASYNC_DIAGNOSTIC_LEVEL_ERROR FLAG)
#define LIB_FASYNC_DIAGNOSTIC_WARNING(FLAG) \
  LIB_FASYNC_PRAGMA_DIAGNOSTIC(LIB_FASYNC_DIAGNOSTIC_LEVEL_WARNING FLAG)
#define LIB_FASYNC_DIAGNOSTIC_IGNORED(FLAG) \
  LIB_FASYNC_PRAGMA_DIAGNOSTIC(LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED FLAG)
#define LIB_FASYNC_DIAGNOSTIC_FATAL(FLAG) \
  LIB_FASYNC_PRAGMA_DIAGNOSTIC(LIB_FASYNC_DIAGNOSTIC_LEVEL_FATAL FLAG)

#ifndef LIB_FASYNC_DIAGNOSTIC_LEVEL
#define LIB_FASYNC_DIAGNOSTIC_LEVEL LIB_FASYNC_DIAGNOSTIC_LEVEL_ERROR
#endif

#ifndef LIB_FASYNC_COMPAT_DIAGNOSTIC_LEVEL
#define LIB_FASYNC_COMPAT_DIAGNOSTIC_LEVEL LIB_FASYNC_DIAGNOSTIC_LEVEL
#endif

#ifndef LIB_FASYNC_IGNORE_CPP14_COMPAT
#define LIB_FASYNC_CPP14_COMPAT
#define LIB_STDCOMPAT_NO_INLINE_VARIABLES
#endif

#ifndef LIB_FASYNC_IGNORE_CPP17_COMPAT
#define LIB_FASYNC_CPP17_COMPAT
#endif

#ifndef LIB_FASYNC_IGNORE_CPP20_COMPAT
#define LIB_FASYNC_CPP20_COMPAT
#endif

#ifndef LIB_FASYNC_CPP14_COMPAT_DIAGNOSTIC_LEVEL
#ifdef LIB_FASYNC_CPP14_COMPAT
#define LIB_FASYNC_CPP14_COMPAT_DIAGNOSTIC_LEVEL LIB_FASYNC_COMPAT_DIAGNOSTIC_LEVEL
#else
#define LIB_FASYNC_CPP14_COMPAT_DIAGNOSTIC_LEVEL LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED
#endif
#endif

#ifndef LIB_FASYNC_CPP17_COMPAT_DIAGNOSTIC_LEVEL
#ifdef LIB_FASYNC_CPP17_COMPAT
#define LIB_FASYNC_CPP17_COMPAT_DIAGNOSTIC_LEVEL LIB_FASYNC_COMPAT_DIAGNOSTIC_LEVEL
#else
#define LIB_FASYNC_CPP17_COMPAT_DIAGNOSTIC_LEVEL LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED
#endif
#endif

// Users who ignore C++20 will probably still care about 14 and/or 17
#ifndef LIB_FASYNC_CPP20_COMPAT_DIAGNOSTIC_LEVEL
#ifdef LIB_FASYNC_CPP20_COMPAT
#define LIB_FASYNC_CPP20_COMPAT_DIAGNOSTIC_LEVEL LIB_FASYNC_COMPAT_DIAGNOSTIC_LEVEL
#else
#define LIB_FASYNC_CPP20_COMPAT_DIAGNOSTIC_LEVEL LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED
#endif
#endif

#define LIB_FASYNC_IGNORED_ATTRIBUTES_FLAG "-Wignored-attributes"
#define LIB_FASYNC_UNKNOWN_ATTRIBUTES_FLAG "-Wunknown-attributes"
#define LIB_FASYNC_IGNORED_PRAGMAS_FLAG "-Wignored-pragmas"
#define LIB_FASYNC_UNKNOWN_PRAGMAS_FLAG "-Wunknown-pragmas"
#define LIB_FASYNC_UNKNOWN_WARNING_OPTION_FLAG "-Wunknown-warning-option"

#define LIB_FASYNC_DEFAULT_DIAGNOSTICS                            \
  LIB_FASYNC_DIAGNOSTIC_ERROR(LIB_FASYNC_IGNORED_ATTRIBUTES_FLAG) \
  LIB_FASYNC_DIAGNOSTIC_ERROR(LIB_FASYNC_UNKNOWN_ATTRIBUTES_FLAG) \
  LIB_FASYNC_DIAGNOSTIC_ERROR(LIB_FASYNC_IGNORED_PRAGMAS_FLAG)    \
  LIB_FASYNC_DIAGNOSTIC_ERROR(LIB_FASYNC_UNKNOWN_PRAGMAS_FLAG)    \
  LIB_FASYNC_DIAGNOSTIC_ERROR(LIB_FASYNC_UNKNOWN_WARNING_OPTION_FLAG)

#define LIB_FASYNC_DIAGNOSTIC_BEGIN(...) \
  LIB_FASYNC_DIAGNOSTIC_PUSH             \
  LIB_FASYNC_DEFAULT_DIAGNOSTICS         \
  __VA_ARGS__

#define LIB_FASYNC_DIAGNOSTIC_END LIB_FASYNC_DIAGNOSTIC_POP

#define LIB_FASYNC_DIAGNOSTIC_BEGIN_LEVEL(LEVEL, FLAG) \
  LIB_FASYNC_DIAGNOSTIC_BEGIN(LIB_FASYNC_DIAGNOSTIC(LEVEL, FLAG))
#define LIB_FASYNC_DIAGNOSTIC_END_LEVEL(LEVEL, FLAG) LIB_FASYNC_DIAGNOSTIC_END

// TODO(schottm): use __has_warning to check if the -pedantic flags are supported
#if defined(__clang__) && !defined(LIB_FASYNC_NO_COMPAT_PEDANTIC)
#define LIB_FASYNC_COMPAT_FLAG_SUFFIX_ -pedantic
#else
#define LIB_FASYNC_COMPAT_FLAG_SUFFIX_
#endif

#define LIB_FASYNC_CPP_COMPAT_FLAG(VERSION) \
  "-Wc++" #VERSION "-compat" LIB_FASYNC_STRINGIFY_EXPANDED(LIB_FASYNC_COMPAT_FLAG_SUFFIX_)

#define LIB_FASYNC_CPP14_COMPAT_FLAG LIB_FASYNC_CPP_COMPAT_FLAG(14)
#define LIB_FASYNC_CPP17_COMPAT_FLAG LIB_FASYNC_CPP_COMPAT_FLAG(17)
#define LIB_FASYNC_CPP20_COMPAT_FLAG LIB_FASYNC_CPP_COMPAT_FLAG(20)

#define LIB_FASYNC_CPP14_COMPAT_BEGIN_LEVEL(LEVEL) \
  LIB_FASYNC_DIAGNOSTIC_BEGIN_LEVEL(LEVEL, LIB_FASYNC_CPP14_COMPAT_FLAG)
#define LIB_FASYNC_CPP17_COMPAT_BEGIN_LEVEL(LEVEL) \
  LIB_FASYNC_DIAGNOSTIC_BEGIN_LEVEL(LEVEL, LIB_FASYNC_CPP17_COMPAT_FLAG)
#define LIB_FASYNC_CPP20_COMPAT_BEGIN_LEVEL(LEVEL) \
  LIB_FASYNC_DIAGNOSTIC_BEGIN_LEVEL(LEVEL, LIB_FASYNC_CPP20_COMPAT_FLAG)

#define LIB_FASYNC_CPP14_COMPAT_END_LEVEL(LEVEL) \
  LIB_FASYNC_DIAGNOSTIC_END_LEVEL(LEVEL, LIB_FASYNC_CPP14_COMPAT_FLAG)
#define LIB_FASYNC_CPP17_COMPAT_END_LEVEL(LEVEL) \
  LIB_FASYNC_DIAGNOSTIC_END_LEVEL(LEVEL, LIB_FASYNC_CPP17_COMPAT_FLAG)
#define LIB_FASYNC_CPP20_COMPAT_END_LEVEL(LEVEL) \
  LIB_FASYNC_DIAGNOSTIC_END_LEVEL(LEVEL, LIB_FASYNC_CPP20_COMPAT_FLAG)

#define LIB_FASYNC_CPP14_COMPAT_BEGIN \
  LIB_FASYNC_CPP14_COMPAT_BEGIN_LEVEL(LIB_FASYNC_CPP14_COMPAT_DIAGNOSTIC_LEVEL)
#define LIB_FASYNC_CPP17_COMPAT_BEGIN \
  LIB_FASYNC_CPP17_COMPAT_BEGIN_LEVEL(LIB_FASYNC_CPP17_COMPAT_DIAGNOSTIC_LEVEL)
#define LIB_FASYNC_CPP20_COMPAT_BEGIN \
  LIB_FASYNC_CPP20_COMPAT_BEGIN_LEVEL(LIB_FASYNC_CPP20_COMPAT_DIAGNOSTIC_LEVEL)

#define LIB_FASYNC_CPP14_COMPAT_END \
  LIB_FASYNC_CPP14_COMPAT_END_LEVEL(LIB_FASYNC_CPP14_COMPAT_DIAGNOSTIC_LEVEL)
#define LIB_FASYNC_CPP17_COMPAT_END \
  LIB_FASYNC_CPP17_COMPAT_END_LEVEL(LIB_FASYNC_CPP17_COMPAT_DIAGNOSTIC_LEVEL)
#define LIB_FASYNC_CPP20_COMPAT_END \
  LIB_FASYNC_CPP20_COMPAT_END_LEVEL(LIB_FASYNC_CPP20_COMPAT_DIAGNOSTIC_LEVEL)

#define LIB_FASYNC_IGNORE_CPP14_COMPAT_BEGIN \
  LIB_FASYNC_CPP14_COMPAT_BEGIN_LEVEL(LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED)
#define LIB_FASYNC_IGNORE_CPP17_COMPAT_BEGIN \
  LIB_FASYNC_CPP17_COMPAT_BEGIN_LEVEL(LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED)
#define LIB_FASYNC_IGNORE_CPP20_COMPAT_BEGIN \
  LIB_FASYNC_CPP20_COMPAT_BEGIN_LEVEL(LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED)

#define LIB_FASYNC_IGNORE_CPP14_COMPAT_END \
  LIB_FASYNC_CPP14_COMPAT_END_LEVEL(LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED)
#define LIB_FASYNC_IGNORE_CPP17_COMPAT_END \
  LIB_FASYNC_CPP17_COMPAT_END_LEVEL(LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED)
#define LIB_FASYNC_IGNORE_CPP20_COMPAT_END \
  LIB_FASYNC_CPP20_COMPAT_END_LEVEL(LIB_FASYNC_DIAGNOSTIC_LEVEL_IGNORED)

#define LIB_FASYNC_WITH_DIAGNOSTICS(CODE, ...) \
  LIB_FASYNC_DIAGNOSTIC_BEGIN(__VA_ARGS__)     \
  CODE LIB_FASYNC_DIAGNOSTIC_END(__VA_ARGS__)

#define LIB_FASYNC_WITH_DIAGNOSTIC(LEVEL, FLAG, ...) \
  LIB_FASYNC_WITH_DIAGNOSTICS(__VA_ARGS__, LIB_FASYNC_DIAGNOSTIC(LEVEL, FLAG))

#define LIB_FASYNC_CPP_VERSION_COMPAT_BEGIN \
  LIB_FASYNC_CPP14_COMPAT_BEGIN             \
  LIB_FASYNC_CPP17_COMPAT_BEGIN             \
  LIB_FASYNC_CPP20_COMPAT_BEGIN

#define LIB_FASYNC_CPP_VERSION_COMPAT_END \
  LIB_FASYNC_CPP20_COMPAT_END             \
  LIB_FASYNC_CPP17_COMPAT_END             \
  LIB_FASYNC_CPP14_COMPAT_END

// Note: there is no macro for [[noreturn]] and [[deprecated]] here since they are already in
// C++11/14 and so may be used freely. However we do still test for them.
static_assert(LIB_FASYNC_HAS_CPP_ATTRIBUTE(noreturn),
              "Conforming C++11 compilers should support [[noreturn]].");
static_assert(LIB_FASYNC_HAS_CPP_ATTRIBUTE(deprecated),
              "Conforming C++14 compilers should support [[deprecated]].");

#if LIB_FASYNC_HAS_ATTRIBUTE(pure)
#define LIB_FASYNC_PURE __attribute__((pure))
#else
#define LIB_FASYNC_PURE  // nothing
#endif

// |const| and |pure| can be used when we know a function gives the same output for equivalent
// inputs,  but it can't be constexpr. |pure| functions can write to memory (e.g. through a
// reference  parameter); |const| functions cannot.
#if LIB_FASYNC_HAS_ATTRIBUTE(const)
#define LIB_FASYNC_CONST __attribute__((const))
#else
#define LIB_FASYNC_CONST  // nothing
#endif

// Annotate a class or function with C++17's [[nodiscard]] or similar where supported by the
// compiler.
//
// C++14 doesn't support [[nodiscard]], but Clang allows __attribute__((warn_unused_result))
// to be placed on class declarations. GCC only allows the attribute to be used on methods.
#if LIB_FASYNC_HAS_CPP_ATTRIBUTE(nodiscard) && !defined(LIB_FASYNC_CPP14_COMPAT)
#define LIB_FASYNC_NODISCARD [[nodiscard]]
#elif LIB_FASYNC_HAS_ATTRIBUTE(warn_unused_result) && \
    defined(__clang__)  // GCC's equivalent is too strict
#define LIB_FASYNC_NODISCARD __attribute__((warn_unused_result))
#else
#define LIB_FASYNC_NODISCARD  // nothing
#endif

#if LIB_FASYNC_HAS_CPP_ATTRIBUTE(maybe_unused) && !defined(LIB_FASYNC_CPP14_COMPAT)
#define LIB_FASYNC_MAYBE_UNUSED [[maybe_unused]]
#elif LIB_FASYNC_HAS_ATTRIBUTE(unused)
#define LIB_FASYNC_MAYBE_UNUSED __attribute__((unused))
#else
#define LIB_FASYNC_MAYBE_UNUSED  // nothing
#endif

#if LIB_FASYNC_HAS_CPP_ATTRIBUTE(fallthrough) && !defined(LIB_FASYNC_CPP14_COMPAT)
#define LIB_FASYNC_FALLTHROUGH [[fallthrough]]
#elif LIB_FASYNC_HAS_ATTRIBUTE(fallthrough)
#define LIB_FASYNC_FALLTHROUGH __attribute__((fallthrough))
#else
#define LIB_FASYNC_FALLTHROUGH  // nothing
#endif

#if LIB_FASYNC_HAS_CPP_FEATURE(inline_variables) && !defined(LIB_FASYNC_CPP14_COMPAT)
#define LIB_FASYNC_INLINE_CONSTANT inline
#else
#define LIB_FASYNC_INLINE_CONSTANT  // nothing
#endif

// There is __builtin_expect that could be used for compatibility but it has different syntax.
#if LIB_FASYNC_HAS_CPP_ATTRIBUTE(likely) && !defined(LIB_FASYNC_CPP17_COMPAT)
#define LIB_FASYNC_LIKELY [[likely]]
#else
#define LIB_FASYNC_LIKELY  // nothing
#endif

#if LIB_FASYNC_HAS_CPP_ATTRIBUTE(unlikely) && !defined(LIB_FASYNC_CPP17_COMPAT)
#define LIB_FASYNC_UNLIKELY [[unlikely]]
#else
#define LIB_FASYNC_UNLIKELY  // nothing
#endif

#if LIB_FASYNC_HAS_CPP_FEATURE(consteval) && !defined(LIB_FASYNC_CPP17_COMPAT)
#define LIB_FASYNC_CONSTEVAL consteval
#else
#define LIB_FASYNC_CONSTEVAL constexpr
#endif

#if LIB_FASYNC_HAS_CPP_ATTRIBUTE(no_unique_address) && !defined(LIB_FASYNC_CPP17_COMPAT)
#define LIB_FASYNC_NO_UNIQUE_ADDRESS [[no_unique_address]]
#else
#define LIB_FASYNC_NO_UNIQUE_ADDRESS  // nothing
#endif

#if LIB_FASYNC_HAS_CUSTOM_ATTRIBUTE(gsl::Owner)
#define LIB_FASYNC_OWNER [[gsl::Owner]]
#define LIB_FASYNC_OWNER_OF(T) [[gsl::Owner(T)]]
#else
#define LIB_FASYNC_OWNER     // nothing
#define LIB_FASYNC_OWNER_OF  // nothing
#endif

#if LIB_FASYNC_HAS_CUSTOM_ATTRIBUTE(gsl::Pointer)
#define LIB_FASYNC_POINTER [[gsl::Pointer]]
#define LIB_FASYNC_POINTER_TO(T) [[gsl::Pointer(T)]]
#else
#define LIB_FASYNC_POINTER     // nothing
#define LIB_FASYNC_POINTER_TO  // nothing
#endif

#endif  // SRC_LIB_FASYNC_INCLUDE_LIB_FASYNC_INTERNAL_COMPILER_H_
