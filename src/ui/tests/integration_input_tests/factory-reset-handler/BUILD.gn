# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/config.gni")
import("//build/rust/rustc_test.gni")

group("tests") {
  testonly = true
  deps = [
    ":factory-reset-handler-test",

    # The deps below are necessary on minimal product configs.
    "//src/graphics/bin/vulkan_loader",
  ]
}

rustc_test("factory_reset_handler_test") {
  edition = "2018"

  deps = [
    "//sdk/fidl/fuchsia.cobalt:fuchsia.cobalt-rustc",
    "//sdk/fidl/fuchsia.component.test:fuchsia.component.test-rustc",
    "//sdk/fidl/fuchsia.hardware.display:fuchsia.hardware.display-rustc",
    "//sdk/fidl/fuchsia.input.injection:fuchsia.input.injection-rustc",
    "//sdk/fidl/fuchsia.logger:fuchsia.logger-rustc",
    "//sdk/fidl/fuchsia.media.sounds:fuchsia.media.sounds-rustc",
    "//sdk/fidl/fuchsia.recovery:fuchsia.recovery-rustc",
    "//sdk/fidl/fuchsia.scheduler:fuchsia.scheduler-rustc",
    "//sdk/fidl/fuchsia.sysmem:fuchsia.sysmem-rustc",
    "//sdk/fidl/fuchsia.tracing.provider:fuchsia.tracing.provider-rustc",
    "//sdk/fidl/fuchsia.ui.pointerinjector:fuchsia.ui.pointerinjector-rustc",
    "//sdk/fidl/fuchsia.ui.pointerinjector.configuration:fuchsia.ui.pointerinjector.configuration-rustc",
    "//sdk/fidl/fuchsia.ui.scenic:fuchsia.ui.scenic-rustc",
    "//sdk/fidl/fuchsia.vulkan.loader:fuchsia.vulkan.loader-rustc",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/fuchsia-component-test",
    "//src/lib/syslog/rust:syslog",
    "//src/lib/ui/fuchsia-scenic",
    "//src/lib/ui/input-synthesis",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:async-trait",
    "//third_party/rust_crates:futures",
  ]

  sources = [
    "src/lib.rs",
    "src/main.rs",
    "src/mocks/factory_reset_mock.rs",
    "src/mocks/mod.rs",
    "src/mocks/pointer_injector_mock.rs",
    "src/mocks/sound_player_mock.rs",
    "src/packaged_component.rs",
    "src/traits/mod.rs",
    "src/traits/realm_builder_ext.rs",
    "src/traits/test_realm_component.rs",
  ]
}

config_data("factory-reset-handler-test-config") {
  for_pkg = "factory-reset-handler-test"

  sources = [
    # This is an empty file required for the FactoryResetHandler to load.
    "data/chirp-start-tone.wav",

    # Tells input pipeline to ignore real devices; avoids logging
    # the "Input pipeline is unable to watch the input report directory"
    # error.
    "data/ignore_real_devices",
  ]
}

fuchsia_component("factory-reset-handler-test-component") {
  testonly = true
  component_name = "factory_reset_handler_test"
  manifest = "meta/factory-reset-handler-test.cml"
  deps = [ ":factory_reset_handler_test" ]
}

fuchsia_test_package("factory-reset-handler-test") {
  package_deps_for_infra_only = [ "//garnet/bin/trace_manager:trace_manager" ]
  test_components = [ ":factory-reset-handler-test-component" ]
  deps = [
    ":factory-reset-handler-test-config",
    "//src/cobalt/bin/testing/mock_cobalt:component_v2",
    "//src/ui/bin/hardware_display_controller_provider:fake-hardware-display-controller-provider-cmv2-component",
    "//src/ui/bin/input-pipeline:component-for-test",
    "//src/ui/tests/integration_input_tests:scenic-test-realm",
  ]
  test_specs = {
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}
