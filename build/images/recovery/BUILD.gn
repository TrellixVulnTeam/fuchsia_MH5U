# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/images/assemble_system.gni")
import("//build/images/vboot/vboot.gni")
import("//build/images/zedboot/zedboot_args.gni")
import("//build/testing/host_test_data.gni")
import("//src/sys/core/build/core.gni")
import("//src/sys/root/build/root.gni")

# Parameters shared between recovery-eng and recovery-installer
recovery_base = {
  testonly = true
  generate_fvm = !bootfs_only

  # We avoid compressing blobs in the blobfs image so that they can be more
  # effectively compressed by the ZBI compressor that is tuned to zstd max.
  if (generate_fvm) {
    assembly_compress_blobs = false
  }
  ramdisk_fvm_in_zbi = true

  include_component_id_index = true
  devmgr_config = [ "virtcon.disable=true" ] + zedboot_devmgr_config
  cmdline = [
    "console.shell=true",
    "netsvc.disable=false",
    "kernel.enable-debugging-syscalls=true",
    "kernel.enable-serial-syscalls=true",
  ]

  bootfs_labels = [
    ":root",
    "//build/info:bootfs",
    "//build/input:recovery_bootfs",
    "//bundles:bootstrap",
    "//bundles:debugging",
    "//bundles/bringup:manual_testing",
    "//bundles/drivers:bootstrap",
    "//bundles/drivers:usb-host-stack",
    "//bundles/drivers:usb-peripheral-stack",
    "//bundles/drivers:utils",
  ]
  bootfs_labels +=
      [ "//src/sys/component_manager:component_manager_bootfs_config" ]

  if (custom_signing_script != "") {
    zbi_signing_script = custom_signing_script
    deps = custom_signing_script_deps
  } else if (use_vboot) {
    zbi_signing_script = vboot_action.script
    zbi_signing_args = vboot_action.args
    deps = vboot_action.deps
  }
}

group("recovery") {
  testonly = true
  public_deps = [
    ":recovery-eng",
    ":recovery-fdr",
    ":recovery-installer",
  ]
}

core_name = "core-recovery"

core_realm("core") {
  package_name = core_name
  restrict_persistent_storage = false
  deps = [
    "//src/connectivity/wlan/wlancfg:wlancfg-core-shard",
    "//src/connectivity/wlan/wlandevicemonitor:wlandevicemonitor-core-shard",
    "//src/connectivity/wlan/wlanstack:wlanstack-legacy-privacy-core-shard",
    "//src/recovery/factory_reset:factory_reset_core_shard",
  ]
}

root_realm("root") {
  core_package_name = core_name
}

recovery_packages = [
  ":core",
  "//build/info:build-info",
  "//garnet/bin/sysmgr",
  "//src/connectivity/location/regulatory_region:regulatory_region",
  "//src/connectivity/management:network_config_default",
  "//src/connectivity/network",
  "//src/connectivity/wlan/wlancfg",
  "//src/connectivity/wlan/wlandevicemonitor",
  "//src/connectivity/wlan/wlanstack",
  "//src/devices/sysmem/bin/sysmem_connector",
  "//src/recovery/system:system_recovery",
  "//src/recovery/system:config",
  "//src/security/root_ssl_certificates",
  "//src/sys/appmgr",
  "//src/sys/appmgr:appmgr_scheme_config",
  "//src/sys/appmgr:component_id_index_no_restrict_storage",
  "//src/sys/pkg:recovery",
  "//src/sys/stash:pkg",
  "//src/sys/time:recovery",
]

recovery_system_image_deps = [ "//garnet/packages/prod:broadcom" ]

recovery_eng_packages =
    recovery_packages + [
      # So components can be launched:
      "//src/sys/tools/run",

      # Use eng allowlists:
      "//src/security/policy:appmgr_policy_eng",

      # Allow recovery to be discoverable via mDNS:
      "//src/connectivity/network/mdns/bundles:services",
      "//src/connectivity/network/mdns/service:mdns_fuchsia_udp_config",

      # Enable SSH (for engineering builds):
      "//garnet/bin/sshd-host",
      "//garnet/bin/sshd-host:config",
      "//src/sys/sysmgr:sshd_host_config",

      # Basic command-line tools:
      "//garnet/packages/prod:sbase",
      "//src/diagnostics/log_listener:log_listener_shell",

      # Command-line interface to wlan stack:
      "//src/connectivity/wlan/wlancfg/tool:donut",

      # Device side of zxdb & fidlcat:
      "//src/developer/debug/debug_agent",

      # The SWD stack for OTAs.
      "//src/sys/pkg/lib/isolated-swd:isolated-swd-components",
    ]

recovery_installer_packages =
    recovery_eng_packages - [
      "//src/recovery/system:system_recovery",
      "//src/recovery/system:config",
    ] +
    [
      "//src/recovery/system:system_recovery_installer",
      "//src/recovery/system:config_installer",
    ]

assemble_system("recovery-eng") {
  forward_variables_from(recovery_base, "*")
  base_packages = recovery_eng_packages
  system_image_deps = recovery_system_image_deps

  sysmgr_golden = "sysmgr-eng-golden.json"

  # TODO(fxbug.dev/81569): Move this metadata to assemble_system.gni.
  metadata = {
    images = [
      {
        label = get_label_info(":$target_name", "label_with_toolchain")
        name = "recovery-eng"
        path = rebase_path("$target_out_dir/recovery-eng/recovery-eng.zbi",
                           root_build_dir)
        type = "zbi"
      },
    ]

    if (custom_signing_script != "" || use_vboot) {
      images += [
        {
          label = get_label_info(":$target_name", "label_with_toolchain")
          name = "recovery-eng.signed"
          path = rebase_path(
                  "$target_out_dir/recovery-eng/recovery-eng.zbi.signed",
                  root_build_dir)
          type = "zbi.signed"
        },
      ]
    }
  }
}

assemble_system("recovery-fdr") {
  base_packages = recovery_packages
  generate_fvm = !bootfs_only

  system_image_deps = recovery_system_image_deps

  # We avoid compressing blobs in the blobfs image so that they can be more
  # effectively compressed by the ZBI compressor that is tuned to zstd max.
  if (generate_fvm) {
    assembly_compress_blobs = false
  }
  ramdisk_fvm_in_zbi = true

  include_component_id_index = true

  devmgr_config = [ "virtcon.disable=true" ]
  cmdline = []

  bootfs_labels = [
    ":root",
    "//build/info:bootfs",
    "//build/input:recovery_bootfs",
    "//bundles:bootstrap",
    "//bundles/drivers:bootstrap",
    "//bundles/drivers:usb-host-stack",
    "//bundles/drivers:usb-peripheral-stack",
  ]
  bootfs_labels +=
      [ "//src/sys/component_manager:component_manager_bootfs_config" ]

  sysmgr_golden = "sysmgr-fdr-golden.json"

  if (custom_signing_script != "") {
    zbi_signing_script = custom_signing_script
    deps = custom_signing_script_deps
  } else if (use_vboot) {
    zbi_signing_script = vboot_action.script
    zbi_signing_args = vboot_action.args
    deps = vboot_action.deps
  }
}

assemble_system("recovery-installer") {
  forward_variables_from(recovery_base, "*")
  base_packages = recovery_installer_packages
  system_image_deps = recovery_system_image_deps

  sysmgr_golden = "sysmgr-installer-golden.json"

  # The installer needs to see all partitions on the system so that it can
  #determine the installation source and destination
  fshost_config = [ "gpt-all" ]

  # TODO(fxbug.dev/81569): Move this metadata to assemble_system.gni.
  metadata = {
    images = [
      {
        label = get_label_info(":$target_name", "label_with_toolchain")
        name = "recovery-installer"
        path = rebase_path(
                "$target_out_dir/recovery-installer/recovery-installer.zbi",
                root_build_dir)
        type = "zbi"
      },
    ]

    if (custom_signing_script != "" || use_vboot) {
      images += [
        {
          label = get_label_info(":$target_name", "label_with_toolchain")
          name = "recovery-installer.signed"
          path = rebase_path(
                  "$target_out_dir/recovery-installer/recovery-installer.zbi.signed",
                  root_build_dir)
          type = "zbi.signed"
        },
      ]
    }
  }
}

if (is_host) {
  host_test_data("test_data") {
    out_dir = get_label_info(":anything($target_toolchain)", "target_out_dir")
    sources = [
      "${out_dir}/recovery-eng/recovery-eng.zbi",
      "${out_dir}/recovery-fdr/recovery-fdr.zbi",
      "${out_dir}/recovery-installer/recovery-installer.zbi",
    ]
    deps = [
      ":recovery-eng($target_toolchain)",
      ":recovery-fdr($target_toolchain)",
      ":recovery-installer($target_toolchain)",
    ]
  }
}
