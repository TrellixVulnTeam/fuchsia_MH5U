# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/board.gni")
import("//build/images/args.gni")
import("//build/images/custom_signing.gni")
import("//build/images/fvm.gni")
import("//build/images/vbmeta.gni")
import("//build/info/info.gni")
import("//build/product.gni")
import("//build/zbi/zbi.gni")

# Generates a board config to be consumed by the Image Assembler.
#
# Arguments
#   output_path (required)
#     [path] Board config output location.
#
#   base_package_name (required)
#     [string] The name to give the base package. For prime builds this
#     should be "system_image_prime", so that the package does not override the
#     non-prime package during publishing.
#
# MinFS data partition arguments
#   minfs_minimum_data_bytes, minfs_maximum_bytes (optional)
#     [int] Size options for minfs to pass to the fvm tool for the data partition.
#
# BlobFS arguments
#   blob_layout_format (required)
#     [string] Layout of the blobs (compact or padded).
#
#   compress_blobs (optional)
#     [bool] Whether the blobs in BlobFS should be compressed.
#
#   blobfs_minimum_inodes, blobfs_minimum_data_bytes, blobfs_maximum_bytes (optional)
#     [int] Size options for blobfs to pass to the fvm tool.
#
# FVM arguments
#   generate_fvm (optional; default: true)
#     [bool] Whether to generate a FVM image.
#
#   assembly_include_account_in_fvm (optional; default: false)
#     [bool] Whether to include an (empty) account partition in the FVM image.
#
#   embed_fvm_in_zbi (optional)
#     [bool] Whether the FVM should be embedded into the ZBI as a ramdisk.
#
#   fvm_truncate_to_length (optional)
#     [int] The precise size to make the (non-sparse) FVM image. See
#     documentation of the `--length` parameter of the `fvm` binary host tool
#     for details.
#
#   fvm_slice_size (required)
#     [int] The slice size of the FVM.
#
# ZBI arguments
#   zbi_name (required)
#     [string] The name to give the ZBI in the out directory.
#     Typically: fuchsia, recovery, etc.
#
#   zbi_signing_script (optional)
#     [path] Location of script to use to sign the ZBI.
#
#   zbi_signing_args (optional)
#     [list of strings] Arguments to pass to the signing script.
#
template("generated_board_config") {
  assert(defined(invoker.output_path), "Need to define output_path")
  assert(defined(invoker.blob_layout_format), "Need to define blob_layout_form")
  assert(defined(invoker.fvm_slice_size), "Need to define fvm_slice_size")
  assert(defined(invoker.zbi_name), "Need to define zbi_name")
  assert(defined(invoker.base_package_name), "Need to define base_package_name")

  generate_fvm = true
  if (defined(invoker.generate_fvm)) {
    generate_fvm = invoker.generate_fvm
  }

  if (generate_fvm) {
    assembly_include_account_in_fvm = true
    if (defined(invoker.assembly_include_account_in_fvm)) {
      assembly_include_account_in_fvm = invoker.assembly_include_account_in_fvm
    }
  }

  # Generate the vbmeta descriptor if needed, and add it to
  # vbmeta_descriptors.
  if (use_vbmeta) {
    descriptor_deps = []
    vbmeta_descriptors = []
    if (extra_vbmeta_descriptors != false) {
      vbmeta_descriptor_label = "${target_name}_vbmeta_descriptor"
      vbmeta_descriptor_file =
          "${target_out_dir}/${target_name}_vbmeta_descriptor.json"
      generated_file(vbmeta_descriptor_label) {
        forward_variables_from(invoker,
                               [
                                 "testonly",
                                 "visibility",
                               ])
        output_conversion = "json"
        contents = extra_vbmeta_descriptors[0]
        outputs = [ vbmeta_descriptor_file ]
      }
      descriptor_deps += [ ":${vbmeta_descriptor_label}" ]
      vbmeta_descriptors +=
          [ rebase_path(vbmeta_descriptor_file, root_build_dir) ]
    }
  }

  generated_file(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    deps = []
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
    if (use_vbmeta) {
      deps += descriptor_deps
    }

    outputs = [ invoker.output_path ]
    output_conversion = "json"

    if (fvm_partition != "" && generate_fvm) {
      if (fvm_fastboot_compression != "default") {
        fastboot_fvm_compression = fvm_fastboot_compression
      }
      if (fvm_emmc_partition_size != false) {
        fastboot_fvm_type = "emmc"
      } else if (fvm_ftl_nand_block_count != false) {
        fastboot_fvm_type = "nand"
      } else {
        assert(
            false,
            "|fvm_partition| is specified. But failed to determine the target format.")
      }
    }

    if (generate_fvm) {
      data_volume_parameters = {
        MinFS = {
          name = "data"

          if (defined(invoker.minfs_minimum_data_bytes)) {
            minimum_data_bytes = invoker.minfs_minimum_data_bytes
          }
          if (defined(invoker.minfs_maximum_bytes)) {
            maximum_bytes = invoker.minfs_maximum_bytes
          }
        }
      }
      blobfs_volume_parameters = {
        BlobFS = {
          name = "blob"

          if (defined(invoker.blobfs_minimum_inodes)) {
            minimum_inodes = invoker.blobfs_minimum_inodes
          }
          if (defined(invoker.blobfs_minimum_data_bytes)) {
            minimum_data_bytes = invoker.blobfs_minimum_data_bytes
          }
          if (defined(invoker.blobfs_maximum_bytes)) {
            maximum_bytes = invoker.blobfs_maximum_bytes
          }
        }
      }
    }

    contents = {
      base_package_name = invoker.base_package_name
      zbi = {
        name = invoker.zbi_name
        max_size = 0
        if (defined(invoker.embed_fvm_in_zbi)) {
          embed_fvm_in_zbi = invoker.embed_fvm_in_zbi
        }
        compression = zbi_compression

        if (defined(invoker.zbi_signing_script)) {
          # Set up the vboot script and its arguments.
          # Assembly always passes the -z and -o switches too.
          signing_script = {
            tool = rebase_path(invoker.zbi_signing_script, root_build_dir)
            if (defined(invoker.zbi_signing_args)) {
              extra_arguments = invoker.zbi_signing_args
            }
          }
        }
      }
      if (use_vbmeta) {
        vbmeta = {
          kernel_partition = "zircon"
          key = rebase_path(avb_key, root_build_dir)
          key_metadata = rebase_path(avb_atx_metadata, root_build_dir)
          additional_descriptor_files = vbmeta_descriptors
        }
      }

      blobfs = {
        layout = invoker.blob_layout_format
        if (defined(invoker.compress_blobs)) {
          compress = invoker.compress_blobs
        }
      }

      if (generate_fvm) {
        fvm = {
          slice_size = invoker.fvm_slice_size
          reserved_slices = fvm_reserved_slices

          if (fvm_max_disk_size != false) {
            max_disk_size = fvm_max_disk_size
          }

          if (defined(invoker.fvm_truncate_to_length)) {
            truncate_to_length = invoker.fvm_truncate_to_length
          }

          # Generated a fastboot-supported FVM if needed.
          if (defined(fastboot_fvm_type)) {
            fastboot = {
              if (fastboot_fvm_type == "emmc") {
                # Format for EMMC.
                Emmc = {
                  if (defined(fastboot_fvm_compression)) {
                    compression = fastboot_fvm_compression
                  }
                  length = fvm_emmc_partition_size
                }
              } else if (fastboot_fvm_type == "nand") {
                # Format for NAND.
                Nand = {
                  if (defined(fastboot_fvm_compression)) {
                    compression = fastboot_fvm_compression
                  }
                  page_size = fvm_ftl_nand_page_size
                  oob_size = fvm_ftl_nand_oob_size
                  pages_per_block = fvm_ftl_nand_pages_per_block
                  block_count = fvm_ftl_nand_block_count
                }
              }
            }
          }

          filesystems = [
            data_volume_parameters,
            blobfs_volume_parameters,
          ]

          if (assembly_include_account_in_fvm) {
            filesystems += [
              {
                MinFS = {
                  name = "account"
                }
              },
            ]
          }
        }
      }
    }
  }
}
